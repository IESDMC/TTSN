diff --git a/node_modules/vue-good-table-next/dist/vue-good-table-next.cjs.prod.js b/node_modules/vue-good-table-next/dist/vue-good-table-next.cjs.prod.js
index cf2613b..447ba83 100644
--- a/node_modules/vue-good-table-next/dist/vue-good-table-next.cjs.prod.js
+++ b/node_modules/vue-good-table-next/dist/vue-good-table-next.cjs.prod.js
@@ -1,5 +1,5 @@
 /*!
-  * vue-good-table-next v0.2.0
+  * vue-good-table-next v0.2.1
   * (c) 2021-present Boris Flesch <boris@singlequote.net>
   * (c) 2017-2021 xaksis <shay@crayonbits.com>
   * @license MIT
@@ -10,19 +10,6 @@ Object.defineProperty(exports, '__esModule', { value: true });
 
 var vue = require('vue');
 
-const DEFAULT_SORT_TYPE = 'asc';
-const SORT_TYPES = {
-  Ascending: 'asc',
-  Descending: 'desc',
-  None: 'none',
-};
-
-const PAGINATION_MODES = {
-  Pages: 'pages',
-  Records: 'records',
-};
-const DEFAULT_ROWS_PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];
-
 var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
 
 var lodash_isequal = {exports: {}};
@@ -1880,2575 +1867,2087 @@ module.exports = isEqual;
 
 var isEqual = lodash_isequal.exports;
 
-// all diacritics
-let diacritics = {
-  a: [
-    "a",
-    "à",
-    "á",
-    "â",
-    "ã",
-    "ä",
-    "å",
-    "æ",
-    "ā",
-    "ă",
-    "ą",
-    "ǎ",
-    "ǟ",
-    "ǡ",
-    "ǻ",
-    "ȁ",
-    "ȃ",
-    "ȧ",
-    "ɐ",
-    "ɑ",
-    "ɒ",
-    "ͣ",
-    "а",
-    "ӑ",
-    "ӓ",
-    "ᵃ",
-    "ᵄ",
-    "ᶏ",
-    "ḁ",
-    "ẚ",
-    "ạ",
-    "ả",
-    "ấ",
-    "ầ",
-    "ẩ",
-    "ẫ",
-    "ậ",
-    "ắ",
-    "ằ",
-    "ẳ",
-    "ẵ",
-    "ặ",
-    "ₐ",
-    "ⱥ",
-    "ａ",
+var _export_sfc = (sfc, props) => {
+  const target = sfc.__vccOpts || sfc;
+  for (const [key, val] of props) {
+    target[key] = val;
+  }
+  return target;
+};
+
+const _sfc_main$6 = {
+  name: 'VgtGlobalSearch',
+  props: [
+    'value',
+    'searchEnabled',
+    'globalSearchPlaceholder',
   ],
-  b: ["b", "ƀ", "ƃ", "ɓ", "ᖯ", "ᵇ", "ᵬ", "ᶀ", "ḃ", "ḅ", "ḇ", "ｂ"],
-  c: ["c", "ç", "ć", "ĉ", "ċ", "č", "ƈ", "ȼ", "ɕ", "ͨ", "ᴄ", "ᶜ", "ḉ", "ↄ", "ｃ"],
-  d: [
-    "d",
-    "ď",
-    "đ",
-    "Ƌ",
-    "ƌ",
-    "ȡ",
-    "ɖ",
-    "ɗ",
-    "ͩ",
-    "ᵈ",
-    "ᵭ",
-    "ᶁ",
-    "ᶑ",
-    "ḋ",
-    "ḍ",
-    "ḏ",
-    "ḑ",
-    "ḓ",
-    "ｄ",
+  emits: [
+    'input',
+    'keyup',
+    'enter',
   ],
-  e: [
-    "e",
-    "è",
-    "é",
-    "ê",
-    "ë",
-    "ē",
-    "ĕ",
-    "ė",
-    "ę",
-    "ě",
-    "ǝ",
-    "ȅ",
-    "ȇ",
-    "ȩ",
-    "ɇ",
-    "ɘ",
-    "ͤ",
-    "ᵉ",
-    "ᶒ",
-    "ḕ",
-    "ḗ",
-    "ḙ",
-    "ḛ",
-    "ḝ",
-    "ẹ",
-    "ẻ",
-    "ẽ",
-    "ế",
-    "ề",
-    "ể",
-    "ễ",
-    "ệ",
-    "ₑ",
-    "ｅ",
+  data() {
+    return {
+      globalSearchTerm: null,
+      id: this.getId(),
+    };
+  },
+  computed: {
+    showControlBar() {
+      if (this.searchEnabled) return true;
+      if (this.$slots && this.$slots['internal-table-actions']) return true;
+      return false;
+    },
+  },
+  methods: {
+    updateValue(value) {
+      this.$emit('input', value);
+      this.$emit('keyup', value);
+    },
+    entered(value) {
+      this.$emit('enter', value);
+    },
+    getId() {
+      return `vgt-search-${Math.floor(Math.random() * Date.now())}`;
+    },
+  },
+};
+
+const _hoisted_1$6 = {
+  key: 0,
+  class: "vgt-global-search vgt-clearfix"
+};
+const _hoisted_2$6 = { class: "vgt-global-search__input vgt-pull-left" };
+const _hoisted_3$6 = ["for"];
+const _hoisted_4$6 = /*#__PURE__*/vue.createElementVNode("span", {
+  "aria-hidden": "true",
+  class: "input__icon"
+}, [
+  /*#__PURE__*/vue.createElementVNode("div", { class: "magnifying-glass" })
+], -1 /* HOISTED */);
+const _hoisted_5$6 = /*#__PURE__*/vue.createElementVNode("span", { class: "sr-only" }, "Search", -1 /* HOISTED */);
+const _hoisted_6$6 = [
+  _hoisted_4$6,
+  _hoisted_5$6
+];
+const _hoisted_7$5 = ["id", "placeholder", "value"];
+const _hoisted_8$3 = { class: "vgt-global-search__actions vgt-pull-right" };
+
+function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
+  return ($options.showControlBar)
+    ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$6, [
+        vue.createElementVNode("div", _hoisted_2$6, [
+          ($props.searchEnabled)
+            ? (vue.openBlock(), vue.createElementBlock("form", {
+                key: 0,
+                onSubmit: _cache[2] || (_cache[2] = vue.withModifiers(() => {}, ["prevent"])),
+                role: "search"
+              }, [
+                vue.createElementVNode("label", { for: $data.id }, [..._hoisted_6$6], 8 /* PROPS */, _hoisted_3$6),
+                vue.createElementVNode("input", {
+                  id: $data.id,
+                  type: "text",
+                  class: "vgt-input vgt-pull-left",
+                  placeholder: $props.globalSearchPlaceholder,
+                  value: $props.value,
+                  onInput: _cache[0] || (_cache[0] = $event => ($options.updateValue($event.target.value))),
+                  onKeyup: _cache[1] || (_cache[1] = vue.withKeys($event => ($options.entered($event.target.value)), ["enter"]))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$5)
+              ], 32 /* NEED_HYDRATION */))
+            : vue.createCommentVNode("v-if", true)
+        ]),
+        vue.createElementVNode("div", _hoisted_8$3, [
+          vue.renderSlot(_ctx.$slots, "internal-table-actions")
+        ])
+      ]))
+    : vue.createCommentVNode("v-if", true)
+}
+var VgtGlobalSearch = /*#__PURE__*/_export_sfc(_sfc_main$6, [['render',_sfc_render$6]]);
+
+const _sfc_main$5 = {
+  name: 'VgtHeaderRow',
+  props: {
+    headerRow: {
+      type: Object,
+    },
+    columns: {
+      type: Array,
+    },
+    lineNumbers: {
+      type: Boolean,
+    },
+    selectable: {
+      type: Boolean,
+    },
+    selectAllByGroup: {
+      type: Boolean
+    },
+    collapsable: {
+      type: [Boolean, Number],
+      default: false,
+    },
+    collectFormatted: {
+      type: Function,
+    },
+    formattedRow: {
+      type: Function,
+    },
+    getClasses: {
+      type: Function,
+    },
+    fullColspan: {
+      type: Number,
+    },
+    groupIndex: {
+      type: Number
+    },
+  },
+  emits: [
+    'vgtExpand',
+    'select-group-change',
   ],
-  f: ["f", "ƒ", "ᵮ", "ᶂ", "ᶠ", "ḟ", "ｆ"],
-  g: ["g", "ĝ", "ğ", "ġ", "ģ", "ǥ", "ǧ", "ǵ", "ɠ", "ɡ", "ᵍ", "ᵷ", "ᵹ", "ᶃ", "ᶢ", "ḡ", "ｇ"],
-  h: [
-    "h",
-    "ĥ",
-    "ħ",
-    "ƕ",
-    "ȟ",
-    "ɥ",
-    "ɦ",
-    "ʮ",
-    "ʯ",
-    "ʰ",
-    "ʱ",
-    "ͪ",
-    "Һ",
-    "һ",
-    "ᑋ",
-    "ᶣ",
-    "ḣ",
-    "ḥ",
-    "ḧ",
-    "ḩ",
-    "ḫ",
-    "ⱨ",
-    "ｈ",
-  ],
-  i: [
-    "i",
-    "ì",
-    "í",
-    "î",
-    "ï",
-    "ĩ",
-    "ī",
-    "ĭ",
-    "į",
-    "ǐ",
-    "ȉ",
-    "ȋ",
-    "ɨ",
-    "ͥ",
-    "ᴉ",
-    "ᵎ",
-    "ᵢ",
-    "ᶖ",
-    "ᶤ",
-    "ḭ",
-    "ḯ",
-    "ỉ",
-    "ị",
-    "ｉ",
-  ],
-  j: ["j", "ĵ", "ǰ", "ɉ", "ʝ", "ʲ", "ᶡ", "ᶨ", "ｊ"],
-  k: ["k", "ķ", "ƙ", "ǩ", "ʞ", "ᵏ", "ᶄ", "ḱ", "ḳ", "ḵ", "ⱪ", "ｋ"],
-  l: [
-    "l",
-    "ĺ",
-    "ļ",
-    "ľ",
-    "ŀ",
-    "ł",
-    "ƚ",
-    "ȴ",
-    "ɫ",
-    "ɬ",
-    "ɭ",
-    "ˡ",
-    "ᶅ",
-    "ᶩ",
-    "ᶪ",
-    "ḷ",
-    "ḹ",
-    "ḻ",
-    "ḽ",
-    "ℓ",
-    "ⱡ",
-  ],
-  m: ["m", "ɯ", "ɰ", "ɱ", "ͫ", "ᴟ", "ᵐ", "ᵚ", "ᵯ", "ᶆ", "ᶬ", "ᶭ", "ḿ", "ṁ", "ṃ", "㎡", "㎥", "ｍ"],
-  n: [
-    "n",
-    "ñ",
-    "ń",
-    "ņ",
-    "ň",
-    "ŉ",
-    "ƞ",
-    "ǹ",
-    "ȵ",
-    "ɲ",
-    "ɳ",
-    "ᵰ",
-    "ᶇ",
-    "ᶮ",
-    "ᶯ",
-    "ṅ",
-    "ṇ",
-    "ṉ",
-    "ṋ",
-    "ⁿ",
-    "ｎ",
+  data() {
+    return {
+    };
+  },
+  computed: {
+    allSelected() {
+      const { headerRow } = this;
+      return headerRow.children.filter((row) => row.vgtSelected).length === headerRow.children.length;
+    }
+  },
+  methods: {
+    columnCollapsable(currentIndex) {
+      if (this.collapsable === true) {
+        return currentIndex === 0;
+      }
+      return currentIndex === this.collapsable;
+    },
+    toggleSelectGroup(event) {
+      this.$emit('select-group-change', {
+        groupIndex: this.groupIndex, checked: event.target.checked
+      });
+    }
+  },
+
+  mounted() {
+  },
+  components: {
+  },
+};
+
+const _hoisted_1$5 = ["colspan"];
+const _hoisted_2$5 = ["checked"];
+const _hoisted_3$5 = ["innerHTML"];
+const _hoisted_4$5 = { key: 1 };
+const _hoisted_5$5 = {
+  key: 1,
+  class: "vgt-row-header"
+};
+const _hoisted_6$5 = {
+  key: 2,
+  class: "vgt-row-header"
+};
+const _hoisted_7$4 = ["checked"];
+const _hoisted_8$2 = ["onClick"];
+const _hoisted_9$2 = { key: 0 };
+const _hoisted_10$2 = ["innerHTML"];
+
+function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
+  return (vue.openBlock(), vue.createElementBlock("tr", null, [
+    ($props.headerRow.mode === 'span')
+      ? (vue.openBlock(), vue.createElementBlock("th", {
+          key: 0,
+          class: "vgt-left-align vgt-row-header",
+          colspan: $props.fullColspan
+        }, [
+          ($props.selectAllByGroup)
+            ? vue.renderSlot(_ctx.$slots, "table-header-group-select", {
+                key: 0,
+                columns: $props.columns,
+                row: $props.headerRow
+              }, () => [
+                vue.createElementVNode("input", {
+                  type: "checkbox",
+                  checked: $options.allSelected,
+                  onChange: _cache[0] || (_cache[0] = $event => ($options.toggleSelectGroup($event)))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2$5)
+              ])
+            : vue.createCommentVNode("v-if", true),
+          vue.createElementVNode("span", {
+            onClick: _cache[1] || (_cache[1] = $event => ($props.collapsable ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {}))
+          }, [
+            ($props.collapsable)
+              ? (vue.openBlock(), vue.createElementBlock("span", {
+                  key: 0,
+                  class: vue.normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
+                }, null, 2 /* CLASS */))
+              : vue.createCommentVNode("v-if", true),
+            vue.renderSlot(_ctx.$slots, "table-header-row", { row: $props.headerRow }, () => [
+              ($props.headerRow.html)
+                ? (vue.openBlock(), vue.createElementBlock("span", {
+                    key: 0,
+                    innerHTML: $props.headerRow.label
+                  }, null, 8 /* PROPS */, _hoisted_3$5))
+                : (vue.openBlock(), vue.createElementBlock("span", _hoisted_4$5, vue.toDisplayString($props.headerRow.label), 1 /* TEXT */))
+            ])
+          ])
+        ], 8 /* PROPS */, _hoisted_1$5))
+      : vue.createCommentVNode("v-if", true),
+    vue.createCommentVNode(" if the mode is not span, we display every column "),
+    ($props.headerRow.mode !== 'span' && $props.lineNumbers)
+      ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_5$5))
+      : vue.createCommentVNode("v-if", true),
+    ($props.headerRow.mode !== 'span' && $props.selectable)
+      ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_6$5, [
+          ($props.selectAllByGroup)
+            ? vue.renderSlot(_ctx.$slots, "table-header-group-select", {
+                key: 0,
+                columns: $props.columns,
+                row: $props.headerRow
+              }, () => [
+                vue.createElementVNode("input", {
+                  type: "checkbox",
+                  checked: $options.allSelected,
+                  onChange: _cache[2] || (_cache[2] = $event => ($options.toggleSelectGroup($event)))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$4)
+              ])
+            : vue.createCommentVNode("v-if", true)
+        ]))
+      : vue.createCommentVNode("v-if", true),
+    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, i) => {
+      return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: i }, [
+        ($props.headerRow.mode !== 'span' && !column.hidden)
+          ? (vue.openBlock(), vue.createElementBlock("th", {
+              key: 0,
+              class: vue.normalizeClass(["vgt-row-header", $props.getClasses(i, 'td')]),
+              onClick: $event => ($options.columnCollapsable(i) ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {})
+            }, [
+              ($options.columnCollapsable(i))
+                ? (vue.openBlock(), vue.createElementBlock("span", {
+                    key: 0,
+                    class: vue.normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
+                  }, null, 2 /* CLASS */))
+                : vue.createCommentVNode("v-if", true),
+              vue.renderSlot(_ctx.$slots, "table-header-row", {
+                row: $props.headerRow,
+                column: column,
+                formattedRow: $props.formattedRow($props.headerRow, true)
+              }, () => [
+                (!column.html)
+                  ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_9$2, vue.toDisplayString($props.collectFormatted($props.headerRow, column, true)), 1 /* TEXT */))
+                  : vue.createCommentVNode("v-if", true),
+                (column.html)
+                  ? (vue.openBlock(), vue.createElementBlock("span", {
+                      key: 1,
+                      innerHTML: $props.collectFormatted($props.headerRow, column, true)
+                    }, null, 8 /* PROPS */, _hoisted_10$2))
+                  : vue.createCommentVNode("v-if", true)
+              ])
+            ], 10 /* CLASS, PROPS */, _hoisted_8$2))
+          : vue.createCommentVNode("v-if", true)
+      ], 64 /* STABLE_FRAGMENT */))
+    }), 128 /* KEYED_FRAGMENT */))
+  ]))
+}
+var VgtHeaderRow = /*#__PURE__*/_export_sfc(_sfc_main$5, [['render',_sfc_render$5]]);
+
+const _sfc_main$4 = {
+  name: 'VgtFilterRow',
+  props: [
+    'lineNumbers',
+    'columns',
+    'expandRowsEnabled',
+    'typedColumns',
+    'globalSearchEnabled',
+    'selectable',
+    'mode',
   ],
-  o: [
-    "o",
-    "ò",
-    "ó",
-    "ô",
-    "õ",
-    "ö",
-    "ø",
-    "ō",
-    "ŏ",
-    "ő",
-    "ơ",
-    "ǒ",
-    "ǫ",
-    "ǭ",
-    "ǿ",
-    "ȍ",
-    "ȏ",
-    "ȫ",
-    "ȭ",
-    "ȯ",
-    "ȱ",
-    "ɵ",
-    "ͦ",
-    "о",
-    "ӧ",
-    "ө",
-    "ᴏ",
-    "ᴑ",
-    "ᴓ",
-    "ᴼ",
-    "ᵒ",
-    "ᶱ",
-    "ṍ",
-    "ṏ",
-    "ṑ",
-    "ṓ",
-    "ọ",
-    "ỏ",
-    "ố",
-    "ồ",
-    "ổ",
-    "ỗ",
-    "ộ",
-    "ớ",
-    "ờ",
-    "ở",
-    "ỡ",
-    "ợ",
-    "ₒ",
-    "ｏ",
-    "𐐬",
-  ],
-  p: ["p", "ᵖ", "ᵱ", "ᵽ", "ᶈ", "ṕ", "ṗ", "ｐ"],
-  q: ["q", "ɋ", "ʠ", "ᛩ", "ｑ"],
-  r: [
-    "r",
-    "ŕ",
-    "ŗ",
-    "ř",
-    "ȑ",
-    "ȓ",
-    "ɍ",
-    "ɹ",
-    "ɻ",
-    "ʳ",
-    "ʴ",
-    "ʵ",
-    "ͬ",
-    "ᵣ",
-    "ᵲ",
-    "ᶉ",
-    "ṙ",
-    "ṛ",
-    "ṝ",
-    "ṟ",
-  ],
-  s: ["s", "ś", "ŝ", "ş", "š", "ș", "ʂ", "ᔆ", "ᶊ", "ṡ", "ṣ", "ṥ", "ṧ", "ṩ", "ｓ"],
-  t: [
-    "t",
-    "ţ",
-    "ť",
-    "ŧ",
-    "ƫ",
-    "ƭ",
-    "ț",
-    "ʇ",
-    "ͭ",
-    "ᵀ",
-    "ᵗ",
-    "ᵵ",
-    "ᶵ",
-    "ṫ",
-    "ṭ",
-    "ṯ",
-    "ṱ",
-    "ẗ",
-    "ｔ",
-  ],
-  u: [
-    "u",
-    "ù",
-    "ú",
-    "û",
-    "ü",
-    "ũ",
-    "ū",
-    "ŭ",
-    "ů",
-    "ű",
-    "ų",
-    "ư",
-    "ǔ",
-    "ǖ",
-    "ǘ",
-    "ǚ",
-    "ǜ",
-    "ȕ",
-    "ȗ",
-    "ͧ",
-    "ߎ",
-    "ᵘ",
-    "ᵤ",
-    "ṳ",
-    "ṵ",
-    "ṷ",
-    "ṹ",
-    "ṻ",
-    "ụ",
-    "ủ",
-    "ứ",
-    "ừ",
-    "ử",
-    "ữ",
-    "ự",
-    "ｕ",
-  ],
-  v: ["v", "ʋ", "ͮ", "ᵛ", "ᵥ", "ᶹ", "ṽ", "ṿ", "ⱱ", "ｖ", "ⱴ"],
-  w: ["w", "ŵ", "ʷ", "ᵂ", "ẁ", "ẃ", "ẅ", "ẇ", "ẉ", "ẘ", "ⱳ", "ｗ"],
-  x: ["x", "̽", "͓", "ᶍ", "ͯ", "ẋ", "ẍ", "ₓ", "ｘ"],
-  y: ["y", "ý", "ÿ", "ŷ", "ȳ", "ɏ", "ʸ", "ẏ", "ỳ", "ỵ", "ỷ", "ỹ", "ｙ"],
-  z: [
-    "z",
-    "ź",
-    "ż",
-    "ž",
-    "ƶ",
-    "ȥ",
-    "ɀ",
-    "ʐ",
-    "ʑ",
-    "ᙆ",
-    "ᙇ",
-    "ᶻ",
-    "ᶼ",
-    "ᶽ",
-    "ẑ",
-    "ẓ",
-    "ẕ",
-    "ⱬ",
-    "ｚ",
-  ],
-};
+  emits: ['filter-changed'],
+  watch: {
+    columns: {
+      handler(newValue, oldValue) {
+        this.populateInitialFilters();
+      },
+      deep: true,
+      immediate: true,
+    },
+  },
+  data() {
+    return {
+      columnFilters: {},
+      timer: null,
+    };
+  },
+  computed: {
 
-// Precompiled Object with { key = Diacritic, value = real-Character }
-const compiledDiactitics = (function() {
-  let x = {};
+    // to create a filter row, we need to
+    // make sure that there is atleast 1 column
+    // that requires filtering
+    hasFilterRow() {
+      // if (this.mode === 'remote' || !this.globalSearchEnabled) {
+      for (let i = 0; i < this.columns.length; i++) {
+        const col = this.columns[i];
+        if (col.filterOptions && col.filterOptions.enabled) {
+          return true;
+        }
+      }
+      // }
+      return false;
+    },
+  },
+  methods: {
 
-  for (let key in diacritics) {
-    let ok = diacritics[key];
+    fieldKey(field) {
+      if (typeof(field) === 'function' && field.name) {
+        return field.name;
+      }
+      return field;
+    },
 
-    for (let rval in ok) {
-      let val = ok[rval];
+    reset(emitEvent = false) {
+      this.columnFilters = {};
 
-      // Do not replace the char with itself
-      if (val !== key) {
-        x[val] = key;
+      if (emitEvent) {
+        this.$emit('filter-changed', this.columnFilters);
       }
-    }
-  }
+    },
 
-  return x;
-})();
+    isFilterable(column) {
+      return column.filterOptions
+        && column.filterOptions.enabled;
+    },
 
-// Regex for detecting non-ASCII-Characters in String
-const regexNonASCII = /[^a-z0-9\s,.-]/;
+    isDropdown(column) {
+      return this.isFilterable(column)
+        && column.filterOptions.filterDropdownItems
+        && column.filterOptions.filterDropdownItems.length;
+    },
 
-/*
- * Main function of the module which removes all diacritics from the received text
- */
-const diacriticless = (text) => {
-  // When there are only ascii-Characters in the string, skip processing and return text right away
-  if (text.search(regexNonASCII) === -1) {
-    return text;
-  }
+    isDropdownObjects(column) {
+      return this.isDropdown(column)
+        && typeof column.filterOptions.filterDropdownItems[0] === 'object';
+    },
 
-  let result = "";
+    isDropdownArray(column) {
+      return this.isDropdown(column)
+        && typeof column.filterOptions.filterDropdownItems[0] !== 'object';
+    },
 
-  let len = text.length;
-  for (var i = 0; i < len; i++) {
-    let searchChar = text.charAt(i);
+    getClasses(column) {
+      const firstClass = 'filter-th';
+      return (column.filterOptions && column.filterOptions.styleClass) ? [firstClass, ...column.filterOptions.styleClass.split(' ')].join(' ') : firstClass;
+    },
 
-    // If applicable replace the diacritic character with the real one or use the original value
-    result += searchChar in compiledDiactitics ? compiledDiactitics[searchChar] : searchChar;
-  }
+    // get column's defined placeholder or default one
+    getPlaceholder(column) {
+      const placeholder = (this.isFilterable(column) && column.filterOptions.placeholder) || `Filter ${column.label}`;
+      return placeholder;
+    },
 
-  return result;
-};
+    getName(column) {
+      return `vgt-${this.fieldKey(column.field)}`;
+    },
 
-const escapeRegExp = str => str.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
+    updateFiltersOnEnter(column, value) {
+      if (this.timer) clearTimeout(this.timer);
+      this.updateFiltersImmediately(column.field, value);
+    },
 
-var defaultType = {
-  format(x) {
-    return x;
-  },
-  filterPredicate(rowval, filter, skipDiacritics = false, fromDropdown = false) {
-    // take care of nulls
-    if (typeof rowval === 'undefined' || rowval === null) {
-      return false;
-    }
+    updateFiltersOnKeyup(column, value) {
+      // if the trigger is enter, we don't filter on keyup
+      if (column.filterOptions.trigger === 'enter') return;
+      this.updateFilters(column, value);
+    },
 
-    // row value
-    const rowValue = skipDiacritics
-      ? String(rowval).toLowerCase()
-      : diacriticless(escapeRegExp(String(rowval)).toLowerCase());
+    updateSlotFilter(column, value) {
+      let fieldToFilter = column.filterOptions.slotFilterField || column.field;
+      if (typeof column.filterOptions.formatValue === 'function') {
+        value = column.filterOptions.formatValue(value);
+      }
+      this.updateFiltersImmediately(fieldToFilter, value);
+    },
 
-    // search term
-    const searchTerm = skipDiacritics
-      ? filter.toLowerCase()
-      : diacriticless(escapeRegExp(filter).toLowerCase());
+    // since vue doesn't detect property addition and deletion, we
+    // need to create helper function to set property etc
+    updateFilters(column, value) {
+      if (this.timer) clearTimeout(this.timer);
+      this.timer = setTimeout(() => {
+        this.updateFiltersImmediately(column.field, value);
+      }, 400);
+    },
 
-    // comparison
-    return fromDropdown ? rowValue === searchTerm : (rowValue.indexOf(searchTerm) > -1);
-  },
+    updateFiltersImmediately(field, value) {
+      this.columnFilters[this.fieldKey(field)] = value;
+      this.$emit('filter-changed', this.columnFilters);
+    },
 
-  compare(x, y) {
-    function cook(d) {
-      if (typeof d === 'undefined' || d === null) return '';
-      return diacriticless(String(d).toLowerCase());
-    }
-    x = cook(x);
-    y = cook(y);
-    if (x < y) return -1;
-    if (x > y) return 1;
-    return 0;
+    populateInitialFilters() {
+      for (let i = 0; i < this.columns.length; i++) {
+        const col = this.columns[i];
+        // lets see if there are initial
+        // filters supplied by user
+        if (this.isFilterable(col)
+          && typeof col.filterOptions.filterValue !== 'undefined'
+          && col.filterOptions.filterValue !== null) {
+          this.columnFilters[this.fieldKey(col.field)] = col.filterOptions.filterValue;
+          // this.updateFilters(col, col.filterOptions.filterValue);
+          // this.$set(col.filterOptions, 'filterValue', undefined);
+        }
+      }
+      //* lets emit event once all filters are set
+      this.$emit('filter-changed', this.columnFilters);
+    },
   },
 };
 
-var _export_sfc = (sfc, props) => {
-  const target = sfc.__vccOpts || sfc;
-  for (const [key, val] of props) {
-    target[key] = val;
+const _hoisted_1$4 = { key: 0 };
+const _hoisted_2$4 = { key: 0 };
+const _hoisted_3$4 = { key: 1 };
+const _hoisted_4$4 = { key: 2 };
+const _hoisted_5$4 = { key: 0 };
+const _hoisted_6$4 = ["name", "placeholder", "value", "onKeyup", "onInput"];
+const _hoisted_7$3 = ["name", "value", "onChange"];
+const _hoisted_8$1 = {
+  value: "",
+  key: "-1"
+};
+const _hoisted_9$1 = ["value"];
+const _hoisted_10$1 = ["name", "value", "onChange"];
+const _hoisted_11$1 = {
+  value: "",
+  key: "-1"
+};
+const _hoisted_12$1 = ["value"];
+
+function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
+  return ($options.hasFilterRow)
+    ? (vue.openBlock(), vue.createElementBlock("tr", _hoisted_1$4, [
+        ($props.expandRowsEnabled)
+          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_2$4))
+          : vue.createCommentVNode("v-if", true),
+        ($props.lineNumbers)
+          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_3$4))
+          : vue.createCommentVNode("v-if", true),
+        ($props.selectable)
+          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_4$4))
+          : vue.createCommentVNode("v-if", true),
+        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, index) => {
+          return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
+            (!column.hidden)
+              ? (vue.openBlock(), vue.createElementBlock("th", {
+                  key: 0,
+                  class: vue.normalizeClass($options.getClasses(column))
+                }, [
+                  vue.renderSlot(_ctx.$slots, "column-filter", {
+                    column: column,
+                    updateFilters: $options.updateSlotFilter
+                  }, () => [
+                    ($options.isFilterable(column))
+                      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_5$4, [
+                          (!$options.isDropdown(column))
+                            ? (vue.openBlock(), vue.createElementBlock("input", {
+                                key: 0,
+                                name: $options.getName(column),
+                                type: "text",
+                                class: "vgt-input",
+                                placeholder: $options.getPlaceholder(column),
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onKeyup: vue.withKeys($event => ($options.updateFiltersOnEnter(column, $event.target.value)), ["enter"]),
+                                onInput: $event => ($options.updateFiltersOnKeyup(column, $event.target.value))
+                              }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6$4))
+                            : vue.createCommentVNode("v-if", true),
+                          vue.createCommentVNode(" options are a list of primitives "),
+                          ($options.isDropdownArray(column))
+                            ? (vue.openBlock(), vue.createElementBlock("select", {
+                                key: 1,
+                                name: $options.getName(column),
+                                class: "vgt-select",
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
+                              }, [
+                                vue.createElementVNode("option", _hoisted_8$1, vue.toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
+                                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(column.filterOptions.filterDropdownItems, (option, i) => {
+                                  return (vue.openBlock(), vue.createElementBlock("option", {
+                                    key: i,
+                                    value: option
+                                  }, vue.toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_9$1))
+                                }), 128 /* KEYED_FRAGMENT */))
+                              ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$3))
+                            : vue.createCommentVNode("v-if", true),
+                          vue.createCommentVNode(" options are a list of objects with text and value "),
+                          ($options.isDropdownObjects(column))
+                            ? (vue.openBlock(), vue.createElementBlock("select", {
+                                key: 2,
+                                name: $options.getName(column),
+                                class: "vgt-select",
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
+                              }, [
+                                vue.createElementVNode("option", _hoisted_11$1, vue.toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
+                                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(column.filterOptions.filterDropdownItems, (option, i) => {
+                                  return (vue.openBlock(), vue.createElementBlock("option", {
+                                    key: i,
+                                    value: option.value
+                                  }, vue.toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_12$1))
+                                }), 128 /* KEYED_FRAGMENT */))
+                              ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_10$1))
+                            : vue.createCommentVNode("v-if", true)
+                        ]))
+                      : vue.createCommentVNode("v-if", true)
+                  ])
+                ], 2 /* CLASS */))
+              : vue.createCommentVNode("v-if", true)
+          ], 64 /* STABLE_FRAGMENT */))
+        }), 128 /* KEYED_FRAGMENT */))
+      ]))
+    : vue.createCommentVNode("v-if", true)
+}
+var VgtFilterRow = /*#__PURE__*/_export_sfc(_sfc_main$4, [['render',_sfc_render$4]]);
+
+const DEFAULT_SORT_TYPE = 'asc';
+const SORT_TYPES = {
+  Ascending: 'asc',
+  Descending: 'desc',
+  None: 'none',
+};
+
+const PAGINATION_MODES = {
+  Pages: 'pages',
+  Records: 'records',
+};
+const DEFAULT_ROWS_PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];
+
+function getColumnFirstSortType(column) {
+  return column.firstSortType || DEFAULT_SORT_TYPE;
+}
+
+function getCurrentPrimarySort(sortArray, column) {
+  return ( sortArray.length === 1 && sortArray[0].field === column.field )
+  ? sortArray[0].type
+  : undefined;
+}
+
+function getNextSort(currentSort, column) {
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.Ascending) {
+    return SORT_TYPES.None
+  } else if (currentSort === SORT_TYPES.Ascending) {
+    return SORT_TYPES.Descending;
   }
-  return target;
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.Descending) {
+    return SORT_TYPES.Ascending;
+  } else if (currentSort === SORT_TYPES.Descending) {
+    return SORT_TYPES.None;
+  }
+
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.None) {
+    return SORT_TYPES.Descending;
+  } else {
+    return SORT_TYPES.Ascending;
+  }
+
+}
+
+function getIndex(sortArray, column) {
+  for (let i = 0; i < sortArray.length; i++) {
+    if (column.field === sortArray[i].field) return i;
+  }
+  return -1;
+}
+
+const primarySort = (sortArray, column) => {
+  const currentPrimarySort = getCurrentPrimarySort(sortArray, column);
+  const nextPrimarySort = getNextSort(currentPrimarySort, column);
+  return [{
+    field: column.field,
+    type: currentPrimarySort ? nextPrimarySort : getColumnFirstSortType(column),
+  }];
 };
 
-const _sfc_main$6 = {
-  name: 'VgtPaginationPageInfo',
+const secondarySort = (sortArray, column) => {
+  const index = getIndex(sortArray, column);
+  if (index === -1) {
+    sortArray.push({
+      field: column.field,
+      type: getColumnFirstSortType(column),
+    });
+  } else {
+    sortArray[index].type = getNextSort(sortArray[index].type, column);
+  }
+  return sortArray;
+};
+
+const _sfc_main$3 = {
+  name: 'VgtTableHeader',
   props: {
-    currentPage: {
-      default: 1,
+    lineNumbers: {
+      default: false,
+      type: Boolean,
     },
-    lastPage: {
-      default: 1,
+    selectable: {
+      default: false,
+      type: Boolean,
     },
-    totalRecords: {
-      default: 0,
+    allSelected: {
+      default: false,
+      type: Boolean,
     },
-    ofText: {
-      default: 'of',
-      type: String,
+    allSelectedIndeterminate: {
+      default: false,
+      type: Boolean,
     },
-    pageText: {
-      default: 'page',
-      type: String,
+    columns: {
+      type: Array,
+    },
+    expandRowsEnabled: {
+      default: false,
+      type: Boolean,
     },
-    currentPerPage: {},
     mode: {
-      default: PAGINATION_MODES.Records,
+      type: String,
     },
-    infoFn: { default: null },
-  },
-  data() {
-    return {
-      id: this.getId(),
-    };
-  },
-  computed: {
-    pageInfo() {
-      return `${this.ofText} ${this.lastPage}`;
-    },
-    firstRecordOnPage() {
-      return ((this.currentPage - 1) * this.currentPerPage) + 1;
-    },
-    lastRecordOnPage() {
-      return Math.min(this.totalRecords, this.currentPage * this.currentPerPage);
-    },
-    recordInfo() {
-      let first = this.firstRecordOnPage;
-      const last = this.lastRecordOnPage;
-
-      if (last === 0) {
-        first = 0;
-      }
+    typedColumns: {},
 
-      return `${first} - ${last} ${this.ofText} ${this.totalRecords}`;
-    },
-    infoParams() {
-      let first = this.firstRecordOnPage;
-      const last = this.lastRecordOnPage;
-      if (last === 0) {
-        first = 0;
-      }
-      return {
-        firstRecordOnPage: first,
-        lastRecordOnPage: last,
-        totalRecords: this.totalRecords,
-        currentPage: this.currentPage,
-        totalPages: this.lastPage,
-      };
+    //* Sort related
+    sortable: {
+      type: Boolean,
     },
-  },
-  methods: {
-    getId() {
-      return `vgt-page-input-${Math.floor(Math.random() * Date.now())}`;
+    multipleColumnSort: {
+      type: Boolean,
+      default: true,
     },
-    changePage(event) {
-      const value = parseInt(event.target.value, 10);
-
-      //! invalid number
-      if (Number.isNaN(value)
-        || value > this.lastPage
-        || value < 1) {
-        event.target.value = this.currentPage;
-        return false;
-      }
 
-      //* valid number
-      event.target.value = value;
-      this.$emit('page-changed', value);
+    getClasses: {
+      type: Function,
     },
-  },
-  mounted() {
-  },
-  components: {
-  },
-};
-
-const _hoisted_1$6 = { class: "footer__navigation__page-info" };
-const _hoisted_2$6 = { key: 0 };
-const _hoisted_3$6 = ["for"];
-const _hoisted_4$6 = ["id", "value"];
-const _hoisted_5$6 = /*#__PURE__*/vue.createElementVNode("span", {
-  id: "change-page-hint",
-  style: {"display":"none"}
-}, " Type a page number and press Enter to change the page. ", -1 /* HOISTED */);
-const _hoisted_6$6 = { key: 2 };
-
-function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
-  return (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$6, [
-    ($props.infoFn)
-      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$6, vue.toDisplayString($props.infoFn($options.infoParams)), 1 /* TEXT */))
-      : ($props.mode === 'pages')
-        ? (vue.openBlock(), vue.createElementBlock("form", {
-            key: 1,
-            onSubmit: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["prevent"]))
-          }, [
-            vue.createElementVNode("label", {
-              for: $data.id,
-              class: "page-info__label"
-            }, [
-              vue.createElementVNode("span", null, vue.toDisplayString($props.pageText), 1 /* TEXT */),
-              vue.createElementVNode("input", {
-                id: $data.id,
-                "aria-describedby": "change-page-hint",
-                "aria-controls": "vgb-table",
-                class: "footer__navigation__page-info__current-entry",
-                type: "text",
-                onKeyup: _cache[0] || (_cache[0] = vue.withKeys(vue.withModifiers((...args) => ($options.changePage && $options.changePage(...args)), ["stop"]), ["enter"])),
-                value: $props.currentPage
-              }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4$6),
-              vue.createElementVNode("span", null, vue.toDisplayString($options.pageInfo), 1 /* TEXT */)
-            ], 8 /* PROPS */, _hoisted_3$6),
-            _hoisted_5$6
-          ], 32 /* HYDRATE_EVENTS */))
-        : (vue.openBlock(), vue.createElementBlock("div", _hoisted_6$6, vue.toDisplayString($options.recordInfo), 1 /* TEXT */))
-  ]))
-}
-var VgtPaginationPageInfo = /*#__PURE__*/_export_sfc(_sfc_main$6, [['render',_sfc_render$6]]);
 
-const _sfc_main$5 = {
-  name: 'VgtPagination',
-  props: {
-    styleClass: { default: 'table table-bordered' },
-    total: { default: null },
-    perPage: {},
-    rtl: { default: false },
-    perPageDropdownEnabled: { default: true },
-    customRowsPerPageDropdown: { default() { return []; } },
-    paginateDropdownAllowAll: { default: true },
-    mode: { default: PAGINATION_MODES.Records },
+    //* search related
+    searchEnabled: {
+      type: Boolean,
+    },
 
-    // text options
-    nextText: { default: 'Next' },
-    prevText: { default: 'Prev' },
-    rowsPerPageText: { default: 'Rows per page:' },
-    ofText: { default: 'of' },
-    pageText: { default: 'page' },
-    allText: { default: 'All' },
-    infoFn: { default: null },
-  },
+    tableRef: {},
 
-  data() {
-    return {
-      id: this.getId(),
-      currentPage: 1,
-      prevPage: 0,
-      currentPerPage: 10,
-      rowsPerPageOptions: [],
-    };
+    paginated: {},
   },
+  emits: [
+    'toggle-select-all',
+    'toggle-expand-rows-all',
+    'sort-change',
+    'filter-changed',
+  ],
   watch: {
-    perPage: {
-      handler(newValue, oldValue) {
-        this.handlePerPage();
-        this.perPageChanged(oldValue);
+    columns: {
+      handler() {
+        this.setColumnStyles();
       },
       immediate: true,
+      deep: true
     },
-
-    customRowsPerPageDropdown: {
+    tableRef: {
       handler() {
-        this.handlePerPage();
+        this.setColumnStyles();
       },
-      deep: true,
+      immediate: true,
     },
-
-    total: {
-      handler(newValue, oldValue) {
-        if(this.rowsPerPageOptions.indexOf(this.currentPerPage) === -1) {
-          this.currentPerPage = newValue;
+    paginated: {
+      handler() {
+        if (this.tableRef) {
+          this.setColumnStyles();
         }
-      }
-    }
+      },
+      deep: true,
+    },
+  },
+  data() {
+    return {
+      checkBoxThStyle: {},
+      lineNumberThStyle: {},
+      columnStyles: [],
+      sorts: [],
+      ro: null
+    };
   },
-
   computed: {
-    // Number of pages
-    pagesCount() {
-      const quotient = Math.floor(this.total / this.currentPerPage);
-      const remainder = this.total % this.currentPerPage;
 
-      return remainder === 0 ? quotient : quotient + 1;
+  },
+  methods: {
+    reset() {
+      this.$refs['filter-row'].reset(true);
     },
-
-    // Can go to next page
-    nextIsPossible() {
-      return this.currentPage < this.pagesCount;
+    toggleExpandRowsAll() {
+      this.$emit('toggle-expand-rows-all');
     },
-
-    // Can go to previous page
-    prevIsPossible() {
-      return this.currentPage > 1;
+    toggleSelectAll() {
+      this.$emit('toggle-select-all');
     },
-  },
-
-  methods: {
-    getId() {
-      return `vgt-select-rpp-${Math.floor(Math.random() * Date.now())}`;
+    isSortableColumn(column) {
+      const { sortable } = column;
+      const isSortable = typeof sortable === 'boolean' ? sortable : this.sortable;
+      return isSortable;
     },
-    // Change current page
-    changePage(pageNumber, emit = true) {
-      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {
-        this.prevPage = this.currentPage;
-        this.currentPage = pageNumber;
-        this.pageChanged(emit);
+    sort(e, column) {
+      //* if column is not sortable, return right here
+      if (!this.isSortableColumn(column)) return;
+
+      if (e.shiftKey && this.multipleColumnSort) {
+        this.sorts = secondarySort(this.sorts, column);
+      } else {
+        this.sorts = primarySort(this.sorts, column);
       }
+      this.$emit('sort-change', this.sorts);
     },
 
-    // Go to next page
-    nextPage() {
-      if (this.nextIsPossible) {
-        this.prevPage = this.currentPage;
-        ++this.currentPage;
-        this.pageChanged();
-      }
+    setInitialSort(sorts) {
+      this.sorts = sorts;
+      this.$emit('sort-change', this.sorts);
     },
 
-    // Go to previous page
-    previousPage() {
-      if (this.prevIsPossible) {
-        this.prevPage = this.currentPage;
-        --this.currentPage;
-        this.pageChanged();
+    getColumnSort(column) {
+      for (let i = 0; i < this.sorts.length; i += 1) {
+        if (this.sorts[i].field === column.field) {
+          return this.sorts[i].type || 'asc';
+        }
       }
+      return null;
     },
 
-    // Indicate page changing
-    pageChanged(emit = true) {
-      const payload = {
-        currentPage: this.currentPage,
-        prevPage: this.prevPage,
-      };
-      if (!emit) payload.noEmit = true;
-      this.$emit('page-changed', payload);
+    getColumnSortLong(column) {
+      return this.getColumnSort(column) === 'asc'
+        ? 'ascending'
+        : 'descending'
     },
 
-    // Indicate per page changing
-    perPageChanged(oldValue) {
-      // go back to first page
-      if (oldValue) {
-        //* only emit if this isn't first initialization
-        this.$emit('per-page-changed', { currentPerPage: this.currentPerPage });
-      }
-      this.changePage(1, false);
+    getHeaderClasses(column, index) {
+      const classes = Object.assign({}, this.getClasses(index, 'th'), {
+        sortable: this.isSortableColumn(column),
+        'sorting sorting-desc': this.getColumnSort(column) === 'desc',
+        'sorting sorting-asc': this.getColumnSort(column) === 'asc',
+      });
+      return classes;
     },
 
-    // Handle per page changing
-    handlePerPage() {
-      //* if there's a custom dropdown then we use that
-      if (this.customRowsPerPageDropdown !== null
-        && (Array.isArray(this.customRowsPerPageDropdown)
-        && this.customRowsPerPageDropdown.length !== 0)) {
-        this.rowsPerPageOptions = JSON.parse(JSON.stringify(this.customRowsPerPageDropdown));
-      } else {
-        //* otherwise we use the default rows per page dropdown
-        this.rowsPerPageOptions = JSON.parse(JSON.stringify(DEFAULT_ROWS_PER_PAGE_DROPDOWN));
+    filterRows(columnFilters) {
+      this.$emit('filter-changed', columnFilters);
+    },
+
+    getWidthStyle(dom) {
+      if (window && window.getComputedStyle && dom) {
+        const cellStyle = window.getComputedStyle(dom, null);
+        return {
+          width: cellStyle.width,
+        };
       }
+      return {
+        width: 'auto',
+      };
+    },
 
-      if (this.perPage) {
-        this.currentPerPage = this.perPage;
-        // if perPage doesn't already exist, we add it
-        let found = false;
-        for (let i = 0; i < this.rowsPerPageOptions.length; i++) {
-          if (this.rowsPerPageOptions[i] === this.perPage) {
-            found = true;
-          }
-        }
-        if (!found && this.perPage !== -1) {
-          this.rowsPerPageOptions.unshift(this.perPage);
+    setColumnStyles() {
+      const colStyles = [];
+      for (let i = 0; i < this.columns.length; i++) {
+        if (this.tableRef) {
+          let skip = 0;
+          if (this.selectable) skip++;
+          if (this.lineNumbers) skip++;
+          const cell = this.tableRef.rows[0].cells[i + skip];
+          colStyles.push(this.getWidthStyle(cell));
+        } else {
+          colStyles.push({
+            minWidth: this.columns[i].width ? this.columns[i].width : 'auto',
+            maxWidth: this.columns[i].width ? this.columns[i].width : 'auto',
+            width: this.columns[i].width ? this.columns[i].width : 'auto',
+          });
         }
-      } else {
-        // reset to default
-        this.currentPerPage = 10;
       }
+      this.columnStyles = colStyles;
     },
-  },
 
-  mounted() {
-  },
+    getColumnStyle(column, index) {
+      const styleObject = {
+        minWidth: column.width ? column.width : 'auto',
+        maxWidth: column.width ? column.width : 'auto',
+        width: column.width ? column.width : 'auto',
+      };
+      //* if fixed header we need to get width from original table
+      if (this.tableRef) {
+        if (this.selectable) index++;
+        if (this.lineNumbers) index++;
 
-  components: {
-    'pagination-page-info': VgtPaginationPageInfo,
+        const cell = this.tableRef.rows[0].cells[index];
+        const cellStyle = window.getComputedStyle(cell, null);
+        styleObject.width = cellStyle.width;
+      }
+      return styleObject;
+    },
   },
-};
-
-const _hoisted_1$5 = { class: "vgt-wrap__footer vgt-clearfix" };
-const _hoisted_2$5 = {
-  key: 0,
-  class: "footer__row-count vgt-pull-left"
-};
-const _hoisted_3$5 = ["for"];
-const _hoisted_4$5 = ["id"];
-const _hoisted_5$5 = ["value"];
-const _hoisted_6$5 = ["value"];
-const _hoisted_7$5 = { class: "footer__navigation vgt-pull-right" };
-
-function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
-  const _component_pagination_page_info = vue.resolveComponent("pagination-page-info");
-
-  return (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$5, [
-    ($props.perPageDropdownEnabled)
-      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$5, [
-          vue.createElementVNode("form", null, [
-            vue.createElementVNode("label", {
-              for: $data.id,
-              class: "footer__row-count__label"
-            }, vue.toDisplayString($props.rowsPerPageText) + ":", 9 /* TEXT, PROPS */, _hoisted_3$5),
-            vue.withDirectives(vue.createElementVNode("select", {
-              id: $data.id,
-              autocomplete: "off",
-              name: "perPageSelect",
-              class: "footer__row-count__select",
-              "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => (($data.currentPerPage) = $event)),
-              onChange: _cache[1] || (_cache[1] = (...args) => ($options.perPageChanged && $options.perPageChanged(...args))),
-              "aria-controls": "vgt-table"
-            }, [
-              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.rowsPerPageOptions, (option, idx) => {
-                return (vue.openBlock(), vue.createElementBlock("option", {
-                  key: idx,
-                  value: option
-                }, vue.toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_5$5))
-              }), 128 /* KEYED_FRAGMENT */)),
-              ($props.paginateDropdownAllowAll)
-                ? (vue.openBlock(), vue.createElementBlock("option", {
-                    key: 0,
-                    value: $props.total
-                  }, vue.toDisplayString($props.allText), 9 /* TEXT, PROPS */, _hoisted_6$5))
-                : vue.createCommentVNode("v-if", true)
-            ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4$5), [
-              [vue.vModelSelect, $data.currentPerPage]
-            ])
-          ])
-        ]))
-      : vue.createCommentVNode("v-if", true),
-    vue.createElementVNode("div", _hoisted_7$5, [
-      vue.createVNode(_component_pagination_page_info, {
-        onPageChanged: $options.changePage,
-        "total-records": $props.total,
-        "last-page": $options.pagesCount,
-        "current-page": $data.currentPage,
-        "current-per-page": $data.currentPerPage,
-        "of-text": $props.ofText,
-        "page-text": $props.pageText,
-        "info-fn": $props.infoFn,
-        mode: $props.mode
-      }, null, 8 /* PROPS */, ["onPageChanged", "total-records", "last-page", "current-page", "current-per-page", "of-text", "page-text", "info-fn", "mode"]),
-      vue.createElementVNode("button", {
-        type: "button",
-        "aria-controls": "vgt-table",
-        class: vue.normalizeClass(["footer__navigation__page-btn", { disabled: !$options.prevIsPossible }]),
-        onClick: _cache[2] || (_cache[2] = vue.withModifiers((...args) => ($options.previousPage && $options.previousPage(...args)), ["prevent","stop"]))
-      }, [
-        vue.createElementVNode("span", {
-          "aria-hidden": "true",
-          class: vue.normalizeClass(["chevron", { 'left': !$props.rtl, 'right': $props.rtl }])
-        }, null, 2 /* CLASS */),
-        vue.createElementVNode("span", null, vue.toDisplayString($props.prevText), 1 /* TEXT */)
-      ], 2 /* CLASS */),
-      vue.createElementVNode("button", {
-        type: "button",
-        "aria-controls": "vgt-table",
-        class: vue.normalizeClass(["footer__navigation__page-btn", { disabled: !$options.nextIsPossible }]),
-        onClick: _cache[3] || (_cache[3] = vue.withModifiers((...args) => ($options.nextPage && $options.nextPage(...args)), ["prevent","stop"]))
-      }, [
-        vue.createElementVNode("span", null, vue.toDisplayString($props.nextText), 1 /* TEXT */),
-        vue.createElementVNode("span", {
-          "aria-hidden": "true",
-          class: vue.normalizeClass(["chevron", { 'right': !$props.rtl, 'left': $props.rtl }])
-        }, null, 2 /* CLASS */)
-      ], 2 /* CLASS */)
-    ])
-  ]))
-}
-var VgtPagination = /*#__PURE__*/_export_sfc(_sfc_main$5, [['render',_sfc_render$5]]);
+  mounted() {
+    this.$nextTick(() => {
+      // We're going to watch the parent element for resize events, and calculate column widths if it changes
+      if ('ResizeObserver' in window) {
+        this.ro = new ResizeObserver(() => {
+            this.setColumnStyles();
+        });
+        this.ro.observe(this.$parent.$el);
 
-const _sfc_main$4 = {
-  name: 'VgtGlobalSearch',
-  props: [
-    'value',
-    'searchEnabled',
-    'globalSearchPlaceholder',
-  ],
-  emits: [
-    'input',
-    'keyup',
-    'enter',
-  ],
-  data() {
-    return {
-      globalSearchTerm: null,
-      id: this.getId(),
-    };
+        // If this is a fixed-header table, we want to observe each column header from the non-fixed header.
+        // You can imagine two columns swapping widths, which wouldn't cause the above to trigger.
+        // This gets the first tr element of the primary table header, and iterates through its children (the th elements)
+        if (this.tableRef) {
+          Array.from(this.$parent.$refs['table-header-primary'].$el.children[0].children).forEach((header) => {
+            this.ro.observe(header);
+          });
+        }
+      }
+    });
   },
-  computed: {
-    showControlBar() {
-      if (this.searchEnabled) return true;
-      if (this.$slots && this.$slots['internal-table-actions']) return true;
-      return false;
-    },
+  beforeUnmount() {
+    if (this.ro) {
+      this.ro.disconnect();
+    }
   },
-  methods: {
-    updateValue(value) {
-      this.$emit('input', value);
-      this.$emit('keyup', value);
-    },
-    entered(value) {
-      this.$emit('enter', value);
-    },
-    getId() {
-      return `vgt-search-${Math.floor(Math.random() * Date.now())}`;
-    },
+  components: {
+    'vgt-filter-row': VgtFilterRow,
   },
 };
 
-const _hoisted_1$4 = {
+const _hoisted_1$3 = {
   key: 0,
-  class: "vgt-global-search vgt-clearfix"
+  scope: "col",
+  class: "line-numbers"
 };
-const _hoisted_2$4 = { class: "vgt-global-search__input vgt-pull-left" };
-const _hoisted_3$4 = ["for"];
-const _hoisted_4$4 = /*#__PURE__*/vue.createElementVNode("span", {
-  "aria-hidden": "true",
-  class: "input__icon"
-}, [
-  /*#__PURE__*/vue.createElementVNode("div", { class: "magnifying-glass" })
-], -1 /* HOISTED */);
-const _hoisted_5$4 = /*#__PURE__*/vue.createElementVNode("span", { class: "sr-only" }, "Search", -1 /* HOISTED */);
-const _hoisted_6$4 = [
-  _hoisted_4$4,
-  _hoisted_5$4
-];
-const _hoisted_7$4 = ["id", "placeholder", "value"];
-const _hoisted_8$3 = { class: "vgt-global-search__actions vgt-pull-right" };
+const _hoisted_2$3 = {
+  key: 1,
+  scope: "col",
+  class: "vgt-checkbox-col"
+};
+const _hoisted_3$3 = ["checked", ".indeterminate"];
+const _hoisted_4$3 = {
+  key: 2,
+  scope: "col",
+  class: "vgt-checkbox-col"
+};
+const _hoisted_5$3 = ["title", "aria-sort", "aria-controls"];
+const _hoisted_6$3 = ["onClick"];
+const _hoisted_7$2 = { class: "sr-only" };
 
-function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
-  return ($options.showControlBar)
-    ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$4, [
-        vue.createElementVNode("div", _hoisted_2$4, [
-          ($props.searchEnabled)
-            ? (vue.openBlock(), vue.createElementBlock("form", {
-                key: 0,
-                onSubmit: _cache[2] || (_cache[2] = vue.withModifiers(() => {}, ["prevent"])),
-                role: "search"
-              }, [
-                vue.createElementVNode("label", { for: $data.id }, _hoisted_6$4, 8 /* PROPS */, _hoisted_3$4),
-                vue.createElementVNode("input", {
-                  id: $data.id,
-                  type: "text",
-                  class: "vgt-input vgt-pull-left",
-                  placeholder: $props.globalSearchPlaceholder,
-                  value: $props.value,
-                  onInput: _cache[0] || (_cache[0] = $event => ($options.updateValue($event.target.value))),
-                  onKeyup: _cache[1] || (_cache[1] = vue.withKeys($event => ($options.entered($event.target.value)), ["enter"]))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$4)
-              ], 32 /* HYDRATE_EVENTS */))
+function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
+  const _component_vgt_filter_row = vue.resolveComponent("vgt-filter-row");
+
+  return (vue.openBlock(), vue.createElementBlock("thead", null, [
+    vue.createElementVNode("tr", null, [
+      ($props.lineNumbers)
+        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_1$3))
+        : vue.createCommentVNode("v-if", true),
+      ($props.selectable)
+        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_2$3, [
+            vue.createElementVNode("input", {
+              type: "checkbox",
+              checked: $props.allSelected,
+              ".indeterminate": $props.allSelectedIndeterminate,
+              onChange: _cache[0] || (_cache[0] = (...args) => ($options.toggleSelectAll && $options.toggleSelectAll(...args)))
+            }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_3$3)
+          ]))
+        : vue.createCommentVNode("v-if", true),
+      ($props.expandRowsEnabled)
+        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_4$3, [
+            vue.createElementVNode("a", {
+              href: "",
+              onClick: _cache[1] || (_cache[1] = vue.withModifiers((...args) => ($options.toggleExpandRowsAll && $options.toggleExpandRowsAll(...args)), ["prevent"])),
+              class: "vgt-wrap__expander"
+            }, " (+) ")
+          ]))
+        : vue.createCommentVNode("v-if", true),
+      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, index) => {
+        return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
+          (!column.hidden)
+            ? (vue.openBlock(), vue.createElementBlock("th", {
+                key: 0,
+                scope: "col",
+                title: column.tooltip,
+                class: vue.normalizeClass($options.getHeaderClasses(column, index)),
+                style: vue.normalizeStyle($data.columnStyles[index]),
+                "aria-sort": $options.getColumnSortLong(column),
+                "aria-controls": `col-${index}`
+              }, [
+                vue.renderSlot(_ctx.$slots, "table-column", { column: column }, () => [
+                  vue.createTextVNode(vue.toDisplayString(column.label), 1 /* TEXT */)
+                ]),
+                ($options.isSortableColumn(column))
+                  ? (vue.openBlock(), vue.createElementBlock("button", {
+                      key: 0,
+                      onClick: $event => ($options.sort($event, column))
+                    }, [
+                      vue.createElementVNode("span", _hoisted_7$2, " Sort table by " + vue.toDisplayString(column.label) + " in " + vue.toDisplayString($options.getColumnSortLong(column)) + " order ", 1 /* TEXT */)
+                    ], 8 /* PROPS */, _hoisted_6$3))
+                  : vue.createCommentVNode("v-if", true)
+              ], 14 /* CLASS, STYLE, PROPS */, _hoisted_5$3))
             : vue.createCommentVNode("v-if", true)
-        ]),
-        vue.createElementVNode("div", _hoisted_8$3, [
-          vue.renderSlot(_ctx.$slots, "internal-table-actions")
-        ])
-      ]))
-    : vue.createCommentVNode("v-if", true)
+        ], 64 /* STABLE_FRAGMENT */))
+      }), 128 /* KEYED_FRAGMENT */))
+    ]),
+    vue.createVNode(_component_vgt_filter_row, {
+      ref: "filter-row",
+      onFilterChanged: $options.filterRows,
+      "global-search-enabled": $props.searchEnabled,
+      "line-numbers": $props.lineNumbers,
+      "expand-rows-enabled": $props.expandRowsEnabled,
+      selectable: $props.selectable,
+      columns: $props.columns,
+      mode: $props.mode,
+      "typed-columns": $props.typedColumns
+    }, {
+      "column-filter": vue.withCtx((slotProps) => [
+        vue.renderSlot(_ctx.$slots, "column-filter", {
+          column: slotProps.column,
+          updateFilters: slotProps.updateFilters
+        })
+      ]),
+      _: 3 /* FORWARDED */
+    }, 8 /* PROPS */, ["onFilterChanged", "global-search-enabled", "line-numbers", "expand-rows-enabled", "selectable", "columns", "mode", "typed-columns"])
+  ]))
 }
-var VgtGlobalSearch = /*#__PURE__*/_export_sfc(_sfc_main$4, [['render',_sfc_render$4]]);
+var VgtTableHeader = /*#__PURE__*/_export_sfc(_sfc_main$3, [['render',_sfc_render$3]]);
 
-const _sfc_main$3 = {
-  name: 'VgtFilterRow',
-  props: [
-    'lineNumbers',
-    'columns',
-    'expandRowsEnabled',
-    'typedColumns',
-    'globalSearchEnabled',
-    'selectable',
-    'mode',
-  ],
-  emits: ['filter-changed'],
-  watch: {
-    columns: {
-      handler(newValue, oldValue) {
-        this.populateInitialFilters();
-      },
-      deep: true,
-      immediate: true,
+const _sfc_main$2 = {
+  name: 'VgtPaginationPageInfo',
+  props: {
+    currentPage: {
+      default: 1,
+    },
+    lastPage: {
+      default: 1,
+    },
+    totalRecords: {
+      default: 0,
+    },
+    ofText: {
+      default: 'of',
+      type: String,
+    },
+    pageText: {
+      default: 'page',
+      type: String,
     },
+    currentPerPage: {},
+    mode: {
+      default: PAGINATION_MODES.Records,
+    },
+    infoFn: { default: null },
   },
   data() {
     return {
-      columnFilters: {},
-      timer: null,
+      id: this.getId(),
     };
   },
   computed: {
-
-    // to create a filter row, we need to
-    // make sure that there is atleast 1 column
-    // that requires filtering
-    hasFilterRow() {
-      // if (this.mode === 'remote' || !this.globalSearchEnabled) {
-      for (let i = 0; i < this.columns.length; i++) {
-        const col = this.columns[i];
-        if (col.filterOptions && col.filterOptions.enabled) {
-          return true;
-        }
-      }
-      // }
-      return false;
+    pageInfo() {
+      return `${this.ofText} ${this.lastPage}`;
     },
-  },
-  methods: {
-
-    fieldKey(field) {
-      if (typeof(field) === 'function' && field.name) {
-        return field.name;
-      }
-      return field;
+    firstRecordOnPage() {
+      return ((this.currentPage - 1) * this.currentPerPage) + 1;
     },
-
-    reset(emitEvent = false) {
-      this.columnFilters = {};
-
-      if (emitEvent) {
-        this.$emit('filter-changed', this.columnFilters);
-      }
+    lastRecordOnPage() {
+      return Math.min(this.totalRecords, this.currentPage * this.currentPerPage);
     },
+    recordInfo() {
+      let first = this.firstRecordOnPage;
+      const last = this.lastRecordOnPage;
 
-    isFilterable(column) {
-      return column.filterOptions
-        && column.filterOptions.enabled;
-    },
+      if (last === 0) {
+        first = 0;
+      }
 
-    isDropdown(column) {
-      return this.isFilterable(column)
-        && column.filterOptions.filterDropdownItems
-        && column.filterOptions.filterDropdownItems.length;
+      return `${first} - ${last} ${this.ofText} ${this.totalRecords}`;
     },
-
-    isDropdownObjects(column) {
-      return this.isDropdown(column)
-        && typeof column.filterOptions.filterDropdownItems[0] === 'object';
+    infoParams() {
+      let first = this.firstRecordOnPage;
+      const last = this.lastRecordOnPage;
+      if (last === 0) {
+        first = 0;
+      }
+      return {
+        firstRecordOnPage: first,
+        lastRecordOnPage: last,
+        totalRecords: this.totalRecords,
+        currentPage: this.currentPage,
+        totalPages: this.lastPage,
+      };
     },
-
-    isDropdownArray(column) {
-      return this.isDropdown(column)
-        && typeof column.filterOptions.filterDropdownItems[0] !== 'object';
+  },
+  methods: {
+    getId() {
+      return `vgt-page-input-${Math.floor(Math.random() * Date.now())}`;
     },
+    changePage(event) {
+      const value = parseInt(event.target.value, 10);
 
-    getClasses(column) {
-      const firstClass = 'filter-th';
-      return (column.filterOptions && column.filterOptions.styleClass) ? [firstClass, ...column.filterOptions.styleClass.split(' ')].join(' ') : firstClass;
-    },
+      //! invalid number
+      if (Number.isNaN(value)
+        || value > this.lastPage
+        || value < 1) {
+        event.target.value = this.currentPage;
+        return false;
+      }
 
-    // get column's defined placeholder or default one
-    getPlaceholder(column) {
-      const placeholder = (this.isFilterable(column) && column.filterOptions.placeholder) || `Filter ${column.label}`;
-      return placeholder;
+      //* valid number
+      event.target.value = value;
+      this.$emit('page-changed', value);
     },
+  },
+  mounted() {
+  },
+  components: {
+  },
+};
 
-    getName(column) {
-      return `vgt-${this.fieldKey(column.field)}`;
-    },
+const _hoisted_1$2 = { class: "footer__navigation__page-info" };
+const _hoisted_2$2 = { key: 0 };
+const _hoisted_3$2 = ["for"];
+const _hoisted_4$2 = ["id", "value"];
+const _hoisted_5$2 = /*#__PURE__*/vue.createElementVNode("span", {
+  id: "change-page-hint",
+  style: {"display":"none"}
+}, " Type a page number and press Enter to change the page. ", -1 /* HOISTED */);
+const _hoisted_6$2 = { key: 2 };
 
-    updateFiltersOnEnter(column, value) {
-      if (this.timer) clearTimeout(this.timer);
-      this.updateFiltersImmediately(column.field, value);
-    },
+function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
+  return (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$2, [
+    ($props.infoFn)
+      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$2, vue.toDisplayString($props.infoFn($options.infoParams)), 1 /* TEXT */))
+      : ($props.mode === 'pages')
+        ? (vue.openBlock(), vue.createElementBlock("form", {
+            key: 1,
+            onSubmit: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["prevent"]))
+          }, [
+            vue.createElementVNode("label", {
+              for: $data.id,
+              class: "page-info__label"
+            }, [
+              vue.createElementVNode("span", null, vue.toDisplayString($props.pageText), 1 /* TEXT */),
+              vue.createElementVNode("input", {
+                id: $data.id,
+                "aria-describedby": "change-page-hint",
+                "aria-controls": "vgb-table",
+                class: "footer__navigation__page-info__current-entry",
+                type: "text",
+                onKeyup: _cache[0] || (_cache[0] = vue.withKeys(vue.withModifiers((...args) => ($options.changePage && $options.changePage(...args)), ["stop"]), ["enter"])),
+                value: $props.currentPage
+              }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_4$2),
+              vue.createElementVNode("span", null, vue.toDisplayString($options.pageInfo), 1 /* TEXT */)
+            ], 8 /* PROPS */, _hoisted_3$2),
+            _hoisted_5$2
+          ], 32 /* NEED_HYDRATION */))
+        : (vue.openBlock(), vue.createElementBlock("div", _hoisted_6$2, vue.toDisplayString($options.recordInfo), 1 /* TEXT */))
+  ]))
+}
+var VgtPaginationPageInfo = /*#__PURE__*/_export_sfc(_sfc_main$2, [['render',_sfc_render$2]]);
 
-    updateFiltersOnKeyup(column, value) {
-      // if the trigger is enter, we don't filter on keyup
-      if (column.filterOptions.trigger === 'enter') return;
-      this.updateFilters(column, value);
-    },
+const _sfc_main$1 = {
+  name: 'VgtPagination',
+  props: {
+    styleClass: { default: 'table table-bordered' },
+    total: { default: null },
+    perPage: {},
+    rtl: { default: false },
+    perPageDropdownEnabled: { default: true },
+    customRowsPerPageDropdown: { default() { return []; } },
+    paginateDropdownAllowAll: { default: true },
+    mode: { default: PAGINATION_MODES.Records },
 
-    updateSlotFilter(column, value) {
-      let fieldToFilter = column.filterOptions.slotFilterField || column.field;
-      if (typeof column.filterOptions.formatValue === 'function') {
-        value = column.filterOptions.formatValue(value);
-      }
-      this.updateFiltersImmediately(fieldToFilter, value);
-    },
+    // text options
+    nextText: { default: 'Next' },
+    prevText: { default: 'Prev' },
+    rowsPerPageText: { default: 'Rows per page:' },
+    ofText: { default: 'of' },
+    pageText: { default: 'page' },
+    allText: { default: 'All' },
+    infoFn: { default: null },
+  },
 
-    // since vue doesn't detect property addition and deletion, we
-    // need to create helper function to set property etc
-    updateFilters(column, value) {
-      if (this.timer) clearTimeout(this.timer);
-      this.timer = setTimeout(() => {
-        this.updateFiltersImmediately(column.field, value);
-      }, 400);
+  data() {
+    return {
+      id: this.getId(),
+      currentPage: 1,
+      prevPage: 0,
+      currentPerPage: 10,
+      rowsPerPageOptions: [],
+    };
+  },
+  watch: {
+    perPage: {
+      handler(newValue, oldValue) {
+        this.handlePerPage();
+        this.perPageChanged(oldValue);
+      },
+      immediate: true,
     },
 
-    updateFiltersImmediately(field, value) {
-      this.columnFilters[this.fieldKey(field)] = value;
-      this.$emit('filter-changed', this.columnFilters);
+    customRowsPerPageDropdown: {
+      handler() {
+        this.handlePerPage();
+      },
+      deep: true,
     },
 
-    populateInitialFilters() {
-      for (let i = 0; i < this.columns.length; i++) {
-        const col = this.columns[i];
-        // lets see if there are initial
-        // filters supplied by user
-        if (this.isFilterable(col)
-          && typeof col.filterOptions.filterValue !== 'undefined'
-          && col.filterOptions.filterValue !== null) {
-          this.columnFilters[this.fieldKey(col.field)] = col.filterOptions.filterValue;
-          // this.updateFilters(col, col.filterOptions.filterValue);
-          // this.$set(col.filterOptions, 'filterValue', undefined);
+    total: {
+      handler(newValue, oldValue) {
+        if(this.rowsPerPageOptions.indexOf(this.currentPerPage) === -1) {
+          this.currentPerPage = newValue;
         }
       }
-      //* lets emit event once all filters are set
-      this.$emit('filter-changed', this.columnFilters);
-    },
+    }
   },
-};
 
-const _hoisted_1$3 = { key: 0 };
-const _hoisted_2$3 = { key: 0 };
-const _hoisted_3$3 = { key: 1 };
-const _hoisted_4$3 = { key: 2 };
-const _hoisted_5$3 = { key: 0 };
-const _hoisted_6$3 = ["name", "placeholder", "value", "onKeyup", "onInput"];
-const _hoisted_7$3 = ["name", "value", "onChange"];
-const _hoisted_8$2 = {
-  value: "",
-  key: "-1"
-};
-const _hoisted_9$2 = ["value"];
-const _hoisted_10$2 = ["name", "value", "onChange"];
-const _hoisted_11$1 = {
-  value: "",
-  key: "-1"
-};
-const _hoisted_12$1 = ["value"];
+  computed: {
+    // Number of pages
+    pagesCount() {
+      const quotient = Math.floor(this.total / this.currentPerPage);
+      const remainder = this.total % this.currentPerPage;
 
-function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
-  return ($options.hasFilterRow)
-    ? (vue.openBlock(), vue.createElementBlock("tr", _hoisted_1$3, [
-        ($props.expandRowsEnabled)
-          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_2$3))
-          : vue.createCommentVNode("v-if", true),
-        ($props.lineNumbers)
-          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_3$3))
-          : vue.createCommentVNode("v-if", true),
-        ($props.selectable)
-          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_4$3))
-          : vue.createCommentVNode("v-if", true),
-        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, index) => {
-          return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
-            (!column.hidden)
-              ? (vue.openBlock(), vue.createElementBlock("th", {
-                  key: 0,
-                  class: vue.normalizeClass($options.getClasses(column))
-                }, [
-                  vue.renderSlot(_ctx.$slots, "column-filter", {
-                    column: column,
-                    updateFilters: $options.updateSlotFilter
-                  }, () => [
-                    ($options.isFilterable(column))
-                      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_5$3, [
-                          (!$options.isDropdown(column))
-                            ? (vue.openBlock(), vue.createElementBlock("input", {
-                                key: 0,
-                                name: $options.getName(column),
-                                type: "text",
-                                class: "vgt-input",
-                                placeholder: $options.getPlaceholder(column),
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onKeyup: vue.withKeys($event => ($options.updateFiltersOnEnter(column, $event.target.value)), ["enter"]),
-                                onInput: $event => ($options.updateFiltersOnKeyup(column, $event.target.value))
-                              }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_6$3))
-                            : vue.createCommentVNode("v-if", true),
-                          vue.createCommentVNode(" options are a list of primitives "),
-                          ($options.isDropdownArray(column))
-                            ? (vue.openBlock(), vue.createElementBlock("select", {
-                                key: 1,
-                                name: $options.getName(column),
-                                class: "vgt-select",
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
-                              }, [
-                                vue.createElementVNode("option", _hoisted_8$2, vue.toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
-                                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(column.filterOptions.filterDropdownItems, (option, i) => {
-                                  return (vue.openBlock(), vue.createElementBlock("option", {
-                                    key: i,
-                                    value: option
-                                  }, vue.toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_9$2))
-                                }), 128 /* KEYED_FRAGMENT */))
-                              ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$3))
-                            : vue.createCommentVNode("v-if", true),
-                          vue.createCommentVNode(" options are a list of objects with text and value "),
-                          ($options.isDropdownObjects(column))
-                            ? (vue.openBlock(), vue.createElementBlock("select", {
-                                key: 2,
-                                name: $options.getName(column),
-                                class: "vgt-select",
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
-                              }, [
-                                vue.createElementVNode("option", _hoisted_11$1, vue.toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
-                                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(column.filterOptions.filterDropdownItems, (option, i) => {
-                                  return (vue.openBlock(), vue.createElementBlock("option", {
-                                    key: i,
-                                    value: option.value
-                                  }, vue.toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_12$1))
-                                }), 128 /* KEYED_FRAGMENT */))
-                              ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_10$2))
-                            : vue.createCommentVNode("v-if", true)
-                        ]))
-                      : vue.createCommentVNode("v-if", true)
-                  ])
-                ], 2 /* CLASS */))
-              : vue.createCommentVNode("v-if", true)
-          ], 64 /* STABLE_FRAGMENT */))
-        }), 128 /* KEYED_FRAGMENT */))
-      ]))
-    : vue.createCommentVNode("v-if", true)
-}
-var VgtFilterRow = /*#__PURE__*/_export_sfc(_sfc_main$3, [['render',_sfc_render$3]]);
+      return remainder === 0 ? quotient : quotient + 1;
+    },
 
-function getColumnFirstSortType(column) {
-  return column.firstSortType || DEFAULT_SORT_TYPE;
-}
+    // Can go to next page
+    nextIsPossible() {
+      return this.currentPage < this.pagesCount;
+    },
 
-function getCurrentPrimarySort(sortArray, column) {
-  return ( sortArray.length === 1 && sortArray[0].field === column.field )
-  ? sortArray[0].type
-  : undefined;
-}
+    // Can go to previous page
+    prevIsPossible() {
+      return this.currentPage > 1;
+    },
+  },
 
-function getNextSort(currentSort, column) {
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.Ascending) {
-    return SORT_TYPES.None
-  } else if (currentSort === SORT_TYPES.Ascending) {
-    return SORT_TYPES.Descending;
-  }
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.Descending) {
-    return SORT_TYPES.Ascending;
-  } else if (currentSort === SORT_TYPES.Descending) {
-    return SORT_TYPES.None;
-  }
+  methods: {
+    getId() {
+      return `vgt-select-rpp-${Math.floor(Math.random() * Date.now())}`;
+    },
+    // Change current page
+    changePage(pageNumber, emit = true) {
+      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {
+        this.prevPage = this.currentPage;
+        this.currentPage = pageNumber;
+        this.pageChanged(emit);
+      }
+    },
 
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.None) {
-    return SORT_TYPES.Descending;
-  } else {
-    return SORT_TYPES.Ascending;
-  }
+    // Go to next page
+    nextPage() {
+      if (this.nextIsPossible) {
+        this.prevPage = this.currentPage;
+        ++this.currentPage;
+        this.pageChanged();
+      }
+    },
 
-}
+    // Go to previous page
+    previousPage() {
+      if (this.prevIsPossible) {
+        this.prevPage = this.currentPage;
+        --this.currentPage;
+        this.pageChanged();
+      }
+    },
 
-function getIndex(sortArray, column) {
-  for (let i = 0; i < sortArray.length; i++) {
-    if (column.field === sortArray[i].field) return i;
-  }
-  return -1;
-}
+    // Indicate page changing
+    pageChanged(emit = true) {
+      const payload = {
+        currentPage: this.currentPage,
+        prevPage: this.prevPage,
+      };
+      if (!emit) payload.noEmit = true;
+      this.$emit('page-changed', payload);
+    },
 
-const primarySort = (sortArray, column) => {
-  const currentPrimarySort = getCurrentPrimarySort(sortArray, column);
-  const nextPrimarySort = getNextSort(currentPrimarySort, column);
-  return [{
-    field: column.field,
-    type: currentPrimarySort ? nextPrimarySort : getColumnFirstSortType(column),
-  }];
-};
-
-const secondarySort = (sortArray, column) => {
-  const index = getIndex(sortArray, column);
-  if (index === -1) {
-    sortArray.push({
-      field: column.field,
-      type: getColumnFirstSortType(column),
-    });
-  } else {
-    sortArray[index].type = getNextSort(sortArray[index].type, column);
-  }
-  return sortArray;
-};
-
-const _sfc_main$2 = {
-  name: 'VgtTableHeader',
-  props: {
-    lineNumbers: {
-      default: false,
-      type: Boolean,
-    },
-    selectable: {
-      default: false,
-      type: Boolean,
-    },
-    allSelected: {
-      default: false,
-      type: Boolean,
-    },
-    allSelectedIndeterminate: {
-      default: false,
-      type: Boolean,
-    },
-    columns: {
-      type: Array,
-    },
-    expandRowsEnabled: {
-      default: false,
-      type: Boolean,
-    },
-    mode: {
-      type: String,
-    },
-    typedColumns: {},
-
-    //* Sort related
-    sortable: {
-      type: Boolean,
-    },
-    multipleColumnSort: {
-      type: Boolean,
-      default: true,
-    },
-
-    getClasses: {
-      type: Function,
-    },
-
-    //* search related
-    searchEnabled: {
-      type: Boolean,
-    },
-
-    tableRef: {},
-
-    paginated: {},
-  },
-  emits: [
-    'toggle-select-all',
-    'toggle-expand-rows-all',
-    'sort-change',
-    'filter-changed',
-  ],
-  watch: {
-    columns: {
-      handler() {
-        this.setColumnStyles();
-      },
-      immediate: true,
-      deep: true
-    },
-    tableRef: {
-      handler() {
-        this.setColumnStyles();
-      },
-      immediate: true,
-    },
-    paginated: {
-      handler() {
-        if (this.tableRef) {
-          this.setColumnStyles();
-        }
-      },
-      deep: true,
-    },
-  },
-  data() {
-    return {
-      checkBoxThStyle: {},
-      lineNumberThStyle: {},
-      columnStyles: [],
-      sorts: [],
-      ro: null
-    };
-  },
-  computed: {
-
-  },
-  methods: {
-    reset() {
-      this.$refs['filter-row'].reset(true);
-    },
-    toggleExpandRowsAll() {
-      this.$emit('toggle-expand-rows-all');
-    },
-    toggleSelectAll() {
-      this.$emit('toggle-select-all');
-    },
-    isSortableColumn(column) {
-      const { sortable } = column;
-      const isSortable = typeof sortable === 'boolean' ? sortable : this.sortable;
-      return isSortable;
+    // Indicate per page changing
+    perPageChanged(oldValue) {
+      // go back to first page
+      if (oldValue) {
+        //* only emit if this isn't first initialization
+        this.$emit('per-page-changed', { currentPerPage: this.currentPerPage });
+      }
+      this.changePage(1, false);
     },
-    sort(e, column) {
-      //* if column is not sortable, return right here
-      if (!this.isSortableColumn(column)) return;
 
-      if (e.shiftKey && this.multipleColumnSort) {
-        this.sorts = secondarySort(this.sorts, column);
+    // Handle per page changing
+    handlePerPage() {
+      //* if there's a custom dropdown then we use that
+      if (this.customRowsPerPageDropdown !== null
+        && (Array.isArray(this.customRowsPerPageDropdown)
+        && this.customRowsPerPageDropdown.length !== 0)) {
+        this.rowsPerPageOptions = JSON.parse(JSON.stringify(this.customRowsPerPageDropdown));
       } else {
-        this.sorts = primarySort(this.sorts, column);
+        //* otherwise we use the default rows per page dropdown
+        this.rowsPerPageOptions = JSON.parse(JSON.stringify(DEFAULT_ROWS_PER_PAGE_DROPDOWN));
       }
-      this.$emit('sort-change', this.sorts);
-    },
-
-    setInitialSort(sorts) {
-      this.sorts = sorts;
-      this.$emit('sort-change', this.sorts);
-    },
 
-    getColumnSort(column) {
-      for (let i = 0; i < this.sorts.length; i += 1) {
-        if (this.sorts[i].field === column.field) {
-          return this.sorts[i].type || 'asc';
+      if (this.perPage) {
+        this.currentPerPage = this.perPage;
+        // if perPage doesn't already exist, we add it
+        let found = false;
+        for (let i = 0; i < this.rowsPerPageOptions.length; i++) {
+          if (this.rowsPerPageOptions[i] === this.perPage) {
+            found = true;
+          }
         }
-      }
-      return null;
-    },
-
-    getColumnSortLong(column) {
-      return this.getColumnSort(column) === 'asc'
-        ? 'ascending'
-        : 'descending'
-    },
-
-    getHeaderClasses(column, index) {
-      const classes = Object.assign({}, this.getClasses(index, 'th'), {
-        sortable: this.isSortableColumn(column),
-        'sorting sorting-desc': this.getColumnSort(column) === 'desc',
-        'sorting sorting-asc': this.getColumnSort(column) === 'asc',
-      });
-      return classes;
-    },
-
-    filterRows(columnFilters) {
-      this.$emit('filter-changed', columnFilters);
-    },
-
-    getWidthStyle(dom) {
-      if (window && window.getComputedStyle && dom) {
-        const cellStyle = window.getComputedStyle(dom, null);
-        return {
-          width: cellStyle.width,
-        };
-      }
-      return {
-        width: 'auto',
-      };
-    },
-
-    setColumnStyles() {
-      const colStyles = [];
-      for (let i = 0; i < this.columns.length; i++) {
-        if (this.tableRef) {
-          let skip = 0;
-          if (this.selectable) skip++;
-          if (this.lineNumbers) skip++;
-          const cell = this.tableRef.rows[0].cells[i + skip];
-          colStyles.push(this.getWidthStyle(cell));
-        } else {
-          colStyles.push({
-            minWidth: this.columns[i].width ? this.columns[i].width : 'auto',
-            maxWidth: this.columns[i].width ? this.columns[i].width : 'auto',
-            width: this.columns[i].width ? this.columns[i].width : 'auto',
-          });
+        if (!found && this.perPage !== -1) {
+          this.rowsPerPageOptions.unshift(this.perPage);
         }
+      } else {
+        // reset to default
+        this.currentPerPage = 10;
       }
-      this.columnStyles = colStyles;
     },
+  },
 
-    getColumnStyle(column, index) {
-      const styleObject = {
-        minWidth: column.width ? column.width : 'auto',
-        maxWidth: column.width ? column.width : 'auto',
-        width: column.width ? column.width : 'auto',
-      };
-      //* if fixed header we need to get width from original table
-      if (this.tableRef) {
-        if (this.selectable) index++;
-        if (this.lineNumbers) index++;
+  mounted() {
+  },
 
-        const cell = this.tableRef.rows[0].cells[index];
-        const cellStyle = window.getComputedStyle(cell, null);
-        styleObject.width = cellStyle.width;
-      }
-      return styleObject;
-    },
+  components: {
+    'pagination-page-info': VgtPaginationPageInfo,
   },
-  mounted() {
-    this.$nextTick(() => {
-      // We're going to watch the parent element for resize events, and calculate column widths if it changes
-      if ('ResizeObserver' in window) {
-        this.ro = new ResizeObserver(() => {
-            this.setColumnStyles();
-        });
-        this.ro.observe(this.$parent.$el);
+};
 
-        // If this is a fixed-header table, we want to observe each column header from the non-fixed header.
-        // You can imagine two columns swapping widths, which wouldn't cause the above to trigger.
-        // This gets the first tr element of the primary table header, and iterates through its children (the th elements)
-        if (this.tableRef) {
-          Array.from(this.$parent.$refs['table-header-primary'].$el.children[0].children).forEach((header) => {
-            this.ro.observe(header);
-          });
-        }
-      }
-    });
-  },
-  beforeUnmount() {
-    if (this.ro) {
-      this.ro.disconnect();
-    }
-  },
-  components: {
-    'vgt-filter-row': VgtFilterRow,
-  },
-};
-
-const _hoisted_1$2 = {
+const _hoisted_1$1 = { class: "vgt-wrap__footer vgt-clearfix" };
+const _hoisted_2$1 = {
   key: 0,
-  scope: "col",
-  class: "line-numbers"
-};
-const _hoisted_2$2 = {
-  key: 1,
-  scope: "col",
-  class: "vgt-checkbox-col"
-};
-const _hoisted_3$2 = ["checked", ".indeterminate"];
-const _hoisted_4$2 = {
-  key: 2,
-  scope: "col",
-  class: "vgt-checkbox-col"
-};
-const _hoisted_5$2 = ["title", "aria-sort", "aria-controls"];
-const _hoisted_6$2 = ["onClick"];
-const _hoisted_7$2 = { class: "sr-only" };
-
-function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
-  const _component_vgt_filter_row = vue.resolveComponent("vgt-filter-row");
-
-  return (vue.openBlock(), vue.createElementBlock("thead", null, [
-    vue.createElementVNode("tr", null, [
-      ($props.lineNumbers)
-        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_1$2))
-        : vue.createCommentVNode("v-if", true),
-      ($props.selectable)
-        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_2$2, [
-            vue.createElementVNode("input", {
-              type: "checkbox",
-              checked: $props.allSelected,
-              ".indeterminate": $props.allSelectedIndeterminate,
-              onChange: _cache[0] || (_cache[0] = (...args) => ($options.toggleSelectAll && $options.toggleSelectAll(...args)))
-            }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3$2)
-          ]))
-        : vue.createCommentVNode("v-if", true),
-      ($props.expandRowsEnabled)
-        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_4$2, [
-            vue.createElementVNode("a", {
-              href: "",
-              onClick: _cache[1] || (_cache[1] = vue.withModifiers((...args) => ($options.toggleExpandRowsAll && $options.toggleExpandRowsAll(...args)), ["prevent"])),
-              class: "vgt-wrap__expander"
-            }, " (+) ")
-          ]))
-        : vue.createCommentVNode("v-if", true),
-      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, index) => {
-        return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
-          (!column.hidden)
-            ? (vue.openBlock(), vue.createElementBlock("th", {
-                key: 0,
-                scope: "col",
-                title: column.tooltip,
-                class: vue.normalizeClass($options.getHeaderClasses(column, index)),
-                style: vue.normalizeStyle($data.columnStyles[index]),
-                "aria-sort": $options.getColumnSortLong(column),
-                "aria-controls": `col-${index}`
-              }, [
-                vue.renderSlot(_ctx.$slots, "table-column", { column: column }, () => [
-                  vue.createTextVNode(vue.toDisplayString(column.label), 1 /* TEXT */)
-                ]),
-                ($options.isSortableColumn(column))
-                  ? (vue.openBlock(), vue.createElementBlock("button", {
-                      key: 0,
-                      onClick: $event => ($options.sort($event, column))
-                    }, [
-                      vue.createElementVNode("span", _hoisted_7$2, " Sort table by " + vue.toDisplayString(column.label) + " in " + vue.toDisplayString($options.getColumnSortLong(column)) + " order ", 1 /* TEXT */)
-                    ], 8 /* PROPS */, _hoisted_6$2))
-                  : vue.createCommentVNode("v-if", true)
-              ], 14 /* CLASS, STYLE, PROPS */, _hoisted_5$2))
-            : vue.createCommentVNode("v-if", true)
-        ], 64 /* STABLE_FRAGMENT */))
-      }), 128 /* KEYED_FRAGMENT */))
-    ]),
-    vue.createVNode(_component_vgt_filter_row, {
-      ref: "filter-row",
-      onFilterChanged: $options.filterRows,
-      "global-search-enabled": $props.searchEnabled,
-      "line-numbers": $props.lineNumbers,
-      "expand-rows-enabled": $props.expandRowsEnabled,
-      selectable: $props.selectable,
-      columns: $props.columns,
-      mode: $props.mode,
-      "typed-columns": $props.typedColumns
-    }, {
-      "column-filter": vue.withCtx((slotProps) => [
-        vue.renderSlot(_ctx.$slots, "column-filter", {
-          column: slotProps.column,
-          updateFilters: slotProps.updateFilters
-        })
-      ]),
-      _: 3 /* FORWARDED */
-    }, 8 /* PROPS */, ["onFilterChanged", "global-search-enabled", "line-numbers", "expand-rows-enabled", "selectable", "columns", "mode", "typed-columns"])
-  ]))
-}
-var VgtTableHeader = /*#__PURE__*/_export_sfc(_sfc_main$2, [['render',_sfc_render$2]]);
-
-const _sfc_main$1 = {
-  name: 'VgtHeaderRow',
-  props: {
-    headerRow: {
-      type: Object,
-    },
-    columns: {
-      type: Array,
-    },
-    lineNumbers: {
-      type: Boolean,
-    },
-    selectable: {
-      type: Boolean,
-    },
-    selectAllByGroup: {
-      type: Boolean
-    },
-    collapsable: {
-      type: [Boolean, Number],
-      default: false,
-    },
-    collectFormatted: {
-      type: Function,
-    },
-    formattedRow: {
-      type: Function,
-    },
-    getClasses: {
-      type: Function,
-    },
-    fullColspan: {
-      type: Number,
-    },
-    groupIndex: {
-      type: Number
-    },
-  },
-  emits: [
-    'vgtExpand',
-    'select-group-change',
-  ],
-  data() {
-    return {
-    };
-  },
-  computed: {
-    allSelected() {
-      const { headerRow } = this;
-      return headerRow.children.filter((row) => row.vgtSelected).length === headerRow.children.length;
-    }
-  },
-  methods: {
-    columnCollapsable(currentIndex) {
-      if (this.collapsable === true) {
-        return currentIndex === 0;
-      }
-      return currentIndex === this.collapsable;
-    },
-    toggleSelectGroup(event) {
-      this.$emit('select-group-change', {
-        groupIndex: this.groupIndex, checked: event.target.checked
-      });
-    }
-  },
-
-  mounted() {
-  },
-  components: {
-  },
-};
-
-const _hoisted_1$1 = ["colspan"];
-const _hoisted_2$1 = ["checked"];
-const _hoisted_3$1 = ["innerHTML"];
-const _hoisted_4$1 = { key: 1 };
-const _hoisted_5$1 = {
-  key: 1,
-  class: "vgt-row-header"
-};
-const _hoisted_6$1 = {
-  key: 2,
-  class: "vgt-row-header"
+  class: "footer__row-count vgt-pull-left"
 };
-const _hoisted_7$1 = ["checked"];
-const _hoisted_8$1 = ["onClick"];
-const _hoisted_9$1 = { key: 0 };
-const _hoisted_10$1 = ["innerHTML"];
+const _hoisted_3$1 = ["for"];
+const _hoisted_4$1 = ["id"];
+const _hoisted_5$1 = ["value"];
+const _hoisted_6$1 = ["value"];
+const _hoisted_7$1 = { class: "footer__navigation vgt-pull-right" };
 
 function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
-  return (vue.openBlock(), vue.createElementBlock("tr", null, [
-    ($props.headerRow.mode === 'span')
-      ? (vue.openBlock(), vue.createElementBlock("th", {
-          key: 0,
-          class: "vgt-left-align vgt-row-header",
-          colspan: $props.fullColspan
-        }, [
-          ($props.selectAllByGroup)
-            ? vue.renderSlot(_ctx.$slots, "table-header-group-select", {
-                key: 0,
-                columns: $props.columns,
-                row: $props.headerRow
-              }, () => [
-                vue.createElementVNode("input", {
-                  type: "checkbox",
-                  checked: $options.allSelected,
-                  onChange: _cache[0] || (_cache[0] = $event => ($options.toggleSelectGroup($event)))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2$1)
-              ])
-            : vue.createCommentVNode("v-if", true),
-          vue.createElementVNode("span", {
-            onClick: _cache[1] || (_cache[1] = $event => ($props.collapsable ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {}))
-          }, [
-            ($props.collapsable)
-              ? (vue.openBlock(), vue.createElementBlock("span", {
-                  key: 0,
-                  class: vue.normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
-                }, null, 2 /* CLASS */))
-              : vue.createCommentVNode("v-if", true),
-            vue.renderSlot(_ctx.$slots, "table-header-row", { row: $props.headerRow }, () => [
-              ($props.headerRow.html)
-                ? (vue.openBlock(), vue.createElementBlock("span", {
+  const _component_pagination_page_info = vue.resolveComponent("pagination-page-info");
+
+  return (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$1, [
+    ($props.perPageDropdownEnabled)
+      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$1, [
+          vue.createElementVNode("form", null, [
+            vue.createElementVNode("label", {
+              for: $data.id,
+              class: "footer__row-count__label"
+            }, vue.toDisplayString($props.rowsPerPageText) + ":", 9 /* TEXT, PROPS */, _hoisted_3$1),
+            vue.withDirectives(vue.createElementVNode("select", {
+              id: $data.id,
+              autocomplete: "off",
+              name: "perPageSelect",
+              class: "footer__row-count__select",
+              "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => (($data.currentPerPage) = $event)),
+              onChange: _cache[1] || (_cache[1] = (...args) => ($options.perPageChanged && $options.perPageChanged(...args))),
+              "aria-controls": "vgt-table"
+            }, [
+              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.rowsPerPageOptions, (option, idx) => {
+                return (vue.openBlock(), vue.createElementBlock("option", {
+                  key: idx,
+                  value: option
+                }, vue.toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_5$1))
+              }), 128 /* KEYED_FRAGMENT */)),
+              ($props.paginateDropdownAllowAll)
+                ? (vue.openBlock(), vue.createElementBlock("option", {
                     key: 0,
-                    innerHTML: $props.headerRow.label
-                  }, null, 8 /* PROPS */, _hoisted_3$1))
-                : (vue.openBlock(), vue.createElementBlock("span", _hoisted_4$1, vue.toDisplayString($props.headerRow.label), 1 /* TEXT */))
+                    value: $props.total
+                  }, vue.toDisplayString($props.allText), 9 /* TEXT, PROPS */, _hoisted_6$1))
+                : vue.createCommentVNode("v-if", true)
+            ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_4$1), [
+              [vue.vModelSelect, $data.currentPerPage]
             ])
           ])
-        ], 8 /* PROPS */, _hoisted_1$1))
-      : vue.createCommentVNode("v-if", true),
-    vue.createCommentVNode(" if the mode is not span, we display every column "),
-    ($props.headerRow.mode !== 'span' && $props.lineNumbers)
-      ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_5$1))
-      : vue.createCommentVNode("v-if", true),
-    ($props.headerRow.mode !== 'span' && $props.selectable)
-      ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_6$1, [
-          ($props.selectAllByGroup)
-            ? vue.renderSlot(_ctx.$slots, "table-header-group-select", {
-                key: 0,
-                columns: $props.columns,
-                row: $props.headerRow
-              }, () => [
-                vue.createElementVNode("input", {
-                  type: "checkbox",
-                  checked: $options.allSelected,
-                  onChange: _cache[2] || (_cache[2] = $event => ($options.toggleSelectGroup($event)))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$1)
-              ])
-            : vue.createCommentVNode("v-if", true)
         ]))
       : vue.createCommentVNode("v-if", true),
-    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, i) => {
-      return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: i }, [
-        ($props.headerRow.mode !== 'span' && !column.hidden)
-          ? (vue.openBlock(), vue.createElementBlock("th", {
-              key: 0,
-              class: vue.normalizeClass(["vgt-row-header", $props.getClasses(i, 'td')]),
-              onClick: $event => ($options.columnCollapsable(i) ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {})
-            }, [
-              ($options.columnCollapsable(i))
-                ? (vue.openBlock(), vue.createElementBlock("span", {
-                    key: 0,
-                    class: vue.normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
-                  }, null, 2 /* CLASS */))
-                : vue.createCommentVNode("v-if", true),
-              vue.renderSlot(_ctx.$slots, "table-header-row", {
-                row: $props.headerRow,
-                column: column,
-                formattedRow: $props.formattedRow($props.headerRow, true)
-              }, () => [
-                (!column.html)
-                  ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_9$1, vue.toDisplayString($props.collectFormatted($props.headerRow, column, true)), 1 /* TEXT */))
-                  : vue.createCommentVNode("v-if", true),
-                (column.html)
-                  ? (vue.openBlock(), vue.createElementBlock("span", {
-                      key: 1,
-                      innerHTML: $props.collectFormatted($props.headerRow, column, true)
-                    }, null, 8 /* PROPS */, _hoisted_10$1))
-                  : vue.createCommentVNode("v-if", true)
-              ])
-            ], 10 /* CLASS, PROPS */, _hoisted_8$1))
-          : vue.createCommentVNode("v-if", true)
-      ], 64 /* STABLE_FRAGMENT */))
-    }), 128 /* KEYED_FRAGMENT */))
+    vue.createElementVNode("div", _hoisted_7$1, [
+      vue.createVNode(_component_pagination_page_info, {
+        onPageChanged: $options.changePage,
+        "total-records": $props.total,
+        "last-page": $options.pagesCount,
+        "current-page": $data.currentPage,
+        "current-per-page": $data.currentPerPage,
+        "of-text": $props.ofText,
+        "page-text": $props.pageText,
+        "info-fn": $props.infoFn,
+        mode: $props.mode
+      }, null, 8 /* PROPS */, ["onPageChanged", "total-records", "last-page", "current-page", "current-per-page", "of-text", "page-text", "info-fn", "mode"]),
+      vue.createElementVNode("button", {
+        type: "button",
+        "aria-controls": "vgt-table",
+        class: vue.normalizeClass(["footer__navigation__page-btn", { disabled: !$options.prevIsPossible }]),
+        onClick: _cache[2] || (_cache[2] = vue.withModifiers((...args) => ($options.previousPage && $options.previousPage(...args)), ["prevent","stop"]))
+      }, [
+        vue.createElementVNode("span", {
+          "aria-hidden": "true",
+          class: vue.normalizeClass(["chevron", { 'left': !$props.rtl, 'right': $props.rtl }])
+        }, null, 2 /* CLASS */),
+        vue.createElementVNode("span", null, vue.toDisplayString($props.prevText), 1 /* TEXT */)
+      ], 2 /* CLASS */),
+      vue.createElementVNode("button", {
+        type: "button",
+        "aria-controls": "vgt-table",
+        class: vue.normalizeClass(["footer__navigation__page-btn", { disabled: !$options.nextIsPossible }]),
+        onClick: _cache[3] || (_cache[3] = vue.withModifiers((...args) => ($options.nextPage && $options.nextPage(...args)), ["prevent","stop"]))
+      }, [
+        vue.createElementVNode("span", null, vue.toDisplayString($props.nextText), 1 /* TEXT */),
+        vue.createElementVNode("span", {
+          "aria-hidden": "true",
+          class: vue.normalizeClass(["chevron", { 'right': !$props.rtl, 'left': $props.rtl }])
+        }, null, 2 /* CLASS */)
+      ], 2 /* CLASS */)
+    ])
   ]))
 }
-var VgtHeaderRow = /*#__PURE__*/_export_sfc(_sfc_main$1, [['render',_sfc_render$1]]);
-
-function toInteger(dirtyNumber) {
-  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
-    return NaN;
-  }
-
-  var number = Number(dirtyNumber);
-
-  if (isNaN(number)) {
-    return number;
-  }
-
-  return number < 0 ? Math.ceil(number) : Math.floor(number);
-}
-
-function requiredArgs(required, args) {
-  if (args.length < required) {
-    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
-  }
-}
-
-/**
- * @name toDate
- * @category Common Helpers
- * @summary Convert the given argument to an instance of Date.
- *
- * @description
- * Convert the given argument to an instance of Date.
- *
- * If the argument is an instance of Date, the function returns its clone.
- *
- * If the argument is a number, it is treated as a timestamp.
- *
- * If the argument is none of the above, the function returns Invalid Date.
- *
- * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
- *
- * @param {Date|Number} argument - the value to convert
- * @returns {Date} the parsed date in the local time zone
- * @throws {TypeError} 1 argument required
- *
- * @example
- * // Clone the date:
- * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
- * //=> Tue Feb 11 2014 11:30:30
- *
- * @example
- * // Convert the timestamp to date:
- * const result = toDate(1392098430000)
- * //=> Tue Feb 11 2014 11:30:30
- */
-
-function toDate(argument) {
-  requiredArgs(1, arguments);
-  var argStr = Object.prototype.toString.call(argument); // Clone the date
-
-  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
-    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
-    return new Date(argument.getTime());
-  } else if (typeof argument === 'number' || argStr === '[object Number]') {
-    return new Date(argument);
-  } else {
-    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
-      // eslint-disable-next-line no-console
-      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console
-
-      console.warn(new Error().stack);
-    }
-
-    return new Date(NaN);
-  }
-}
-
-/**
- * @name addMilliseconds
- * @category Millisecond Helpers
- * @summary Add the specified number of milliseconds to the given date.
- *
- * @description
- * Add the specified number of milliseconds to the given date.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {Date|Number} date - the date to be changed
- * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
- * @returns {Date} the new date with the milliseconds added
- * @throws {TypeError} 2 arguments required
- *
- * @example
- * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
- * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
- * //=> Thu Jul 10 2014 12:45:30.750
- */
-
-function addMilliseconds(dirtyDate, dirtyAmount) {
-  requiredArgs(2, arguments);
-  var timestamp = toDate(dirtyDate).getTime();
-  var amount = toInteger(dirtyAmount);
-  return new Date(timestamp + amount);
-}
-
-/**
- * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
- * They usually appear for dates that denote time before the timezones were introduced
- * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
- * and GMT+01:00:00 after that date)
- *
- * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
- * which would lead to incorrect calculations.
- *
- * This function returns the timezone offset in milliseconds that takes seconds in account.
- */
-function getTimezoneOffsetInMilliseconds(date) {
-  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
-  utcDate.setUTCFullYear(date.getFullYear());
-  return date.getTime() - utcDate.getTime();
-}
-
-/**
- * @name compareAsc
- * @category Common Helpers
- * @summary Compare the two dates and return -1, 0 or 1.
- *
- * @description
- * Compare the two dates and return 1 if the first date is after the second,
- * -1 if the first date is before the second or 0 if dates are equal.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {Date|Number} dateLeft - the first date to compare
- * @param {Date|Number} dateRight - the second date to compare
- * @returns {Number} the result of the comparison
- * @throws {TypeError} 2 arguments required
- *
- * @example
- * // Compare 11 February 1987 and 10 July 1989:
- * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
- * //=> -1
- *
- * @example
- * // Sort the array of dates:
- * const result = [
- *   new Date(1995, 6, 2),
- *   new Date(1987, 1, 11),
- *   new Date(1989, 6, 10)
- * ].sort(compareAsc)
- * //=> [
- * //   Wed Feb 11 1987 00:00:00,
- * //   Mon Jul 10 1989 00:00:00,
- * //   Sun Jul 02 1995 00:00:00
- * // ]
- */
-
-function compareAsc(dirtyDateLeft, dirtyDateRight) {
-  requiredArgs(2, arguments);
-  var dateLeft = toDate(dirtyDateLeft);
-  var dateRight = toDate(dirtyDateRight);
-  var diff = dateLeft.getTime() - dateRight.getTime();
-
-  if (diff < 0) {
-    return -1;
-  } else if (diff > 0) {
-    return 1; // Return 0 if diff is 0; return NaN if diff is NaN
-  } else {
-    return diff;
-  }
-}
+var VgtPagination = /*#__PURE__*/_export_sfc(_sfc_main$1, [['render',_sfc_render$1]]);
 
-/**
- * @name isDate
- * @category Common Helpers
- * @summary Is the given value a date?
- *
- * @description
- * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {*} value - the value to check
- * @returns {boolean} true if the given value is a date
- * @throws {TypeError} 1 arguments required
- *
- * @example
- * // For a valid date:
- * const result = isDate(new Date())
- * //=> true
- *
- * @example
- * // For an invalid date:
- * const result = isDate(new Date(NaN))
- * //=> true
- *
- * @example
- * // For some value:
- * const result = isDate('2014-02-31')
- * //=> false
- *
- * @example
- * // For an object:
- * const result = isDate({})
- * //=> false
- */
-
-function isDate(value) {
-  requiredArgs(1, arguments);
-  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
-}
-
-/**
- * @name isValid
- * @category Common Helpers
- * @summary Is the given date valid?
- *
- * @description
- * Returns false if argument is Invalid Date and true otherwise.
- * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
- * Invalid Date is a Date, whose time value is NaN.
- *
- * Time value of Date: http://es5.github.io/#x15.9.1.1
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - Now `isValid` doesn't throw an exception
- *   if the first argument is not an instance of Date.
- *   Instead, argument is converted beforehand using `toDate`.
- *
- *   Examples:
- *
- *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
- *   |---------------------------|---------------|---------------|
- *   | `new Date()`              | `true`        | `true`        |
- *   | `new Date('2016-01-01')`  | `true`        | `true`        |
- *   | `new Date('')`            | `false`       | `false`       |
- *   | `new Date(1488370835081)` | `true`        | `true`        |
- *   | `new Date(NaN)`           | `false`       | `false`       |
- *   | `'2016-01-01'`            | `TypeError`   | `false`       |
- *   | `''`                      | `TypeError`   | `false`       |
- *   | `1488370835081`           | `TypeError`   | `true`        |
- *   | `NaN`                     | `TypeError`   | `false`       |
- *
- *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
- *   that try to coerce arguments to the expected type
- *   (which is also the case with other *date-fns* functions).
- *
- * @param {*} date - the date to check
- * @returns {Boolean} the date is valid
- * @throws {TypeError} 1 argument required
- *
- * @example
- * // For the valid date:
- * const result = isValid(new Date(2014, 1, 31))
- * //=> true
- *
- * @example
- * // For the value, convertable into a date:
- * const result = isValid(1393804800000)
- * //=> true
- *
- * @example
- * // For the invalid date:
- * const result = isValid(new Date(''))
- * //=> false
- */
-
-function isValid(dirtyDate) {
-  requiredArgs(1, arguments);
-
-  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
-    return false;
-  }
-
-  var date = toDate(dirtyDate);
-  return !isNaN(Number(date));
-}
-
-var formatDistanceLocale = {
-  lessThanXSeconds: {
-    one: 'less than a second',
-    other: 'less than {{count}} seconds'
-  },
-  xSeconds: {
-    one: '1 second',
-    other: '{{count}} seconds'
-  },
-  halfAMinute: 'half a minute',
-  lessThanXMinutes: {
-    one: 'less than a minute',
-    other: 'less than {{count}} minutes'
-  },
-  xMinutes: {
-    one: '1 minute',
-    other: '{{count}} minutes'
-  },
-  aboutXHours: {
-    one: 'about 1 hour',
-    other: 'about {{count}} hours'
-  },
-  xHours: {
-    one: '1 hour',
-    other: '{{count}} hours'
-  },
-  xDays: {
-    one: '1 day',
-    other: '{{count}} days'
-  },
-  aboutXWeeks: {
-    one: 'about 1 week',
-    other: 'about {{count}} weeks'
-  },
-  xWeeks: {
-    one: '1 week',
-    other: '{{count}} weeks'
-  },
-  aboutXMonths: {
-    one: 'about 1 month',
-    other: 'about {{count}} months'
-  },
-  xMonths: {
-    one: '1 month',
-    other: '{{count}} months'
-  },
-  aboutXYears: {
-    one: 'about 1 year',
-    other: 'about {{count}} years'
-  },
-  xYears: {
-    one: '1 year',
-    other: '{{count}} years'
-  },
-  overXYears: {
-    one: 'over 1 year',
-    other: 'over {{count}} years'
-  },
-  almostXYears: {
-    one: 'almost 1 year',
-    other: 'almost {{count}} years'
-  }
-};
-
-var formatDistance = function (token, count, options) {
-  var result;
-  var tokenValue = formatDistanceLocale[token];
-
-  if (typeof tokenValue === 'string') {
-    result = tokenValue;
-  } else if (count === 1) {
-    result = tokenValue.one;
-  } else {
-    result = tokenValue.other.replace('{{count}}', count.toString());
-  }
-
-  if (options !== null && options !== void 0 && options.addSuffix) {
-    if (options.comparison && options.comparison > 0) {
-      return 'in ' + result;
-    } else {
-      return result + ' ago';
-    }
-  }
-
-  return result;
-};
-
-var formatDistance$1 = formatDistance;
-
-function buildFormatLongFn(args) {
-  return function () {
-    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
-    // TODO: Remove String()
-    var width = options.width ? String(options.width) : args.defaultWidth;
-    var format = args.formats[width] || args.formats[args.defaultWidth];
-    return format;
-  };
-}
-
-var dateFormats = {
-  full: 'EEEE, MMMM do, y',
-  long: 'MMMM do, y',
-  medium: 'MMM d, y',
-  short: 'MM/dd/yyyy'
-};
-var timeFormats = {
-  full: 'h:mm:ss a zzzz',
-  long: 'h:mm:ss a z',
-  medium: 'h:mm:ss a',
-  short: 'h:mm a'
-};
-var dateTimeFormats = {
-  full: "{{date}} 'at' {{time}}",
-  long: "{{date}} 'at' {{time}}",
-  medium: '{{date}}, {{time}}',
-  short: '{{date}}, {{time}}'
-};
-var formatLong = {
-  date: buildFormatLongFn({
-    formats: dateFormats,
-    defaultWidth: 'full'
-  }),
-  time: buildFormatLongFn({
-    formats: timeFormats,
-    defaultWidth: 'full'
-  }),
-  dateTime: buildFormatLongFn({
-    formats: dateTimeFormats,
-    defaultWidth: 'full'
-  })
-};
-var formatLong$1 = formatLong;
-
-var formatRelativeLocale = {
-  lastWeek: "'last' eeee 'at' p",
-  yesterday: "'yesterday at' p",
-  today: "'today at' p",
-  tomorrow: "'tomorrow at' p",
-  nextWeek: "eeee 'at' p",
-  other: 'P'
-};
-
-var formatRelative = function (token, _date, _baseDate, _options) {
-  return formatRelativeLocale[token];
+// all diacritics
+let diacritics = {
+  a: [
+    "a",
+    "à",
+    "á",
+    "â",
+    "ã",
+    "ä",
+    "å",
+    "æ",
+    "ā",
+    "ă",
+    "ą",
+    "ǎ",
+    "ǟ",
+    "ǡ",
+    "ǻ",
+    "ȁ",
+    "ȃ",
+    "ȧ",
+    "ɐ",
+    "ɑ",
+    "ɒ",
+    "ͣ",
+    "а",
+    "ӑ",
+    "ӓ",
+    "ᵃ",
+    "ᵄ",
+    "ᶏ",
+    "ḁ",
+    "ẚ",
+    "ạ",
+    "ả",
+    "ấ",
+    "ầ",
+    "ẩ",
+    "ẫ",
+    "ậ",
+    "ắ",
+    "ằ",
+    "ẳ",
+    "ẵ",
+    "ặ",
+    "ₐ",
+    "ⱥ",
+    "ａ",
+  ],
+  b: ["b", "ƀ", "ƃ", "ɓ", "ᖯ", "ᵇ", "ᵬ", "ᶀ", "ḃ", "ḅ", "ḇ", "ｂ"],
+  c: ["c", "ç", "ć", "ĉ", "ċ", "č", "ƈ", "ȼ", "ɕ", "ͨ", "ᴄ", "ᶜ", "ḉ", "ↄ", "ｃ"],
+  d: [
+    "d",
+    "ď",
+    "đ",
+    "Ƌ",
+    "ƌ",
+    "ȡ",
+    "ɖ",
+    "ɗ",
+    "ͩ",
+    "ᵈ",
+    "ᵭ",
+    "ᶁ",
+    "ᶑ",
+    "ḋ",
+    "ḍ",
+    "ḏ",
+    "ḑ",
+    "ḓ",
+    "ｄ",
+  ],
+  e: [
+    "e",
+    "è",
+    "é",
+    "ê",
+    "ë",
+    "ē",
+    "ĕ",
+    "ė",
+    "ę",
+    "ě",
+    "ǝ",
+    "ȅ",
+    "ȇ",
+    "ȩ",
+    "ɇ",
+    "ɘ",
+    "ͤ",
+    "ᵉ",
+    "ᶒ",
+    "ḕ",
+    "ḗ",
+    "ḙ",
+    "ḛ",
+    "ḝ",
+    "ẹ",
+    "ẻ",
+    "ẽ",
+    "ế",
+    "ề",
+    "ể",
+    "ễ",
+    "ệ",
+    "ₑ",
+    "ｅ",
+  ],
+  f: ["f", "ƒ", "ᵮ", "ᶂ", "ᶠ", "ḟ", "ｆ"],
+  g: ["g", "ĝ", "ğ", "ġ", "ģ", "ǥ", "ǧ", "ǵ", "ɠ", "ɡ", "ᵍ", "ᵷ", "ᵹ", "ᶃ", "ᶢ", "ḡ", "ｇ"],
+  h: [
+    "h",
+    "ĥ",
+    "ħ",
+    "ƕ",
+    "ȟ",
+    "ɥ",
+    "ɦ",
+    "ʮ",
+    "ʯ",
+    "ʰ",
+    "ʱ",
+    "ͪ",
+    "Һ",
+    "һ",
+    "ᑋ",
+    "ᶣ",
+    "ḣ",
+    "ḥ",
+    "ḧ",
+    "ḩ",
+    "ḫ",
+    "ⱨ",
+    "ｈ",
+  ],
+  i: [
+    "i",
+    "ì",
+    "í",
+    "î",
+    "ï",
+    "ĩ",
+    "ī",
+    "ĭ",
+    "į",
+    "ǐ",
+    "ȉ",
+    "ȋ",
+    "ɨ",
+    "ͥ",
+    "ᴉ",
+    "ᵎ",
+    "ᵢ",
+    "ᶖ",
+    "ᶤ",
+    "ḭ",
+    "ḯ",
+    "ỉ",
+    "ị",
+    "ｉ",
+  ],
+  j: ["j", "ĵ", "ǰ", "ɉ", "ʝ", "ʲ", "ᶡ", "ᶨ", "ｊ"],
+  k: ["k", "ķ", "ƙ", "ǩ", "ʞ", "ᵏ", "ᶄ", "ḱ", "ḳ", "ḵ", "ⱪ", "ｋ"],
+  l: [
+    "l",
+    "ĺ",
+    "ļ",
+    "ľ",
+    "ŀ",
+    "ł",
+    "ƚ",
+    "ȴ",
+    "ɫ",
+    "ɬ",
+    "ɭ",
+    "ˡ",
+    "ᶅ",
+    "ᶩ",
+    "ᶪ",
+    "ḷ",
+    "ḹ",
+    "ḻ",
+    "ḽ",
+    "ℓ",
+    "ⱡ",
+  ],
+  m: ["m", "ɯ", "ɰ", "ɱ", "ͫ", "ᴟ", "ᵐ", "ᵚ", "ᵯ", "ᶆ", "ᶬ", "ᶭ", "ḿ", "ṁ", "ṃ", "㎡", "㎥", "ｍ"],
+  n: [
+    "n",
+    "ñ",
+    "ń",
+    "ņ",
+    "ň",
+    "ŉ",
+    "ƞ",
+    "ǹ",
+    "ȵ",
+    "ɲ",
+    "ɳ",
+    "ᵰ",
+    "ᶇ",
+    "ᶮ",
+    "ᶯ",
+    "ṅ",
+    "ṇ",
+    "ṉ",
+    "ṋ",
+    "ⁿ",
+    "ｎ",
+  ],
+  o: [
+    "o",
+    "ò",
+    "ó",
+    "ô",
+    "õ",
+    "ö",
+    "ø",
+    "ō",
+    "ŏ",
+    "ő",
+    "ơ",
+    "ǒ",
+    "ǫ",
+    "ǭ",
+    "ǿ",
+    "ȍ",
+    "ȏ",
+    "ȫ",
+    "ȭ",
+    "ȯ",
+    "ȱ",
+    "ɵ",
+    "ͦ",
+    "о",
+    "ӧ",
+    "ө",
+    "ᴏ",
+    "ᴑ",
+    "ᴓ",
+    "ᴼ",
+    "ᵒ",
+    "ᶱ",
+    "ṍ",
+    "ṏ",
+    "ṑ",
+    "ṓ",
+    "ọ",
+    "ỏ",
+    "ố",
+    "ồ",
+    "ổ",
+    "ỗ",
+    "ộ",
+    "ớ",
+    "ờ",
+    "ở",
+    "ỡ",
+    "ợ",
+    "ₒ",
+    "ｏ",
+    "𐐬",
+  ],
+  p: ["p", "ᵖ", "ᵱ", "ᵽ", "ᶈ", "ṕ", "ṗ", "ｐ"],
+  q: ["q", "ɋ", "ʠ", "ᛩ", "ｑ"],
+  r: [
+    "r",
+    "ŕ",
+    "ŗ",
+    "ř",
+    "ȑ",
+    "ȓ",
+    "ɍ",
+    "ɹ",
+    "ɻ",
+    "ʳ",
+    "ʴ",
+    "ʵ",
+    "ͬ",
+    "ᵣ",
+    "ᵲ",
+    "ᶉ",
+    "ṙ",
+    "ṛ",
+    "ṝ",
+    "ṟ",
+  ],
+  s: ["s", "ś", "ŝ", "ş", "š", "ș", "ʂ", "ᔆ", "ᶊ", "ṡ", "ṣ", "ṥ", "ṧ", "ṩ", "ｓ"],
+  t: [
+    "t",
+    "ţ",
+    "ť",
+    "ŧ",
+    "ƫ",
+    "ƭ",
+    "ț",
+    "ʇ",
+    "ͭ",
+    "ᵀ",
+    "ᵗ",
+    "ᵵ",
+    "ᶵ",
+    "ṫ",
+    "ṭ",
+    "ṯ",
+    "ṱ",
+    "ẗ",
+    "ｔ",
+  ],
+  u: [
+    "u",
+    "ù",
+    "ú",
+    "û",
+    "ü",
+    "ũ",
+    "ū",
+    "ŭ",
+    "ů",
+    "ű",
+    "ų",
+    "ư",
+    "ǔ",
+    "ǖ",
+    "ǘ",
+    "ǚ",
+    "ǜ",
+    "ȕ",
+    "ȗ",
+    "ͧ",
+    "ߎ",
+    "ᵘ",
+    "ᵤ",
+    "ṳ",
+    "ṵ",
+    "ṷ",
+    "ṹ",
+    "ṻ",
+    "ụ",
+    "ủ",
+    "ứ",
+    "ừ",
+    "ử",
+    "ữ",
+    "ự",
+    "ｕ",
+  ],
+  v: ["v", "ʋ", "ͮ", "ᵛ", "ᵥ", "ᶹ", "ṽ", "ṿ", "ⱱ", "ｖ", "ⱴ"],
+  w: ["w", "ŵ", "ʷ", "ᵂ", "ẁ", "ẃ", "ẅ", "ẇ", "ẉ", "ẘ", "ⱳ", "ｗ"],
+  x: ["x", "̽", "͓", "ᶍ", "ͯ", "ẋ", "ẍ", "ₓ", "ｘ"],
+  y: ["y", "ý", "ÿ", "ŷ", "ȳ", "ɏ", "ʸ", "ẏ", "ỳ", "ỵ", "ỷ", "ỹ", "ｙ"],
+  z: [
+    "z",
+    "ź",
+    "ż",
+    "ž",
+    "ƶ",
+    "ȥ",
+    "ɀ",
+    "ʐ",
+    "ʑ",
+    "ᙆ",
+    "ᙇ",
+    "ᶻ",
+    "ᶼ",
+    "ᶽ",
+    "ẑ",
+    "ẓ",
+    "ẕ",
+    "ⱬ",
+    "ｚ",
+  ],
 };
 
-var formatRelative$1 = formatRelative;
-
-function buildLocalizeFn(args) {
-  return function (dirtyIndex, dirtyOptions) {
-    var options = dirtyOptions || {};
-    var context = options.context ? String(options.context) : 'standalone';
-    var valuesArray;
+// Precompiled Object with { key = Diacritic, value = real-Character }
+const compiledDiactitics = (function() {
+  let x = {};
 
-    if (context === 'formatting' && args.formattingValues) {
-      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
-      var width = options.width ? String(options.width) : defaultWidth;
-      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
-    } else {
-      var _defaultWidth = args.defaultWidth;
+  for (let key in diacritics) {
+    let ok = diacritics[key];
 
-      var _width = options.width ? String(options.width) : args.defaultWidth;
+    for (let rval in ok) {
+      let val = ok[rval];
 
-      valuesArray = args.values[_width] || args.values[_defaultWidth];
+      // Do not replace the char with itself
+      if (val !== key) {
+        x[val] = key;
+      }
     }
+  }
 
-    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
-
-    return valuesArray[index];
-  };
-}
+  return x;
+})();
 
-var eraValues = {
-  narrow: ['B', 'A'],
-  abbreviated: ['BC', 'AD'],
-  wide: ['Before Christ', 'Anno Domini']
-};
-var quarterValues = {
-  narrow: ['1', '2', '3', '4'],
-  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
-  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
-}; // Note: in English, the names of days of the week and months are capitalized.
-// If you are making a new locale based on this one, check if the same is true for the language you're working on.
-// Generally, formatted dates should look like they are in the middle of a sentence,
-// e.g. in Spanish language the weekdays and months should be in the lowercase.
+// Regex for detecting non-ASCII-Characters in String
+const regexNonASCII = /[^a-z0-9\s,.-]/;
 
-var monthValues = {
-  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
-  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
-  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
-};
-var dayValues = {
-  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
-  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
-  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
-  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
-};
-var dayPeriodValues = {
-  narrow: {
-    am: 'a',
-    pm: 'p',
-    midnight: 'mi',
-    noon: 'n',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  },
-  abbreviated: {
-    am: 'AM',
-    pm: 'PM',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  },
-  wide: {
-    am: 'a.m.',
-    pm: 'p.m.',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  }
-};
-var formattingDayPeriodValues = {
-  narrow: {
-    am: 'a',
-    pm: 'p',
-    midnight: 'mi',
-    noon: 'n',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
-  },
-  abbreviated: {
-    am: 'AM',
-    pm: 'PM',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
-  },
-  wide: {
-    am: 'a.m.',
-    pm: 'p.m.',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
+/*
+ * Main function of the module which removes all diacritics from the received text
+ */
+const diacriticless = (text) => {
+  // When there are only ascii-Characters in the string, skip processing and return text right away
+  if (text.search(regexNonASCII) === -1) {
+    return text;
   }
-};
 
-var ordinalNumber = function (dirtyNumber, _options) {
-  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
-  // if they are different for different grammatical genders,
-  // use `options.unit`.
-  //
-  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
-  // 'day', 'hour', 'minute', 'second'.
+  let result = "";
 
-  var rem100 = number % 100;
+  let len = text.length;
+  for (var i = 0; i < len; i++) {
+    let searchChar = text.charAt(i);
 
-  if (rem100 > 20 || rem100 < 10) {
-    switch (rem100 % 10) {
-      case 1:
-        return number + 'st';
+    // If applicable replace the diacritic character with the real one or use the original value
+    result += searchChar in compiledDiactitics ? compiledDiactitics[searchChar] : searchChar;
+  }
 
-      case 2:
-        return number + 'nd';
+  return result;
+};
 
-      case 3:
-        return number + 'rd';
+const escapeRegExp = str => str.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
+
+var defaultType = {
+  format(x) {
+    return x;
+  },
+  filterPredicate(rowval, filter, skipDiacritics = false, fromDropdown = false) {
+    // take care of nulls
+    if (typeof rowval === 'undefined' || rowval === null) {
+      return false;
     }
-  }
 
-  return number + 'th';
-};
+    // row value
+    const rowValue = skipDiacritics
+      ? String(rowval).toLowerCase()
+      : diacriticless(escapeRegExp(String(rowval)).toLowerCase());
 
-var localize = {
-  ordinalNumber: ordinalNumber,
-  era: buildLocalizeFn({
-    values: eraValues,
-    defaultWidth: 'wide'
-  }),
-  quarter: buildLocalizeFn({
-    values: quarterValues,
-    defaultWidth: 'wide',
-    argumentCallback: function (quarter) {
-      return quarter - 1;
+    // search term
+    const searchTerm = skipDiacritics
+      ? filter.toLowerCase()
+      : diacriticless(escapeRegExp(filter).toLowerCase());
+
+    // comparison
+    return fromDropdown ? rowValue === searchTerm : (rowValue.indexOf(searchTerm) > -1);
+  },
+
+  compare(x, y) {
+    function cook(d) {
+      if (typeof d === 'undefined' || d === null) return '';
+      return diacriticless(String(d).toLowerCase());
     }
-  }),
-  month: buildLocalizeFn({
-    values: monthValues,
-    defaultWidth: 'wide'
-  }),
-  day: buildLocalizeFn({
-    values: dayValues,
-    defaultWidth: 'wide'
-  }),
-  dayPeriod: buildLocalizeFn({
-    values: dayPeriodValues,
-    defaultWidth: 'wide',
-    formattingValues: formattingDayPeriodValues,
-    defaultFormattingWidth: 'wide'
-  })
+    x = cook(x);
+    y = cook(y);
+    if (x < y) return -1;
+    if (x > y) return 1;
+    return 0;
+  },
 };
-var localize$1 = localize;
 
-function buildMatchFn(args) {
-  return function (string) {
-    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-    var width = options.width;
-    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
-    var matchResult = string.match(matchPattern);
+function _typeof(o) {
+  "@babel/helpers - typeof";
 
-    if (!matchResult) {
-      return null;
-    }
+  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
+    return typeof o;
+  } : function (o) {
+    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
+  }, _typeof(o);
+}
 
-    var matchedString = matchResult[0];
-    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
-    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
-      return pattern.test(matchedString);
-    }) : findKey(parsePatterns, function (pattern) {
-      return pattern.test(matchedString);
-    });
-    var value;
-    value = args.valueCallback ? args.valueCallback(key) : key;
-    value = options.valueCallback ? options.valueCallback(value) : value;
-    var rest = string.slice(matchedString.length);
-    return {
-      value: value,
-      rest: rest
-    };
-  };
+function toInteger(dirtyNumber) {
+  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
+    return NaN;
+  }
+  var number = Number(dirtyNumber);
+  if (isNaN(number)) {
+    return number;
+  }
+  return number < 0 ? Math.ceil(number) : Math.floor(number);
 }
 
-function findKey(object, predicate) {
-  for (var key in object) {
-    if (object.hasOwnProperty(key) && predicate(object[key])) {
-      return key;
+function requiredArgs(required, args) {
+  if (args.length < required) {
+    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
+  }
+}
+
+/**
+ * @name toDate
+ * @category Common Helpers
+ * @summary Convert the given argument to an instance of Date.
+ *
+ * @description
+ * Convert the given argument to an instance of Date.
+ *
+ * If the argument is an instance of Date, the function returns its clone.
+ *
+ * If the argument is a number, it is treated as a timestamp.
+ *
+ * If the argument is none of the above, the function returns Invalid Date.
+ *
+ * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
+ *
+ * @param {Date|Number} argument - the value to convert
+ * @returns {Date} the parsed date in the local time zone
+ * @throws {TypeError} 1 argument required
+ *
+ * @example
+ * // Clone the date:
+ * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
+ * //=> Tue Feb 11 2014 11:30:30
+ *
+ * @example
+ * // Convert the timestamp to date:
+ * const result = toDate(1392098430000)
+ * //=> Tue Feb 11 2014 11:30:30
+ */
+function toDate(argument) {
+  requiredArgs(1, arguments);
+  var argStr = Object.prototype.toString.call(argument);
+
+  // Clone the date
+  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
+    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
+    return new Date(argument.getTime());
+  } else if (typeof argument === 'number' || argStr === '[object Number]') {
+    return new Date(argument);
+  } else {
+    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
+      // eslint-disable-next-line no-console
+      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
+      // eslint-disable-next-line no-console
+      console.warn(new Error().stack);
     }
+    return new Date(NaN);
   }
+}
 
-  return undefined;
+/**
+ * @name addMilliseconds
+ * @category Millisecond Helpers
+ * @summary Add the specified number of milliseconds to the given date.
+ *
+ * @description
+ * Add the specified number of milliseconds to the given date.
+ *
+ * @param {Date|Number} date - the date to be changed
+ * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
+ * @returns {Date} the new date with the milliseconds added
+ * @throws {TypeError} 2 arguments required
+ *
+ * @example
+ * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
+ * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
+ * //=> Thu Jul 10 2014 12:45:30.750
+ */
+function addMilliseconds(dirtyDate, dirtyAmount) {
+  requiredArgs(2, arguments);
+  var timestamp = toDate(dirtyDate).getTime();
+  var amount = toInteger(dirtyAmount);
+  return new Date(timestamp + amount);
 }
 
-function findIndex(array, predicate) {
-  for (var key = 0; key < array.length; key++) {
-    if (predicate(array[key])) {
-      return key;
-    }
+var defaultOptions = {};
+function getDefaultOptions() {
+  return defaultOptions;
+}
+
+/**
+ * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
+ * They usually appear for dates that denote time before the timezones were introduced
+ * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
+ * and GMT+01:00:00 after that date)
+ *
+ * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
+ * which would lead to incorrect calculations.
+ *
+ * This function returns the timezone offset in milliseconds that takes seconds in account.
+ */
+function getTimezoneOffsetInMilliseconds(date) {
+  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
+  utcDate.setUTCFullYear(date.getFullYear());
+  return date.getTime() - utcDate.getTime();
+}
+
+/**
+ * @name compareAsc
+ * @category Common Helpers
+ * @summary Compare the two dates and return -1, 0 or 1.
+ *
+ * @description
+ * Compare the two dates and return 1 if the first date is after the second,
+ * -1 if the first date is before the second or 0 if dates are equal.
+ *
+ * @param {Date|Number} dateLeft - the first date to compare
+ * @param {Date|Number} dateRight - the second date to compare
+ * @returns {Number} the result of the comparison
+ * @throws {TypeError} 2 arguments required
+ *
+ * @example
+ * // Compare 11 February 1987 and 10 July 1989:
+ * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
+ * //=> -1
+ *
+ * @example
+ * // Sort the array of dates:
+ * const result = [
+ *   new Date(1995, 6, 2),
+ *   new Date(1987, 1, 11),
+ *   new Date(1989, 6, 10)
+ * ].sort(compareAsc)
+ * //=> [
+ * //   Wed Feb 11 1987 00:00:00,
+ * //   Mon Jul 10 1989 00:00:00,
+ * //   Sun Jul 02 1995 00:00:00
+ * // ]
+ */
+function compareAsc(dirtyDateLeft, dirtyDateRight) {
+  requiredArgs(2, arguments);
+  var dateLeft = toDate(dirtyDateLeft);
+  var dateRight = toDate(dirtyDateRight);
+  var diff = dateLeft.getTime() - dateRight.getTime();
+  if (diff < 0) {
+    return -1;
+  } else if (diff > 0) {
+    return 1;
+    // Return 0 if diff is 0; return NaN if diff is NaN
+  } else {
+    return diff;
   }
+}
+
+/**
+ * Days in 1 week.
+ *
+ * @name daysInWeek
+ * @constant
+ * @type {number}
+ * @default
+ */
+
+/**
+ * Milliseconds in 1 minute
+ *
+ * @name millisecondsInMinute
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInMinute = 60000;
 
-  return undefined;
-}
+/**
+ * Milliseconds in 1 hour
+ *
+ * @name millisecondsInHour
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInHour = 3600000;
 
-function buildMatchPatternFn(args) {
-  return function (string) {
-    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-    var matchResult = string.match(args.matchPattern);
-    if (!matchResult) return null;
-    var matchedString = matchResult[0];
-    var parseResult = string.match(args.parsePattern);
-    if (!parseResult) return null;
-    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
-    value = options.valueCallback ? options.valueCallback(value) : value;
-    var rest = string.slice(matchedString.length);
-    return {
-      value: value,
-      rest: rest
-    };
-  };
-}
+/**
+ * Milliseconds in 1 second
+ *
+ * @name millisecondsInSecond
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInSecond = 1000;
 
-var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
-var parseOrdinalNumberPattern = /\d+/i;
-var matchEraPatterns = {
-  narrow: /^(b|a)/i,
-  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
-  wide: /^(before christ|before common era|anno domini|common era)/i
-};
-var parseEraPatterns = {
-  any: [/^b/i, /^(a|c)/i]
-};
-var matchQuarterPatterns = {
-  narrow: /^[1234]/i,
-  abbreviated: /^q[1234]/i,
-  wide: /^[1234](th|st|nd|rd)? quarter/i
-};
-var parseQuarterPatterns = {
-  any: [/1/i, /2/i, /3/i, /4/i]
-};
-var matchMonthPatterns = {
-  narrow: /^[jfmasond]/i,
-  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
-  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
-};
-var parseMonthPatterns = {
-  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
-  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
-};
-var matchDayPatterns = {
-  narrow: /^[smtwf]/i,
-  short: /^(su|mo|tu|we|th|fr|sa)/i,
-  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
-  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
-};
-var parseDayPatterns = {
-  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
-  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
-};
-var matchDayPeriodPatterns = {
-  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
-  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
-};
-var parseDayPeriodPatterns = {
-  any: {
-    am: /^a/i,
-    pm: /^p/i,
-    midnight: /^mi/i,
-    noon: /^no/i,
-    morning: /morning/i,
-    afternoon: /afternoon/i,
-    evening: /evening/i,
-    night: /night/i
-  }
-};
-var match = {
-  ordinalNumber: buildMatchPatternFn({
-    matchPattern: matchOrdinalNumberPattern,
-    parsePattern: parseOrdinalNumberPattern,
-    valueCallback: function (value) {
-      return parseInt(value, 10);
-    }
-  }),
-  era: buildMatchFn({
-    matchPatterns: matchEraPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseEraPatterns,
-    defaultParseWidth: 'any'
-  }),
-  quarter: buildMatchFn({
-    matchPatterns: matchQuarterPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseQuarterPatterns,
-    defaultParseWidth: 'any',
-    valueCallback: function (index) {
-      return index + 1;
-    }
-  }),
-  month: buildMatchFn({
-    matchPatterns: matchMonthPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseMonthPatterns,
-    defaultParseWidth: 'any'
-  }),
-  day: buildMatchFn({
-    matchPatterns: matchDayPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseDayPatterns,
-    defaultParseWidth: 'any'
-  }),
-  dayPeriod: buildMatchFn({
-    matchPatterns: matchDayPeriodPatterns,
-    defaultMatchWidth: 'any',
-    parsePatterns: parseDayPeriodPatterns,
-    defaultParseWidth: 'any'
-  })
-};
-var match$1 = match;
+/**
+ * @name isDate
+ * @category Common Helpers
+ * @summary Is the given value a date?
+ *
+ * @description
+ * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
+ *
+ * @param {*} value - the value to check
+ * @returns {boolean} true if the given value is a date
+ * @throws {TypeError} 1 arguments required
+ *
+ * @example
+ * // For a valid date:
+ * const result = isDate(new Date())
+ * //=> true
+ *
+ * @example
+ * // For an invalid date:
+ * const result = isDate(new Date(NaN))
+ * //=> true
+ *
+ * @example
+ * // For some value:
+ * const result = isDate('2014-02-31')
+ * //=> false
+ *
+ * @example
+ * // For an object:
+ * const result = isDate({})
+ * //=> false
+ */
+function isDate(value) {
+  requiredArgs(1, arguments);
+  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
+}
 
 /**
- * @type {Locale}
- * @category Locales
- * @summary English locale (United States).
- * @language English
- * @iso-639-2 eng
- * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
- * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
+ * @name isValid
+ * @category Common Helpers
+ * @summary Is the given date valid?
+ *
+ * @description
+ * Returns false if argument is Invalid Date and true otherwise.
+ * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
+ * Invalid Date is a Date, whose time value is NaN.
+ *
+ * Time value of Date: http://es5.github.io/#x15.9.1.1
+ *
+ * @param {*} date - the date to check
+ * @returns {Boolean} the date is valid
+ * @throws {TypeError} 1 argument required
+ *
+ * @example
+ * // For the valid date:
+ * const result = isValid(new Date(2014, 1, 31))
+ * //=> true
+ *
+ * @example
+ * // For the value, convertable into a date:
+ * const result = isValid(1393804800000)
+ * //=> true
+ *
+ * @example
+ * // For the invalid date:
+ * const result = isValid(new Date(''))
+ * //=> false
  */
-var locale = {
-  code: 'en-US',
-  formatDistance: formatDistance$1,
-  formatLong: formatLong$1,
-  formatRelative: formatRelative$1,
-  localize: localize$1,
-  match: match$1,
-  options: {
-    weekStartsOn: 0
-    /* Sunday */
-    ,
-    firstWeekContainsDate: 1
+function isValid(dirtyDate) {
+  requiredArgs(1, arguments);
+  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
+    return false;
   }
-};
-var defaultLocale = locale;
+  var date = toDate(dirtyDate);
+  return !isNaN(Number(date));
+}
 
 /**
  * @name subMilliseconds
@@ -4458,10 +3957,6 @@ var defaultLocale = locale;
  * @description
  * Subtract the specified number of milliseconds from the given date.
  *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
  * @param {Date|Number} date - the date to be changed
  * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
  * @returns {Date} the new date with the milliseconds subtracted
@@ -4472,16 +3967,13 @@ var defaultLocale = locale;
  * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
  * //=> Thu Jul 10 2014 12:45:29.250
  */
-
 function subMilliseconds(dirtyDate, dirtyAmount) {
   requiredArgs(2, arguments);
   var amount = toInteger(dirtyAmount);
   return addMilliseconds(dirtyDate, -amount);
 }
 
-var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_DAY = 86400000;
 function getUTCDayOfYear(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
@@ -4493,8 +3985,6 @@ function getUTCDayOfYear(dirtyDate) {
   return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function startOfUTCISOWeek(dirtyDate) {
   requiredArgs(1, arguments);
   var weekStartsOn = 1;
@@ -4506,8 +3996,6 @@ function startOfUTCISOWeek(dirtyDate) {
   return date;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function getUTCISOWeekYear(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
@@ -4520,7 +4008,6 @@ function getUTCISOWeekYear(dirtyDate) {
   fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
   fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
   var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
-
   if (date.getTime() >= startOfNextYear.getTime()) {
     return year + 1;
   } else if (date.getTime() >= startOfThisYear.getTime()) {
@@ -4530,8 +4017,6 @@ function getUTCISOWeekYear(dirtyDate) {
   }
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function startOfUTCISOWeekYear(dirtyDate) {
   requiredArgs(1, arguments);
   var year = getUTCISOWeekYear(dirtyDate);
@@ -4542,33 +4027,28 @@ function startOfUTCISOWeekYear(dirtyDate) {
   return date;
 }
 
-var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_WEEK$1 = 604800000;
 function getUTCISOWeek(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
-  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
+  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
+
+  // Round the number of days to the nearest integer
   // because the number of milliseconds in a week is not constant
   // (e.g. it's different in the week of the daylight saving time clock shift)
-
   return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function startOfUTCWeek(dirtyDate, dirtyOptions) {
+function startOfUTCWeek(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
 
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   var date = toDate(dirtyDate);
   var day = date.getUTCDay();
   var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
@@ -4577,31 +4057,26 @@ function startOfUTCWeek(dirtyDate, dirtyOptions) {
   return date;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function getUTCWeekYear(dirtyDate, dirtyOptions) {
+function getUTCWeekYear(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
   var year = date.getUTCFullYear();
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
 
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
-
   var firstWeekOfNextYear = new Date(0);
   firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
   firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
-  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
+  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
   var firstWeekOfThisYear = new Date(0);
   firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
   firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
-  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
-
+  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
   if (date.getTime() >= startOfNextYear.getTime()) {
     return year + 1;
   } else if (date.getTime() >= startOfThisYear.getTime()) {
@@ -4611,44 +4086,37 @@ function getUTCWeekYear(dirtyDate, dirtyOptions) {
   }
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
+function startOfUTCWeekYear(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
-  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
+  var defaultOptions = getDefaultOptions();
+  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
+  var year = getUTCWeekYear(dirtyDate, options);
   var firstWeek = new Date(0);
   firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
   firstWeek.setUTCHours(0, 0, 0, 0);
-  var date = startOfUTCWeek(firstWeek, dirtyOptions);
+  var date = startOfUTCWeek(firstWeek, options);
   return date;
 }
 
-var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_WEEK = 604800000;
 function getUTCWeek(dirtyDate, options) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
-  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
+  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
+
+  // Round the number of days to the nearest integer
   // because the number of milliseconds in a week is not constant
   // (e.g. it's different in the week of the daylight saving time clock shift)
-
   return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
 }
 
 function addLeadingZeros(number, targetLength) {
   var sign = number < 0 ? '-' : '';
   var output = Math.abs(number).toString();
-
   while (output.length < targetLength) {
     output = '0' + output;
   }
-
   return sign + output;
 }
 
@@ -4664,10 +4132,9 @@ function addLeadingZeros(number, targetLength) {
  *
  * Letters marked by * are not implemented but reserved by Unicode standard.
  */
-
 var formatters$2 = {
   // Year
-  y: function (date, token) {
+  y: function y(date, token) {
     // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
     // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
     // |----------|-------|----|-------|-------|-------|
@@ -4676,58 +4143,55 @@ var formatters$2 = {
     // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
     // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
     // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
-    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)
 
+    var signedYear = date.getUTCFullYear();
+    // Returns 1 for 1 BC (which is year 0 in JavaScript)
     var year = signedYear > 0 ? signedYear : 1 - signedYear;
     return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
   },
   // Month
-  M: function (date, token) {
+  M: function M(date, token) {
     var month = date.getUTCMonth();
     return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
   },
   // Day of the month
-  d: function (date, token) {
+  d: function d(date, token) {
     return addLeadingZeros(date.getUTCDate(), token.length);
   },
   // AM or PM
-  a: function (date, token) {
+  a: function a(date, token) {
     var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
-
     switch (token) {
       case 'a':
       case 'aa':
         return dayPeriodEnumValue.toUpperCase();
-
       case 'aaa':
         return dayPeriodEnumValue;
-
       case 'aaaaa':
         return dayPeriodEnumValue[0];
-
       case 'aaaa':
       default:
         return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
     }
   },
   // Hour [1-12]
-  h: function (date, token) {
+  h: function h(date, token) {
     return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
   },
   // Hour [0-23]
-  H: function (date, token) {
+  H: function H(date, token) {
     return addLeadingZeros(date.getUTCHours(), token.length);
   },
   // Minute
-  m: function (date, token) {
+  m: function m(date, token) {
     return addLeadingZeros(date.getUTCMinutes(), token.length);
   },
   // Second
-  s: function (date, token) {
+  s: function s(date, token) {
     return addLeadingZeros(date.getUTCSeconds(), token.length);
   },
   // Fraction of second
-  S: function (date, token) {
+  S: function S(date, token) {
     var numberOfDigits = token.length;
     var milliseconds = date.getUTCMilliseconds();
     var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
@@ -4794,9 +4258,8 @@ var dayPeriodEnum = {
 
 var formatters = {
   // Era
-  G: function (date, token, localize) {
+  G: function G(date, token, localize) {
     var era = date.getUTCFullYear() > 0 ? 1 : 0;
-
     switch (token) {
       // AD, BC
       case 'G':
@@ -4806,13 +4269,11 @@ var formatters = {
           width: 'abbreviated'
         });
       // A, B
-
       case 'GGGGG':
         return localize.era(era, {
           width: 'narrow'
         });
       // Anno Domini, Before Christ
-
       case 'GGGG':
       default:
         return localize.era(era, {
@@ -4821,44 +4282,45 @@ var formatters = {
     }
   },
   // Year
-  y: function (date, token, localize) {
+  y: function y(date, token, localize) {
     // Ordinal number
     if (token === 'yo') {
-      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)
-
+      var signedYear = date.getUTCFullYear();
+      // Returns 1 for 1 BC (which is year 0 in JavaScript)
       var year = signedYear > 0 ? signedYear : 1 - signedYear;
       return localize.ordinalNumber(year, {
         unit: 'year'
       });
     }
-
     return formatters$3.y(date, token);
   },
   // Local week-numbering year
-  Y: function (date, token, localize, options) {
-    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)
-
-    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year
+  Y: function Y(date, token, localize, options) {
+    var signedWeekYear = getUTCWeekYear(date, options);
+    // Returns 1 for 1 BC (which is year 0 in JavaScript)
+    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
 
+    // Two digit year
     if (token === 'YY') {
       var twoDigitYear = weekYear % 100;
       return addLeadingZeros(twoDigitYear, 2);
-    } // Ordinal number
-
+    }
 
+    // Ordinal number
     if (token === 'Yo') {
       return localize.ordinalNumber(weekYear, {
         unit: 'year'
       });
-    } // Padding
-
+    }
 
+    // Padding
     return addLeadingZeros(weekYear, token.length);
   },
   // ISO week-numbering year
-  R: function (date, token) {
-    var isoWeekYear = getUTCISOWeekYear(date); // Padding
+  R: function R(date, token) {
+    var isoWeekYear = getUTCISOWeekYear(date);
 
+    // Padding
     return addLeadingZeros(isoWeekYear, token.length);
   },
   // Extended year. This is a single number designating the year of this calendar system.
@@ -4870,44 +4332,38 @@ var formatters = {
   // | BC 2 |   2 |  -1 |
   // Also `yy` always returns the last two digits of a year,
   // while `uu` pads single digit years to 2 characters and returns other years unchanged.
-  u: function (date, token) {
+  u: function u(date, token) {
     var year = date.getUTCFullYear();
     return addLeadingZeros(year, token.length);
   },
   // Quarter
-  Q: function (date, token, localize) {
+  Q: function Q(date, token, localize) {
     var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
-
     switch (token) {
       // 1, 2, 3, 4
       case 'Q':
         return String(quarter);
       // 01, 02, 03, 04
-
       case 'QQ':
         return addLeadingZeros(quarter, 2);
       // 1st, 2nd, 3rd, 4th
-
       case 'Qo':
         return localize.ordinalNumber(quarter, {
           unit: 'quarter'
         });
       // Q1, Q2, Q3, Q4
-
       case 'QQQ':
         return localize.quarter(quarter, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
       case 'QQQQQ':
         return localize.quarter(quarter, {
           width: 'narrow',
           context: 'formatting'
         });
       // 1st quarter, 2nd quarter, ...
-
       case 'QQQQ':
       default:
         return localize.quarter(quarter, {
@@ -4917,39 +4373,33 @@ var formatters = {
     }
   },
   // Stand-alone quarter
-  q: function (date, token, localize) {
+  q: function q(date, token, localize) {
     var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
-
     switch (token) {
       // 1, 2, 3, 4
       case 'q':
         return String(quarter);
       // 01, 02, 03, 04
-
       case 'qq':
         return addLeadingZeros(quarter, 2);
       // 1st, 2nd, 3rd, 4th
-
       case 'qo':
         return localize.ordinalNumber(quarter, {
           unit: 'quarter'
         });
       // Q1, Q2, Q3, Q4
-
       case 'qqq':
         return localize.quarter(quarter, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
       case 'qqqqq':
         return localize.quarter(quarter, {
           width: 'narrow',
           context: 'standalone'
         });
       // 1st quarter, 2nd quarter, ...
-
       case 'qqqq':
       default:
         return localize.quarter(quarter, {
@@ -4959,35 +4409,30 @@ var formatters = {
     }
   },
   // Month
-  M: function (date, token, localize) {
+  M: function M(date, token, localize) {
     var month = date.getUTCMonth();
-
     switch (token) {
       case 'M':
       case 'MM':
         return formatters$3.M(date, token);
       // 1st, 2nd, ..., 12th
-
       case 'Mo':
         return localize.ordinalNumber(month + 1, {
           unit: 'month'
         });
       // Jan, Feb, ..., Dec
-
       case 'MMM':
         return localize.month(month, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // J, F, ..., D
-
       case 'MMMMM':
         return localize.month(month, {
           width: 'narrow',
           context: 'formatting'
         });
       // January, February, ..., December
-
       case 'MMMM':
       default:
         return localize.month(month, {
@@ -4997,39 +4442,33 @@ var formatters = {
     }
   },
   // Stand-alone month
-  L: function (date, token, localize) {
+  L: function L(date, token, localize) {
     var month = date.getUTCMonth();
-
     switch (token) {
       // 1, 2, ..., 12
       case 'L':
         return String(month + 1);
       // 01, 02, ..., 12
-
       case 'LL':
         return addLeadingZeros(month + 1, 2);
       // 1st, 2nd, ..., 12th
-
       case 'Lo':
         return localize.ordinalNumber(month + 1, {
           unit: 'month'
         });
       // Jan, Feb, ..., Dec
-
       case 'LLL':
         return localize.month(month, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // J, F, ..., D
-
       case 'LLLLL':
         return localize.month(month, {
           width: 'narrow',
           context: 'standalone'
         });
       // January, February, ..., December
-
       case 'LLLL':
       default:
         return localize.month(month, {
@@ -5039,55 +4478,47 @@ var formatters = {
     }
   },
   // Local week of year
-  w: function (date, token, localize, options) {
+  w: function w(date, token, localize, options) {
     var week = getUTCWeek(date, options);
-
     if (token === 'wo') {
       return localize.ordinalNumber(week, {
         unit: 'week'
       });
     }
-
     return addLeadingZeros(week, token.length);
   },
   // ISO week of year
-  I: function (date, token, localize) {
+  I: function I(date, token, localize) {
     var isoWeek = getUTCISOWeek(date);
-
     if (token === 'Io') {
       return localize.ordinalNumber(isoWeek, {
         unit: 'week'
       });
     }
-
     return addLeadingZeros(isoWeek, token.length);
   },
   // Day of the month
-  d: function (date, token, localize) {
+  d: function d(date, token, localize) {
     if (token === 'do') {
       return localize.ordinalNumber(date.getUTCDate(), {
         unit: 'date'
       });
     }
-
     return formatters$3.d(date, token);
   },
   // Day of year
-  D: function (date, token, localize) {
+  D: function D(date, token, localize) {
     var dayOfYear = getUTCDayOfYear(date);
-
     if (token === 'Do') {
       return localize.ordinalNumber(dayOfYear, {
         unit: 'dayOfYear'
       });
     }
-
     return addLeadingZeros(dayOfYear, token.length);
   },
   // Day of week
-  E: function (date, token, localize) {
+  E: function E(date, token, localize) {
     var dayOfWeek = date.getUTCDay();
-
     switch (token) {
       // Tue
       case 'E':
@@ -5098,21 +4529,18 @@ var formatters = {
           context: 'formatting'
         });
       // T
-
       case 'EEEEE':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'EEEEEE':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'EEEE':
       default:
         return localize.day(dayOfWeek, {
@@ -5122,46 +4550,39 @@ var formatters = {
     }
   },
   // Local day of week
-  e: function (date, token, localize, options) {
+  e: function e(date, token, localize, options) {
     var dayOfWeek = date.getUTCDay();
     var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
-
     switch (token) {
       // Numerical value (Nth day of week with current locale or weekStartsOn)
       case 'e':
         return String(localDayOfWeek);
       // Padded numerical value
-
       case 'ee':
         return addLeadingZeros(localDayOfWeek, 2);
       // 1st, 2nd, ..., 7th
-
       case 'eo':
         return localize.ordinalNumber(localDayOfWeek, {
           unit: 'day'
         });
-
       case 'eee':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // T
-
       case 'eeeee':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'eeeeee':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'eeee':
       default:
         return localize.day(dayOfWeek, {
@@ -5171,46 +4592,39 @@ var formatters = {
     }
   },
   // Stand-alone local day of week
-  c: function (date, token, localize, options) {
+  c: function c(date, token, localize, options) {
     var dayOfWeek = date.getUTCDay();
     var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
-
     switch (token) {
       // Numerical value (same as in `e`)
       case 'c':
         return String(localDayOfWeek);
       // Padded numerical value
-
       case 'cc':
         return addLeadingZeros(localDayOfWeek, token.length);
       // 1st, 2nd, ..., 7th
-
       case 'co':
         return localize.ordinalNumber(localDayOfWeek, {
           unit: 'day'
         });
-
       case 'ccc':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // T
-
       case 'ccccc':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'standalone'
         });
       // Tu
-
       case 'cccccc':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'standalone'
         });
       // Tuesday
-
       case 'cccc':
       default:
         return localize.day(dayOfWeek, {
@@ -5220,47 +4634,40 @@ var formatters = {
     }
   },
   // ISO day of week
-  i: function (date, token, localize) {
+  i: function i(date, token, localize) {
     var dayOfWeek = date.getUTCDay();
     var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
-
     switch (token) {
       // 2
       case 'i':
         return String(isoDayOfWeek);
       // 02
-
       case 'ii':
         return addLeadingZeros(isoDayOfWeek, token.length);
       // 2nd
-
       case 'io':
         return localize.ordinalNumber(isoDayOfWeek, {
           unit: 'day'
         });
       // Tue
-
       case 'iii':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // T
-
       case 'iiiii':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'iiiiii':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'iiii':
       default:
         return localize.day(dayOfWeek, {
@@ -5270,10 +4677,9 @@ var formatters = {
     }
   },
   // AM or PM
-  a: function (date, token, localize) {
+  a: function a(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
-
     switch (token) {
       case 'a':
       case 'aa':
@@ -5281,19 +4687,16 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'aaa':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'abbreviated',
           context: 'formatting'
         }).toLowerCase();
-
       case 'aaaaa':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'aaaa':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5303,10 +4706,9 @@ var formatters = {
     }
   },
   // AM, PM, midnight, noon
-  b: function (date, token, localize) {
+  b: function b(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue;
-
     if (hours === 12) {
       dayPeriodEnumValue = dayPeriodEnum.noon;
     } else if (hours === 0) {
@@ -5314,7 +4716,6 @@ var formatters = {
     } else {
       dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
     }
-
     switch (token) {
       case 'b':
       case 'bb':
@@ -5322,19 +4723,16 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'bbb':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'abbreviated',
           context: 'formatting'
         }).toLowerCase();
-
       case 'bbbbb':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'bbbb':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5344,10 +4742,9 @@ var formatters = {
     }
   },
   // in the morning, in the afternoon, in the evening, at night
-  B: function (date, token, localize) {
+  B: function B(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue;
-
     if (hours >= 17) {
       dayPeriodEnumValue = dayPeriodEnum.evening;
     } else if (hours >= 12) {
@@ -5357,7 +4754,6 @@ var formatters = {
     } else {
       dayPeriodEnumValue = dayPeriodEnum.night;
     }
-
     switch (token) {
       case 'B':
       case 'BB':
@@ -5366,13 +4762,11 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'BBBBB':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'BBBB':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5382,7 +4776,7 @@ var formatters = {
     }
   },
   // Hour [1-12]
-  h: function (date, token, localize) {
+  h: function h(date, token, localize) {
     if (token === 'ho') {
       var hours = date.getUTCHours() % 12;
       if (hours === 0) hours = 12;
@@ -5390,133 +4784,119 @@ var formatters = {
         unit: 'hour'
       });
     }
-
     return formatters$3.h(date, token);
   },
   // Hour [0-23]
-  H: function (date, token, localize) {
+  H: function H(date, token, localize) {
     if (token === 'Ho') {
       return localize.ordinalNumber(date.getUTCHours(), {
         unit: 'hour'
       });
     }
-
     return formatters$3.H(date, token);
   },
   // Hour [0-11]
-  K: function (date, token, localize) {
+  K: function K(date, token, localize) {
     var hours = date.getUTCHours() % 12;
-
     if (token === 'Ko') {
       return localize.ordinalNumber(hours, {
         unit: 'hour'
       });
     }
-
     return addLeadingZeros(hours, token.length);
   },
   // Hour [1-24]
-  k: function (date, token, localize) {
+  k: function k(date, token, localize) {
     var hours = date.getUTCHours();
     if (hours === 0) hours = 24;
-
     if (token === 'ko') {
       return localize.ordinalNumber(hours, {
         unit: 'hour'
       });
     }
-
     return addLeadingZeros(hours, token.length);
   },
   // Minute
-  m: function (date, token, localize) {
+  m: function m(date, token, localize) {
     if (token === 'mo') {
       return localize.ordinalNumber(date.getUTCMinutes(), {
         unit: 'minute'
       });
     }
-
     return formatters$3.m(date, token);
   },
   // Second
-  s: function (date, token, localize) {
+  s: function s(date, token, localize) {
     if (token === 'so') {
       return localize.ordinalNumber(date.getUTCSeconds(), {
         unit: 'second'
       });
     }
-
     return formatters$3.s(date, token);
   },
   // Fraction of second
-  S: function (date, token) {
+  S: function S(date, token) {
     return formatters$3.S(date, token);
   },
   // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
-  X: function (date, token, _localize, options) {
+  X: function X(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     if (timezoneOffset === 0) {
       return 'Z';
     }
-
     switch (token) {
       // Hours and optional minutes
       case 'X':
         return formatTimezoneWithOptionalMinutes(timezoneOffset);
+
       // Hours, minutes and optional seconds without `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `XX`
-
       case 'XXXX':
       case 'XX':
         // Hours and minutes without `:` delimiter
         return formatTimezone(timezoneOffset);
+
       // Hours, minutes and optional seconds with `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `XXX`
-
       case 'XXXXX':
       case 'XXX': // Hours and minutes with `:` delimiter
-
       default:
         return formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
-  x: function (date, token, _localize, options) {
+  x: function x(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Hours and optional minutes
       case 'x':
         return formatTimezoneWithOptionalMinutes(timezoneOffset);
+
       // Hours, minutes and optional seconds without `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `xx`
-
       case 'xxxx':
       case 'xx':
         // Hours and minutes without `:` delimiter
         return formatTimezone(timezoneOffset);
+
       // Hours, minutes and optional seconds with `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `xxx`
-
       case 'xxxxx':
       case 'xxx': // Hours and minutes with `:` delimiter
-
       default:
         return formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (GMT)
-  O: function (date, token, _localize, options) {
+  O: function O(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Short
       case 'O':
@@ -5524,17 +4904,15 @@ var formatters = {
       case 'OOO':
         return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
       // Long
-
       case 'OOOO':
       default:
         return 'GMT' + formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (specific non-location)
-  z: function (date, token, _localize, options) {
+  z: function z(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Short
       case 'z':
@@ -5542,49 +4920,42 @@ var formatters = {
       case 'zzz':
         return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
       // Long
-
       case 'zzzz':
       default:
         return 'GMT' + formatTimezone(timezoneOffset, ':');
     }
   },
   // Seconds timestamp
-  t: function (date, token, _localize, options) {
+  t: function t(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timestamp = Math.floor(originalDate.getTime() / 1000);
     return addLeadingZeros(timestamp, token.length);
   },
   // Milliseconds timestamp
-  T: function (date, token, _localize, options) {
+  T: function T(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timestamp = originalDate.getTime();
     return addLeadingZeros(timestamp, token.length);
   }
 };
-
 function formatTimezoneShort(offset, dirtyDelimiter) {
   var sign = offset > 0 ? '-' : '+';
   var absOffset = Math.abs(offset);
   var hours = Math.floor(absOffset / 60);
   var minutes = absOffset % 60;
-
   if (minutes === 0) {
     return sign + String(hours);
   }
-
   var delimiter = dirtyDelimiter || '';
   return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
 }
-
 function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
   if (offset % 60 === 0) {
     var sign = offset > 0 ? '-' : '+';
     return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
   }
-
   return formatTimezone(offset, dirtyDelimiter);
 }
-
 function formatTimezone(offset, dirtyDelimiter) {
   var delimiter = dirtyDelimiter || '';
   var sign = offset > 0 ? '-' : '+';
@@ -5593,125 +4964,592 @@ function formatTimezone(offset, dirtyDelimiter) {
   var minutes = addLeadingZeros(absOffset % 60, 2);
   return sign + hours + delimiter + minutes;
 }
-
 var formatters$1 = formatters;
 
-function dateLongFormatter(pattern, formatLong) {
+var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
   switch (pattern) {
     case 'P':
       return formatLong.date({
         width: 'short'
       });
-
     case 'PP':
       return formatLong.date({
         width: 'medium'
       });
-
     case 'PPP':
       return formatLong.date({
         width: 'long'
       });
-
     case 'PPPP':
     default:
       return formatLong.date({
         width: 'full'
       });
   }
-}
-
-function timeLongFormatter(pattern, formatLong) {
+};
+var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
   switch (pattern) {
     case 'p':
       return formatLong.time({
         width: 'short'
       });
+    case 'pp':
+      return formatLong.time({
+        width: 'medium'
+      });
+    case 'ppp':
+      return formatLong.time({
+        width: 'long'
+      });
+    case 'pppp':
+    default:
+      return formatLong.time({
+        width: 'full'
+      });
+  }
+};
+var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
+  var matchResult = pattern.match(/(P+)(p+)?/) || [];
+  var datePattern = matchResult[1];
+  var timePattern = matchResult[2];
+  if (!timePattern) {
+    return dateLongFormatter(pattern, formatLong);
+  }
+  var dateTimeFormat;
+  switch (datePattern) {
+    case 'P':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'short'
+      });
+      break;
+    case 'PP':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'medium'
+      });
+      break;
+    case 'PPP':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'long'
+      });
+      break;
+    case 'PPPP':
+    default:
+      dateTimeFormat = formatLong.dateTime({
+        width: 'full'
+      });
+      break;
+  }
+  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
+};
+var longFormatters = {
+  p: timeLongFormatter,
+  P: dateTimeLongFormatter
+};
+var longFormatters$1 = longFormatters;
+
+var protectedDayOfYearTokens = ['D', 'DD'];
+var protectedWeekYearTokens = ['YY', 'YYYY'];
+function isProtectedDayOfYearToken(token) {
+  return protectedDayOfYearTokens.indexOf(token) !== -1;
+}
+function isProtectedWeekYearToken(token) {
+  return protectedWeekYearTokens.indexOf(token) !== -1;
+}
+function throwProtectedError(token, format, input) {
+  if (token === 'YYYY') {
+    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'YY') {
+    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'D') {
+    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'DD') {
+    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  }
+}
+
+var formatDistanceLocale = {
+  lessThanXSeconds: {
+    one: 'less than a second',
+    other: 'less than {{count}} seconds'
+  },
+  xSeconds: {
+    one: '1 second',
+    other: '{{count}} seconds'
+  },
+  halfAMinute: 'half a minute',
+  lessThanXMinutes: {
+    one: 'less than a minute',
+    other: 'less than {{count}} minutes'
+  },
+  xMinutes: {
+    one: '1 minute',
+    other: '{{count}} minutes'
+  },
+  aboutXHours: {
+    one: 'about 1 hour',
+    other: 'about {{count}} hours'
+  },
+  xHours: {
+    one: '1 hour',
+    other: '{{count}} hours'
+  },
+  xDays: {
+    one: '1 day',
+    other: '{{count}} days'
+  },
+  aboutXWeeks: {
+    one: 'about 1 week',
+    other: 'about {{count}} weeks'
+  },
+  xWeeks: {
+    one: '1 week',
+    other: '{{count}} weeks'
+  },
+  aboutXMonths: {
+    one: 'about 1 month',
+    other: 'about {{count}} months'
+  },
+  xMonths: {
+    one: '1 month',
+    other: '{{count}} months'
+  },
+  aboutXYears: {
+    one: 'about 1 year',
+    other: 'about {{count}} years'
+  },
+  xYears: {
+    one: '1 year',
+    other: '{{count}} years'
+  },
+  overXYears: {
+    one: 'over 1 year',
+    other: 'over {{count}} years'
+  },
+  almostXYears: {
+    one: 'almost 1 year',
+    other: 'almost {{count}} years'
+  }
+};
+var formatDistance = function formatDistance(token, count, options) {
+  var result;
+  var tokenValue = formatDistanceLocale[token];
+  if (typeof tokenValue === 'string') {
+    result = tokenValue;
+  } else if (count === 1) {
+    result = tokenValue.one;
+  } else {
+    result = tokenValue.other.replace('{{count}}', count.toString());
+  }
+  if (options !== null && options !== void 0 && options.addSuffix) {
+    if (options.comparison && options.comparison > 0) {
+      return 'in ' + result;
+    } else {
+      return result + ' ago';
+    }
+  }
+  return result;
+};
+var formatDistance$1 = formatDistance;
+
+function buildFormatLongFn(args) {
+  return function () {
+    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
+    // TODO: Remove String()
+    var width = options.width ? String(options.width) : args.defaultWidth;
+    var format = args.formats[width] || args.formats[args.defaultWidth];
+    return format;
+  };
+}
 
-    case 'pp':
-      return formatLong.time({
-        width: 'medium'
-      });
+var dateFormats = {
+  full: 'EEEE, MMMM do, y',
+  long: 'MMMM do, y',
+  medium: 'MMM d, y',
+  short: 'MM/dd/yyyy'
+};
+var timeFormats = {
+  full: 'h:mm:ss a zzzz',
+  long: 'h:mm:ss a z',
+  medium: 'h:mm:ss a',
+  short: 'h:mm a'
+};
+var dateTimeFormats = {
+  full: "{{date}} 'at' {{time}}",
+  long: "{{date}} 'at' {{time}}",
+  medium: '{{date}}, {{time}}',
+  short: '{{date}}, {{time}}'
+};
+var formatLong = {
+  date: buildFormatLongFn({
+    formats: dateFormats,
+    defaultWidth: 'full'
+  }),
+  time: buildFormatLongFn({
+    formats: timeFormats,
+    defaultWidth: 'full'
+  }),
+  dateTime: buildFormatLongFn({
+    formats: dateTimeFormats,
+    defaultWidth: 'full'
+  })
+};
+var formatLong$1 = formatLong;
 
-    case 'ppp':
-      return formatLong.time({
-        width: 'long'
-      });
+var formatRelativeLocale = {
+  lastWeek: "'last' eeee 'at' p",
+  yesterday: "'yesterday at' p",
+  today: "'today at' p",
+  tomorrow: "'tomorrow at' p",
+  nextWeek: "eeee 'at' p",
+  other: 'P'
+};
+var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
+  return formatRelativeLocale[token];
+};
+var formatRelative$1 = formatRelative;
 
-    case 'pppp':
-    default:
-      return formatLong.time({
-        width: 'full'
-      });
-  }
+function buildLocalizeFn(args) {
+  return function (dirtyIndex, options) {
+    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
+    var valuesArray;
+    if (context === 'formatting' && args.formattingValues) {
+      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
+      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
+      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
+    } else {
+      var _defaultWidth = args.defaultWidth;
+      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
+      valuesArray = args.values[_width] || args.values[_defaultWidth];
+    }
+    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
+    // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
+    return valuesArray[index];
+  };
 }
 
-function dateTimeLongFormatter(pattern, formatLong) {
-  var matchResult = pattern.match(/(P+)(p+)?/) || [];
-  var datePattern = matchResult[1];
-  var timePattern = matchResult[2];
+var eraValues = {
+  narrow: ['B', 'A'],
+  abbreviated: ['BC', 'AD'],
+  wide: ['Before Christ', 'Anno Domini']
+};
+var quarterValues = {
+  narrow: ['1', '2', '3', '4'],
+  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
+  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
+};
 
-  if (!timePattern) {
-    return dateLongFormatter(pattern, formatLong);
+// Note: in English, the names of days of the week and months are capitalized.
+// If you are making a new locale based on this one, check if the same is true for the language you're working on.
+// Generally, formatted dates should look like they are in the middle of a sentence,
+// e.g. in Spanish language the weekdays and months should be in the lowercase.
+var monthValues = {
+  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
+  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
+};
+var dayValues = {
+  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
+  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
+  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
+  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
+};
+var dayPeriodValues = {
+  narrow: {
+    am: 'a',
+    pm: 'p',
+    midnight: 'mi',
+    noon: 'n',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
+  },
+  abbreviated: {
+    am: 'AM',
+    pm: 'PM',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
+  },
+  wide: {
+    am: 'a.m.',
+    pm: 'p.m.',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
   }
+};
+var formattingDayPeriodValues = {
+  narrow: {
+    am: 'a',
+    pm: 'p',
+    midnight: 'mi',
+    noon: 'n',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  },
+  abbreviated: {
+    am: 'AM',
+    pm: 'PM',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  },
+  wide: {
+    am: 'a.m.',
+    pm: 'p.m.',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  }
+};
+var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
+  var number = Number(dirtyNumber);
 
-  var dateTimeFormat;
-
-  switch (datePattern) {
-    case 'P':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'short'
-      });
-      break;
-
-    case 'PP':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'medium'
-      });
-      break;
+  // If ordinal numbers depend on context, for example,
+  // if they are different for different grammatical genders,
+  // use `options.unit`.
+  //
+  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
+  // 'day', 'hour', 'minute', 'second'.
 
-    case 'PPP':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'long'
-      });
-      break;
+  var rem100 = number % 100;
+  if (rem100 > 20 || rem100 < 10) {
+    switch (rem100 % 10) {
+      case 1:
+        return number + 'st';
+      case 2:
+        return number + 'nd';
+      case 3:
+        return number + 'rd';
+    }
+  }
+  return number + 'th';
+};
+var localize = {
+  ordinalNumber: ordinalNumber,
+  era: buildLocalizeFn({
+    values: eraValues,
+    defaultWidth: 'wide'
+  }),
+  quarter: buildLocalizeFn({
+    values: quarterValues,
+    defaultWidth: 'wide',
+    argumentCallback: function argumentCallback(quarter) {
+      return quarter - 1;
+    }
+  }),
+  month: buildLocalizeFn({
+    values: monthValues,
+    defaultWidth: 'wide'
+  }),
+  day: buildLocalizeFn({
+    values: dayValues,
+    defaultWidth: 'wide'
+  }),
+  dayPeriod: buildLocalizeFn({
+    values: dayPeriodValues,
+    defaultWidth: 'wide',
+    formattingValues: formattingDayPeriodValues,
+    defaultFormattingWidth: 'wide'
+  })
+};
+var localize$1 = localize;
 
-    case 'PPPP':
-    default:
-      dateTimeFormat = formatLong.dateTime({
-        width: 'full'
-      });
-      break;
+function buildMatchFn(args) {
+  return function (string) {
+    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+    var width = options.width;
+    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
+    var matchResult = string.match(matchPattern);
+    if (!matchResult) {
+      return null;
+    }
+    var matchedString = matchResult[0];
+    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
+    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
+      return pattern.test(matchedString);
+    }) : findKey(parsePatterns, function (pattern) {
+      return pattern.test(matchedString);
+    });
+    var value;
+    value = args.valueCallback ? args.valueCallback(key) : key;
+    value = options.valueCallback ? options.valueCallback(value) : value;
+    var rest = string.slice(matchedString.length);
+    return {
+      value: value,
+      rest: rest
+    };
+  };
+}
+function findKey(object, predicate) {
+  for (var key in object) {
+    if (object.hasOwnProperty(key) && predicate(object[key])) {
+      return key;
+    }
+  }
+  return undefined;
+}
+function findIndex(array, predicate) {
+  for (var key = 0; key < array.length; key++) {
+    if (predicate(array[key])) {
+      return key;
+    }
   }
+  return undefined;
+}
 
-  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
+function buildMatchPatternFn(args) {
+  return function (string) {
+    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+    var matchResult = string.match(args.matchPattern);
+    if (!matchResult) return null;
+    var matchedString = matchResult[0];
+    var parseResult = string.match(args.parsePattern);
+    if (!parseResult) return null;
+    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
+    value = options.valueCallback ? options.valueCallback(value) : value;
+    var rest = string.slice(matchedString.length);
+    return {
+      value: value,
+      rest: rest
+    };
+  };
 }
 
-var longFormatters = {
-  p: timeLongFormatter,
-  P: dateTimeLongFormatter
+var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
+var parseOrdinalNumberPattern = /\d+/i;
+var matchEraPatterns = {
+  narrow: /^(b|a)/i,
+  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
+  wide: /^(before christ|before common era|anno domini|common era)/i
 };
-var longFormatters$1 = longFormatters;
+var parseEraPatterns = {
+  any: [/^b/i, /^(a|c)/i]
+};
+var matchQuarterPatterns = {
+  narrow: /^[1234]/i,
+  abbreviated: /^q[1234]/i,
+  wide: /^[1234](th|st|nd|rd)? quarter/i
+};
+var parseQuarterPatterns = {
+  any: [/1/i, /2/i, /3/i, /4/i]
+};
+var matchMonthPatterns = {
+  narrow: /^[jfmasond]/i,
+  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
+  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
+};
+var parseMonthPatterns = {
+  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
+  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
+};
+var matchDayPatterns = {
+  narrow: /^[smtwf]/i,
+  short: /^(su|mo|tu|we|th|fr|sa)/i,
+  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
+  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
+};
+var parseDayPatterns = {
+  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
+  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
+};
+var matchDayPeriodPatterns = {
+  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
+  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
+};
+var parseDayPeriodPatterns = {
+  any: {
+    am: /^a/i,
+    pm: /^p/i,
+    midnight: /^mi/i,
+    noon: /^no/i,
+    morning: /morning/i,
+    afternoon: /afternoon/i,
+    evening: /evening/i,
+    night: /night/i
+  }
+};
+var match = {
+  ordinalNumber: buildMatchPatternFn({
+    matchPattern: matchOrdinalNumberPattern,
+    parsePattern: parseOrdinalNumberPattern,
+    valueCallback: function valueCallback(value) {
+      return parseInt(value, 10);
+    }
+  }),
+  era: buildMatchFn({
+    matchPatterns: matchEraPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseEraPatterns,
+    defaultParseWidth: 'any'
+  }),
+  quarter: buildMatchFn({
+    matchPatterns: matchQuarterPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseQuarterPatterns,
+    defaultParseWidth: 'any',
+    valueCallback: function valueCallback(index) {
+      return index + 1;
+    }
+  }),
+  month: buildMatchFn({
+    matchPatterns: matchMonthPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseMonthPatterns,
+    defaultParseWidth: 'any'
+  }),
+  day: buildMatchFn({
+    matchPatterns: matchDayPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseDayPatterns,
+    defaultParseWidth: 'any'
+  }),
+  dayPeriod: buildMatchFn({
+    matchPatterns: matchDayPeriodPatterns,
+    defaultMatchWidth: 'any',
+    parsePatterns: parseDayPeriodPatterns,
+    defaultParseWidth: 'any'
+  })
+};
+var match$1 = match;
 
-var protectedDayOfYearTokens = ['D', 'DD'];
-var protectedWeekYearTokens = ['YY', 'YYYY'];
-function isProtectedDayOfYearToken(token) {
-  return protectedDayOfYearTokens.indexOf(token) !== -1;
-}
-function isProtectedWeekYearToken(token) {
-  return protectedWeekYearTokens.indexOf(token) !== -1;
-}
-function throwProtectedError(token, format, input) {
-  if (token === 'YYYY') {
-    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'YY') {
-    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'D') {
-    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'DD') {
-    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
+/**
+ * @type {Locale}
+ * @category Locales
+ * @summary English locale (United States).
+ * @language English
+ * @iso-639-2 eng
+ * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
+ * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
+ */
+var locale = {
+  code: 'en-US',
+  formatDistance: formatDistance$1,
+  formatLong: formatLong$1,
+  formatRelative: formatRelative$1,
+  localize: localize$1,
+  match: match$1,
+  options: {
+    weekStartsOn: 0 /* Sunday */,
+    firstWeekContainsDate: 1
   }
-}
+};
+var defaultLocale = locale;
 
 // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
 //   (one of the certain letters followed by `o`)
@@ -5723,14 +5561,15 @@ function throwProtectedError(token, format, input) {
 //   If there is no matching single quote
 //   then the sequence will continue until the end of the string.
 // - . matches any single character unmatched by previous parts of the RegExps
+var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
 
-var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
+// This RegExp catches symbols escaped by quotes, and also
 // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
-
 var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
 var escapedStringRegExp$1 = /^'([^]*?)'?$/;
 var doubleQuoteRegExp$1 = /''/g;
 var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
+
 /**
  * @name format
  * @category Common Helpers
@@ -5740,7 +5579,7 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * Return the formatted date string in the given format. The result may vary by locale.
  *
  * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
- * > See: https://git.io/fxCyr
+ * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * The characters wrapped between two single quotes characters (') are escaped.
  * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
@@ -5976,30 +5815,10 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  *    - `p`: long localized time
  *
  * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
- *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
- *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - The second argument is now required for the sake of explicitness.
- *
- *   ```javascript
- *   // Before v2.0.0
- *   format(new Date(2016, 0, 1))
- *
- *   // v2.0.0 onward
- *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
- *   ```
- *
- * - New format string API for `format` function
- *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
- *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
- *
- * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
+ *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * @param {Date|Number} date - the original date
  * @param {String} format - the string of tokens
@@ -6008,9 +5827,9 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
  * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
  * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @returns {String} the formatted date string
  * @throws {TypeError} 2 arguments required
  * @throws {RangeError} `date` must not be Invalid Date
@@ -6018,69 +5837,63 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * @throws {RangeError} `options.locale` must contain `formatLong` property
  * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
  * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
- * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
+ * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @throws {RangeError} format string contains an unescaped latin alphabet character
  *
  * @example
  * // Represent 11 February 2014 in middle-endian format:
- * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
+ * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
  * //=> '02/11/2014'
  *
  * @example
  * // Represent 2 July 2014 in Esperanto:
  * import { eoLocale } from 'date-fns/locale/eo'
- * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
+ * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
  *   locale: eoLocale
  * })
  * //=> '2-a de julio 2014'
  *
  * @example
  * // Escape string by single quote characters:
- * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
+ * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
  * //=> "3 o'clock"
  */
 
-function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
+function format(dirtyDate, dirtyFormatStr, options) {
+  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
   requiredArgs(2, arguments);
   var formatStr = String(dirtyFormatStr);
-  var options = dirtyOptions || {};
-  var locale = options.locale || defaultLocale;
-  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
+  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
 
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
+  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
 
-  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
-
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   if (!locale.localize) {
     throw new RangeError('locale must contain localize property');
   }
-
   if (!locale.formatLong) {
     throw new RangeError('locale must contain formatLong property');
   }
-
   var originalDate = toDate(dirtyDate);
-
   if (!isValid(originalDate)) {
     throw new RangeError('Invalid time value');
-  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
+  }
+
+  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
   // This ensures that when UTC functions will be implemented, locales will be compatible with them.
   // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
-
-
   var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
   var utcDate = subMilliseconds(originalDate, timezoneOffset);
   var formatterOptions = {
@@ -6091,137 +5904,376 @@ function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
   };
   var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
     var firstCharacter = substring[0];
-
     if (firstCharacter === 'p' || firstCharacter === 'P') {
       var longFormatter = longFormatters$1[firstCharacter];
-      return longFormatter(substring, locale.formatLong, formatterOptions);
+      return longFormatter(substring, locale.formatLong);
     }
-
     return substring;
   }).join('').match(formattingTokensRegExp$1).map(function (substring) {
     // Replace two single quote characters with one single quote character
     if (substring === "''") {
       return "'";
     }
-
     var firstCharacter = substring[0];
-
     if (firstCharacter === "'") {
       return cleanEscapedString$1(substring);
     }
-
     var formatter = formatters$1[firstCharacter];
-
     if (formatter) {
-      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
-        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
+      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
+        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
       }
-
-      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
-        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
+      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
+        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
       }
-
       return formatter(utcDate, substring, locale.localize, formatterOptions);
     }
-
     if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
       throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
     }
-
     return substring;
   }).join('');
   return result;
 }
-
 function cleanEscapedString$1(input) {
-  return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1, "'");
+  var matched = input.match(escapedStringRegExp$1);
+  if (!matched) {
+    return input;
+  }
+  return matched[1].replace(doubleQuoteRegExp$1, "'");
 }
 
-function assign(target, dirtyObject) {
+function assign(target, object) {
   if (target == null) {
     throw new TypeError('assign requires that input parameter not be null or undefined');
   }
-
-  dirtyObject = dirtyObject || {};
-
-  for (var property in dirtyObject) {
-    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
-      target[property] = dirtyObject[property];
+  for (var property in object) {
+    if (Object.prototype.hasOwnProperty.call(object, property)) {
+      target[property] = object[property];
     }
   }
-
   return target;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _arrayLikeToArray(r, a) {
+  (null == a || a > r.length) && (a = r.length);
+  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
+  return n;
+}
 
-function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
-  requiredArgs(2, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+function _unsupportedIterableToArray(r, a) {
+  if (r) {
+    if ("string" == typeof r) return _arrayLikeToArray(r, a);
+    var t = {}.toString.call(r).slice(8, -1);
+    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
+  }
+}
 
-  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
-    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
+function _createForOfIteratorHelper(r, e) {
+  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
+  if (!t) {
+    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
+      t && (r = t);
+      var _n = 0,
+        F = function F() {};
+      return {
+        s: F,
+        n: function n() {
+          return _n >= r.length ? {
+            done: !0
+          } : {
+            done: !1,
+            value: r[_n++]
+          };
+        },
+        e: function e(r) {
+          throw r;
+        },
+        f: F
+      };
+    }
+    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
   }
+  var o,
+    a = !0,
+    u = !1;
+  return {
+    s: function s() {
+      t = t.call(r);
+    },
+    n: function n() {
+      var r = t.next();
+      return a = r.done, r;
+    },
+    e: function e(r) {
+      u = !0, o = r;
+    },
+    f: function f() {
+      try {
+        a || null == t["return"] || t["return"]();
+      } finally {
+        if (u) throw o;
+      }
+    }
+  };
+}
 
-  var date = toDate(dirtyDate);
-  var day = toInteger(dirtyDay);
-  var currentDay = date.getUTCDay();
-  var remainder = day % 7;
-  var dayIndex = (remainder + 7) % 7;
-  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
-  date.setUTCDate(date.getUTCDate() + diff);
-  return date;
+function _assertThisInitialized(e) {
+  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
+  return e;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _setPrototypeOf(t, e) {
+  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
+    return t.__proto__ = e, t;
+  }, _setPrototypeOf(t, e);
+}
 
-function setUTCISODay(dirtyDate, dirtyDay) {
-  requiredArgs(2, arguments);
-  var day = toInteger(dirtyDay);
+function _inherits(t, e) {
+  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
+  t.prototype = Object.create(e && e.prototype, {
+    constructor: {
+      value: t,
+      writable: !0,
+      configurable: !0
+    }
+  }), Object.defineProperty(t, "prototype", {
+    writable: !1
+  }), e && _setPrototypeOf(t, e);
+}
 
-  if (day % 7 === 0) {
-    day = day - 7;
-  }
+function _getPrototypeOf(t) {
+  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
+    return t.__proto__ || Object.getPrototypeOf(t);
+  }, _getPrototypeOf(t);
+}
 
-  var weekStartsOn = 1;
-  var date = toDate(dirtyDate);
-  var currentDay = date.getUTCDay();
-  var remainder = day % 7;
-  var dayIndex = (remainder + 7) % 7;
-  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
-  date.setUTCDate(date.getUTCDate() + diff);
-  return date;
+function _isNativeReflectConstruct() {
+  try {
+    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
+  } catch (t) {}
+  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
+    return !!t;
+  })();
+}
+
+function _possibleConstructorReturn(t, e) {
+  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
+  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
+  return _assertThisInitialized(t);
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _createSuper(t) {
+  var r = _isNativeReflectConstruct();
+  return function () {
+    var e,
+      o = _getPrototypeOf(t);
+    if (r) {
+      var s = _getPrototypeOf(this).constructor;
+      e = Reflect.construct(o, arguments, s);
+    } else e = o.apply(this, arguments);
+    return _possibleConstructorReturn(this, e);
+  };
+}
+
+function _classCallCheck(a, n) {
+  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
+}
+
+function toPrimitive(t, r) {
+  if ("object" != _typeof(t) || !t) return t;
+  var e = t[Symbol.toPrimitive];
+  if (void 0 !== e) {
+    var i = e.call(t, r || "default");
+    if ("object" != _typeof(i)) return i;
+    throw new TypeError("@@toPrimitive must return a primitive value.");
+  }
+  return ("string" === r ? String : Number)(t);
+}
 
-function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
-  requiredArgs(2, arguments);
-  var date = toDate(dirtyDate);
-  var isoWeek = toInteger(dirtyISOWeek);
-  var diff = getUTCISOWeek(date) - isoWeek;
-  date.setUTCDate(date.getUTCDate() - diff * 7);
-  return date;
+function toPropertyKey(t) {
+  var i = toPrimitive(t, "string");
+  return "symbol" == _typeof(i) ? i : i + "";
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _defineProperties(e, r) {
+  for (var t = 0; t < r.length; t++) {
+    var o = r[t];
+    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
+  }
+}
+function _createClass(e, r, t) {
+  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
+    writable: !1
+  }), e;
+}
 
-function setUTCWeek(dirtyDate, dirtyWeek, options) {
-  requiredArgs(2, arguments);
-  var date = toDate(dirtyDate);
-  var week = toInteger(dirtyWeek);
-  var diff = getUTCWeek(date, options) - week;
-  date.setUTCDate(date.getUTCDate() - diff * 7);
-  return date;
+function _defineProperty(e, r, t) {
+  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
+    value: t,
+    enumerable: !0,
+    configurable: !0,
+    writable: !0
+  }) : e[r] = t, e;
 }
 
-var MILLISECONDS_IN_HOUR = 3600000;
-var MILLISECONDS_IN_MINUTE = 60000;
-var MILLISECONDS_IN_SECOND = 1000;
+var TIMEZONE_UNIT_PRIORITY = 10;
+var Setter = /*#__PURE__*/function () {
+  function Setter() {
+    _classCallCheck(this, Setter);
+    _defineProperty(this, "priority", void 0);
+    _defineProperty(this, "subPriority", 0);
+  }
+  _createClass(Setter, [{
+    key: "validate",
+    value: function validate(_utcDate, _options) {
+      return true;
+    }
+  }]);
+  return Setter;
+}();
+var ValueSetter = /*#__PURE__*/function (_Setter) {
+  _inherits(ValueSetter, _Setter);
+  var _super = _createSuper(ValueSetter);
+  function ValueSetter(value, validateValue, setValue, priority, subPriority) {
+    var _this;
+    _classCallCheck(this, ValueSetter);
+    _this = _super.call(this);
+    _this.value = value;
+    _this.validateValue = validateValue;
+    _this.setValue = setValue;
+    _this.priority = priority;
+    if (subPriority) {
+      _this.subPriority = subPriority;
+    }
+    return _this;
+  }
+  _createClass(ValueSetter, [{
+    key: "validate",
+    value: function validate(utcDate, options) {
+      return this.validateValue(utcDate, this.value, options);
+    }
+  }, {
+    key: "set",
+    value: function set(utcDate, flags, options) {
+      return this.setValue(utcDate, flags, this.value, options);
+    }
+  }]);
+  return ValueSetter;
+}(Setter);
+var DateToSystemTimezoneSetter = /*#__PURE__*/function (_Setter2) {
+  _inherits(DateToSystemTimezoneSetter, _Setter2);
+  var _super2 = _createSuper(DateToSystemTimezoneSetter);
+  function DateToSystemTimezoneSetter() {
+    var _this2;
+    _classCallCheck(this, DateToSystemTimezoneSetter);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this2 = _super2.call.apply(_super2, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
+    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
+    return _this2;
+  }
+  _createClass(DateToSystemTimezoneSetter, [{
+    key: "set",
+    value: function set(date, flags) {
+      if (flags.timestampIsSet) {
+        return date;
+      }
+      var convertedDate = new Date(0);
+      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
+      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
+      return convertedDate;
+    }
+  }]);
+  return DateToSystemTimezoneSetter;
+}(Setter);
+
+var Parser = /*#__PURE__*/function () {
+  function Parser() {
+    _classCallCheck(this, Parser);
+    _defineProperty(this, "incompatibleTokens", void 0);
+    _defineProperty(this, "priority", void 0);
+    _defineProperty(this, "subPriority", void 0);
+  }
+  _createClass(Parser, [{
+    key: "run",
+    value: function run(dateString, token, match, options) {
+      var result = this.parse(dateString, token, match, options);
+      if (!result) {
+        return null;
+      }
+      return {
+        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
+        rest: result.rest
+      };
+    }
+  }, {
+    key: "validate",
+    value: function validate(_utcDate, _value, _options) {
+      return true;
+    }
+  }]);
+  return Parser;
+}();
+
+var EraParser = /*#__PURE__*/function (_Parser) {
+  _inherits(EraParser, _Parser);
+  var _super = _createSuper(EraParser);
+  function EraParser() {
+    var _this;
+    _classCallCheck(this, EraParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 140);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
+    return _this;
+  }
+  _createClass(EraParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      switch (token) {
+        // AD, BC
+        case 'G':
+        case 'GG':
+        case 'GGG':
+          return match.era(dateString, {
+            width: 'abbreviated'
+          }) || match.era(dateString, {
+            width: 'narrow'
+          });
+        // A, B
+        case 'GGGGG':
+          return match.era(dateString, {
+            width: 'narrow'
+          });
+        // Anno Domini, Before Christ
+        case 'GGGG':
+        default:
+          return match.era(dateString, {
+            width: 'wide'
+          }) || match.era(dateString, {
+            width: 'abbreviated'
+          }) || match.era(dateString, {
+            width: 'narrow'
+          });
+      }
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
+      flags.era = value;
+      date.setUTCFullYear(value, 0, 1);
+      date.setUTCHours(0, 0, 0, 0);
+      return date;
+    }
+  }]);
+  return EraParser;
+}(Parser);
+
 var numericPatterns = {
   month: /^(1[0-2]|0?\d)/,
   // 0 to 12
@@ -6243,6 +6295,7 @@ var numericPatterns = {
   // 0 to 59
   second: /^[0-5]?\d/,
   // 0 to 59
+
   singleDigit: /^\d/,
   // 0 to 9
   twoDigits: /^\d{1,2}/,
@@ -6251,6 +6304,7 @@ var numericPatterns = {
   // 0 to 999
   fourDigits: /^\d{1,4}/,
   // 0 to 9999
+
   anyDigitsSigned: /^-?\d+/,
   singleDigitSigned: /^-?\d/,
   // 0 to 9, -0 to -9
@@ -6259,8 +6313,8 @@ var numericPatterns = {
   threeDigitsSigned: /^-?\d{1,3}/,
   // 0 to 999, -0 to -999
   fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
-
 };
+
 var timezonePatterns = {
   basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
   basic: /^([+-])(\d{2})(\d{2})|Z/,
@@ -6269,100 +6323,88 @@ var timezonePatterns = {
   extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
 };
 
-function parseNumericPattern(pattern, string, valueCallback) {
-  var matchResult = string.match(pattern);
-
+function mapValue(parseFnResult, mapFn) {
+  if (!parseFnResult) {
+    return parseFnResult;
+  }
+  return {
+    value: mapFn(parseFnResult.value),
+    rest: parseFnResult.rest
+  };
+}
+function parseNumericPattern(pattern, dateString) {
+  var matchResult = dateString.match(pattern);
   if (!matchResult) {
     return null;
   }
-
-  var value = parseInt(matchResult[0], 10);
   return {
-    value: valueCallback ? valueCallback(value) : value,
-    rest: string.slice(matchResult[0].length)
+    value: parseInt(matchResult[0], 10),
+    rest: dateString.slice(matchResult[0].length)
   };
 }
-
-function parseTimezonePattern(pattern, string) {
-  var matchResult = string.match(pattern);
-
+function parseTimezonePattern(pattern, dateString) {
+  var matchResult = dateString.match(pattern);
   if (!matchResult) {
     return null;
-  } // Input is 'Z'
-
+  }
 
+  // Input is 'Z'
   if (matchResult[0] === 'Z') {
     return {
       value: 0,
-      rest: string.slice(1)
+      rest: dateString.slice(1)
     };
   }
-
   var sign = matchResult[1] === '+' ? 1 : -1;
   var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
   var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
   var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
   return {
-    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
-    rest: string.slice(matchResult[0].length)
+    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
+    rest: dateString.slice(matchResult[0].length)
   };
 }
-
-function parseAnyDigitsSigned(string, valueCallback) {
-  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
+function parseAnyDigitsSigned(dateString) {
+  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
 }
-
-function parseNDigits(n, string, valueCallback) {
+function parseNDigits(n, dateString) {
   switch (n) {
     case 1:
-      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.singleDigit, dateString);
     case 2:
-      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.twoDigits, dateString);
     case 3:
-      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.threeDigits, dateString);
     case 4:
-      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.fourDigits, dateString);
     default:
-      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback);
+      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
   }
 }
-
-function parseNDigitsSigned(n, string, valueCallback) {
+function parseNDigitsSigned(n, dateString) {
   switch (n) {
     case 1:
-      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
     case 2:
-      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
     case 3:
-      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
     case 4:
-      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
     default:
-      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback);
+      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
   }
 }
-
-function dayPeriodEnumToHours(enumValue) {
-  switch (enumValue) {
+function dayPeriodEnumToHours(dayPeriod) {
+  switch (dayPeriod) {
     case 'morning':
       return 4;
-
     case 'evening':
       return 17;
-
     case 'pm':
     case 'noon':
     case 'afternoon':
       return 12;
-
     case 'am':
     case 'midnight':
     case 'night':
@@ -6370,16 +6412,14 @@ function dayPeriodEnumToHours(enumValue) {
       return 0;
   }
 }
-
 function normalizeTwoDigitYear(twoDigitYear, currentYear) {
-  var isCommonEra = currentYear > 0; // Absolute number of the current year:
+  var isCommonEra = currentYear > 0;
+  // Absolute number of the current year:
   // 1 -> 1 AC
   // 0 -> 1 BC
   // -1 -> 2 BC
-
   var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
   var result;
-
   if (absCurrentYear <= 50) {
     result = twoDigitYear || 100;
   } else {
@@ -6388,1077 +6428,1324 @@ function normalizeTwoDigitYear(twoDigitYear, currentYear) {
     var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
     result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
   }
-
   return isCommonEra ? result : 1 - result;
 }
-
-var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
-var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation
-
 function isLeapYearIndex(year) {
   return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
 }
-/*
- * |     | Unit                           |     | Unit                           |
- * |-----|--------------------------------|-----|--------------------------------|
- * |  a  | AM, PM                         |  A* | Milliseconds in day            |
- * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
- * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
- * |  d  | Day of month                   |  D  | Day of year                    |
- * |  e  | Local day of week              |  E  | Day of week                    |
- * |  f  |                                |  F* | Day of week in month           |
- * |  g* | Modified Julian day            |  G  | Era                            |
- * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
- * |  i! | ISO day of week                |  I! | ISO week of year               |
- * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
- * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
- * |  l* | (deprecated)                   |  L  | Stand-alone month              |
- * |  m  | Minute                         |  M  | Month                          |
- * |  n  |                                |  N  |                                |
- * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
- * |  p  |                                |  P  |                                |
- * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
- * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
- * |  s  | Second                         |  S  | Fraction of second             |
- * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
- * |  u  | Extended year                  |  U* | Cyclic year                    |
- * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
- * |  w  | Local week of year             |  W* | Week of month                  |
- * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
- * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
- * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
- *
- * Letters marked by * are not implemented but reserved by Unicode standard.
- *
- * Letters marked by ! are non-standard, but implemented by date-fns:
- * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
- * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
- *   i.e. 7 for Sunday, 1 for Monday, etc.
- * - `I` is ISO week of year, as opposed to `w` which is local week of year.
- * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
- *   `R` is supposed to be used in conjunction with `I` and `i`
- *   for universal ISO week-numbering date, whereas
- *   `Y` is supposed to be used in conjunction with `w` and `e`
- *   for week-numbering date specific to the locale.
- */
-
-
-var parsers = {
-  // Era
-  G: {
-    priority: 140,
-    parse: function (string, token, match, _options) {
-      switch (token) {
-        // AD, BC
-        case 'G':
-        case 'GG':
-        case 'GGG':
-          return match.era(string, {
-            width: 'abbreviated'
-          }) || match.era(string, {
-            width: 'narrow'
-          });
-        // A, B
-
-        case 'GGGGG':
-          return match.era(string, {
-            width: 'narrow'
-          });
-        // Anno Domini, Before Christ
 
-        case 'GGGG':
-        default:
-          return match.era(string, {
-            width: 'wide'
-          }) || match.era(string, {
-            width: 'abbreviated'
-          }) || match.era(string, {
-            width: 'narrow'
-          });
-      }
-    },
-    set: function (date, flags, value, _options) {
-      flags.era = value;
-      date.setUTCFullYear(value, 0, 1);
-      date.setUTCHours(0, 0, 0, 0);
-      return date;
-    },
-    incompatibleTokens: ['R', 'u', 't', 'T']
-  },
-  // Year
-  y: {
-    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
-    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
-    // |----------|-------|----|-------|-------|-------|
-    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
-    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
-    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
-    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
-    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
-    priority: 130,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (year) {
+// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
+// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
+// |----------|-------|----|-------|-------|-------|
+// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
+// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
+// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
+// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
+// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
+var YearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(YearParser, _Parser);
+  var _super = _createSuper(YearParser);
+  function YearParser() {
+    var _this;
+    _classCallCheck(this, YearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(YearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(year) {
         return {
           year: year,
           isTwoDigitYear: token === 'yy'
         };
       };
-
       switch (token) {
         case 'y':
-          return parseNDigits(4, string, valueCallback);
-
+          return mapValue(parseNDigits(4, dateString), valueCallback);
         case 'yo':
-          return match.ordinalNumber(string, {
-            unit: 'year',
-            valueCallback: valueCallback
-          });
-
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'year'
+          }), valueCallback);
         default:
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value.isTwoDigitYear || value.year > 0;
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       var currentYear = date.getUTCFullYear();
-
       if (value.isTwoDigitYear) {
         var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
         date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
         date.setUTCHours(0, 0, 0, 0);
         return date;
       }
-
       var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
       date.setUTCFullYear(year, 0, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local week-numbering year
-  Y: {
-    priority: 130,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (year) {
+    }
+  }]);
+  return YearParser;
+}(Parser);
+
+// Local week-numbering year
+var LocalWeekYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalWeekYearParser, _Parser);
+  var _super = _createSuper(LocalWeekYearParser);
+  function LocalWeekYearParser() {
+    var _this;
+    _classCallCheck(this, LocalWeekYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalWeekYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(year) {
         return {
           year: year,
           isTwoDigitYear: token === 'YY'
         };
       };
-
       switch (token) {
         case 'Y':
-          return parseNDigits(4, string, valueCallback);
-
+          return mapValue(parseNDigits(4, dateString), valueCallback);
         case 'Yo':
-          return match.ordinalNumber(string, {
-            unit: 'year',
-            valueCallback: valueCallback
-          });
-
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'year'
+          }), valueCallback);
         default:
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value.isTwoDigitYear || value.year > 0;
-    },
-    set: function (date, flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value, options) {
       var currentYear = getUTCWeekYear(date, options);
-
       if (value.isTwoDigitYear) {
         var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
         date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
         date.setUTCHours(0, 0, 0, 0);
         return startOfUTCWeek(date, options);
       }
-
       var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
       date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
       date.setUTCHours(0, 0, 0, 0);
       return startOfUTCWeek(date, options);
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
-  },
-  // ISO week-numbering year
-  R: {
-    priority: 130,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return LocalWeekYearParser;
+}(Parser);
+
+var ISOWeekYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOWeekYearParser, _Parser);
+  var _super = _createSuper(ISOWeekYearParser);
+  function ISOWeekYearParser() {
+    var _this;
+    _classCallCheck(this, ISOWeekYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISOWeekYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       if (token === 'R') {
-        return parseNDigitsSigned(4, string);
+        return parseNDigitsSigned(4, dateString);
       }
-
-      return parseNDigitsSigned(token.length, string);
-    },
-    set: function (_date, _flags, value, _options) {
+      return parseNDigitsSigned(token.length, dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       var firstWeekOfYear = new Date(0);
       firstWeekOfYear.setUTCFullYear(value, 0, 4);
       firstWeekOfYear.setUTCHours(0, 0, 0, 0);
       return startOfUTCISOWeek(firstWeekOfYear);
-    },
-    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
-  },
-  // Extended year
-  u: {
-    priority: 130,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return ISOWeekYearParser;
+}(Parser);
+
+var ExtendedYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ExtendedYearParser, _Parser);
+  var _super = _createSuper(ExtendedYearParser);
+  function ExtendedYearParser() {
+    var _this;
+    _classCallCheck(this, ExtendedYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ExtendedYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       if (token === 'u') {
-        return parseNDigitsSigned(4, string);
+        return parseNDigitsSigned(4, dateString);
       }
-
-      return parseNDigitsSigned(token.length, string);
-    },
-    set: function (date, _flags, value, _options) {
+      return parseNDigitsSigned(token.length, dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCFullYear(value, 0, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']
-  },
-  // Quarter
-  Q: {
-    priority: 120,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return ExtendedYearParser;
+}(Parser);
+
+var QuarterParser = /*#__PURE__*/function (_Parser) {
+  _inherits(QuarterParser, _Parser);
+  var _super = _createSuper(QuarterParser);
+  function QuarterParser() {
+    var _this;
+    _classCallCheck(this, QuarterParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 120);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(QuarterParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // 1, 2, 3, 4
         case 'Q':
         case 'QQ':
           // 01, 02, 03, 04
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 1st, 2nd, 3rd, 4th
-
         case 'Qo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'quarter'
           });
         // Q1, Q2, Q3, Q4
-
         case 'QQQ':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
         case 'QQQQQ':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // 1st quarter, 2nd quarter, ...
-
         case 'QQQQ':
         default:
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 4;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth((value - 1) * 3, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Stand-alone quarter
-  q: {
-    priority: 120,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return QuarterParser;
+}(Parser);
+
+var StandAloneQuarterParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneQuarterParser, _Parser);
+  var _super = _createSuper(StandAloneQuarterParser);
+  function StandAloneQuarterParser() {
+    var _this;
+    _classCallCheck(this, StandAloneQuarterParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 120);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneQuarterParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // 1, 2, 3, 4
         case 'q':
         case 'qq':
           // 01, 02, 03, 04
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 1st, 2nd, 3rd, 4th
-
         case 'qo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'quarter'
           });
         // Q1, Q2, Q3, Q4
-
         case 'qqq':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
         case 'qqqqq':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // 1st quarter, 2nd quarter, ...
-
         case 'qqqq':
         default:
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 4;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth((value - 1) * 3, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Month
-  M: {
-    priority: 110,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return StandAloneQuarterParser;
+}(Parser);
+
+var MonthParser = /*#__PURE__*/function (_Parser) {
+  _inherits(MonthParser, _Parser);
+  var _super = _createSuper(MonthParser);
+  function MonthParser() {
+    var _this;
+    _classCallCheck(this, MonthParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    _defineProperty(_assertThisInitialized(_this), "priority", 110);
+    return _this;
+  }
+  _createClass(MonthParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         return value - 1;
       };
-
       switch (token) {
         // 1, 2, ..., 12
         case 'M':
-          return parseNumericPattern(numericPatterns.month, string, valueCallback);
+          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
         // 01, 02, ..., 12
-
         case 'MM':
-          return parseNDigits(2, string, valueCallback);
+          return mapValue(parseNDigits(2, dateString), valueCallback);
         // 1st, 2nd, ..., 12th
-
         case 'Mo':
-          return match.ordinalNumber(string, {
-            unit: 'month',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'month'
+          }), valueCallback);
         // Jan, Feb, ..., Dec
-
         case 'MMM':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // J, F, ..., D
-
         case 'MMMMM':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // January, February, ..., December
-
         case 'MMMM':
         default:
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(value, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Stand-alone month
-  L: {
-    priority: 110,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return MonthParser;
+}(Parser);
+
+var StandAloneMonthParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneMonthParser, _Parser);
+  var _super = _createSuper(StandAloneMonthParser);
+  function StandAloneMonthParser() {
+    var _this;
+    _classCallCheck(this, StandAloneMonthParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 110);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneMonthParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         return value - 1;
       };
-
       switch (token) {
         // 1, 2, ..., 12
         case 'L':
-          return parseNumericPattern(numericPatterns.month, string, valueCallback);
+          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
         // 01, 02, ..., 12
-
         case 'LL':
-          return parseNDigits(2, string, valueCallback);
+          return mapValue(parseNDigits(2, dateString), valueCallback);
         // 1st, 2nd, ..., 12th
-
         case 'Lo':
-          return match.ordinalNumber(string, {
-            unit: 'month',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'month'
+          }), valueCallback);
         // Jan, Feb, ..., Dec
-
         case 'LLL':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // J, F, ..., D
-
         case 'LLLLL':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // January, February, ..., December
-
         case 'LLLL':
         default:
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(value, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local week of year
-  w: {
-    priority: 100,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return StandAloneMonthParser;
+}(Parser);
+
+function setUTCWeek(dirtyDate, dirtyWeek, options) {
+  requiredArgs(2, arguments);
+  var date = toDate(dirtyDate);
+  var week = toInteger(dirtyWeek);
+  var diff = getUTCWeek(date, options) - week;
+  date.setUTCDate(date.getUTCDate() - diff * 7);
+  return date;
+}
+
+var LocalWeekParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalWeekParser, _Parser);
+  var _super = _createSuper(LocalWeekParser);
+  function LocalWeekParser() {
+    var _this;
+    _classCallCheck(this, LocalWeekParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 100);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalWeekParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'w':
-          return parseNumericPattern(numericPatterns.week, string);
-
+          return parseNumericPattern(numericPatterns.week, dateString);
         case 'wo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'week'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 53;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       return startOfUTCWeek(setUTCWeek(date, value, options), options);
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
-  },
-  // ISO week of year
-  I: {
-    priority: 100,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return LocalWeekParser;
+}(Parser);
+
+function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
+  requiredArgs(2, arguments);
+  var date = toDate(dirtyDate);
+  var isoWeek = toInteger(dirtyISOWeek);
+  var diff = getUTCISOWeek(date) - isoWeek;
+  date.setUTCDate(date.getUTCDate() - diff * 7);
+  return date;
+}
+
+var ISOWeekParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOWeekParser, _Parser);
+  var _super = _createSuper(ISOWeekParser);
+  function ISOWeekParser() {
+    var _this;
+    _classCallCheck(this, ISOWeekParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 100);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISOWeekParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'I':
-          return parseNumericPattern(numericPatterns.week, string);
-
+          return parseNumericPattern(numericPatterns.week, dateString);
         case 'Io':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'week'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 53;
-    },
-    set: function (date, _flags, value, options) {
-      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
-    },
-    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
-  },
-  // Day of the month
-  d: {
-    priority: 90,
-    subPriority: 1,
-    parse: function (string, token, match, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      return startOfUTCISOWeek(setUTCISOWeek(date, value));
+    }
+  }]);
+  return ISOWeekParser;
+}(Parser);
+
+var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+
+// Day of the month
+var DateParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DateParser, _Parser);
+  var _super = _createSuper(DateParser);
+  function DateParser() {
+    var _this;
+    _classCallCheck(this, DateParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DateParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'd':
-          return parseNumericPattern(numericPatterns.date, string);
-
+          return parseNumericPattern(numericPatterns.date, dateString);
         case 'do':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'date'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(date, value) {
       var year = date.getUTCFullYear();
       var isLeapYear = isLeapYearIndex(year);
       var month = date.getUTCMonth();
-
       if (isLeapYear) {
         return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
       } else {
         return value >= 1 && value <= DAYS_IN_MONTH[month];
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCDate(value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Day of year
-  D: {
-    priority: 90,
-    subPriority: 1,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return DateParser;
+}(Parser);
+
+var DayOfYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayOfYearParser, _Parser);
+  var _super = _createSuper(DayOfYearParser);
+  function DayOfYearParser() {
+    var _this;
+    _classCallCheck(this, DayOfYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayOfYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'D':
         case 'DD':
-          return parseNumericPattern(numericPatterns.dayOfYear, string);
-
+          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
         case 'Do':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'date'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(date, value) {
       var year = date.getUTCFullYear();
       var isLeapYear = isLeapYearIndex(year);
-
       if (isLeapYear) {
         return value >= 1 && value <= 366;
       } else {
         return value >= 1 && value <= 365;
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(0, value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']
-  },
-  // Day of week
-  E: {
-    priority: 90,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return DayOfYearParser;
+}(Parser);
+
+function setUTCDay(dirtyDate, dirtyDay, options) {
+  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
+  requiredArgs(2, arguments);
+  var defaultOptions = getDefaultOptions();
+  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
+
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
+    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
+  }
+  var date = toDate(dirtyDate);
+  var day = toInteger(dirtyDay);
+  var currentDay = date.getUTCDay();
+  var remainder = day % 7;
+  var dayIndex = (remainder + 7) % 7;
+  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
+  date.setUTCDate(date.getUTCDate() + diff);
+  return date;
+}
+
+var DayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayParser, _Parser);
+  var _super = _createSuper(DayParser);
+  function DayParser() {
+    var _this;
+    _classCallCheck(this, DayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // Tue
         case 'E':
         case 'EE':
         case 'EEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // T
-
         case 'EEEEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tu
-
         case 'EEEEEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tuesday
-
         case 'EEEE':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local day of week
-  e: {
-    priority: 90,
-    parse: function (string, token, match, options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return DayParser;
+}(Parser);
+
+var LocalDayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalDayParser, _Parser);
+  var _super = _createSuper(LocalDayParser);
+  function LocalDayParser() {
+    var _this;
+    _classCallCheck(this, LocalDayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalDayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match, options) {
+      var valueCallback = function valueCallback(value) {
         var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
         return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
       };
-
       switch (token) {
         // 3
         case 'e':
         case 'ee':
           // 03
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
         // 3rd
-
         case 'eo':
-          return match.ordinalNumber(string, {
-            unit: 'day',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'day'
+          }), valueCallback);
         // Tue
-
         case 'eee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // T
-
         case 'eeeee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tu
-
         case 'eeeeee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tuesday
-
         case 'eeee':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']
-  },
-  // Stand-alone local day of week
-  c: {
-    priority: 90,
-    parse: function (string, token, match, options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return LocalDayParser;
+}(Parser);
+
+var StandAloneLocalDayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneLocalDayParser, _Parser);
+  var _super = _createSuper(StandAloneLocalDayParser);
+  function StandAloneLocalDayParser() {
+    var _this;
+    _classCallCheck(this, StandAloneLocalDayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneLocalDayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match, options) {
+      var valueCallback = function valueCallback(value) {
         var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
         return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
       };
-
       switch (token) {
         // 3
         case 'c':
         case 'cc':
           // 03
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
         // 3rd
-
         case 'co':
-          return match.ordinalNumber(string, {
-            unit: 'day',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'day'
+          }), valueCallback);
         // Tue
-
         case 'ccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // T
-
         case 'ccccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // Tu
-
         case 'cccccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // Tuesday
-
         case 'cccc':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']
-  },
-  // ISO day of week
-  i: {
-    priority: 90,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return StandAloneLocalDayParser;
+}(Parser);
+
+function setUTCISODay(dirtyDate, dirtyDay) {
+  requiredArgs(2, arguments);
+  var day = toInteger(dirtyDay);
+  if (day % 7 === 0) {
+    day = day - 7;
+  }
+  var weekStartsOn = 1;
+  var date = toDate(dirtyDate);
+  var currentDay = date.getUTCDay();
+  var remainder = day % 7;
+  var dayIndex = (remainder + 7) % 7;
+  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
+  date.setUTCDate(date.getUTCDate() + diff);
+  return date;
+}
+
+var ISODayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISODayParser, _Parser);
+  var _super = _createSuper(ISODayParser);
+  function ISODayParser() {
+    var _this;
+    _classCallCheck(this, ISODayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISODayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         if (value === 0) {
           return 7;
         }
-
         return value;
       };
-
       switch (token) {
         // 2
         case 'i':
         case 'ii':
           // 02
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 2nd
-
         case 'io':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'day'
           });
         // Tue
-
         case 'iii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'abbreviated',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // T
-
         case 'iiiii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // Tu
-
         case 'iiiiii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // Tuesday
-
         case 'iiii':
         default:
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'wide',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'abbreviated',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 7;
-    },
-    set: function (date, _flags, value, options) {
-      date = setUTCISODay(date, value, options);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      date = setUTCISODay(date, value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']
-  },
-  // AM or PM
-  a: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return ISODayParser;
+}(Parser);
+
+var AMPMParser = /*#__PURE__*/function (_Parser) {
+  _inherits(AMPMParser, _Parser);
+  var _super = _createSuper(AMPMParser);
+  function AMPMParser() {
+    var _this;
+    _classCallCheck(this, AMPMParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(AMPMParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'a':
         case 'aa':
         case 'aaa':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'aaaaa':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'aaaa':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']
-  },
-  // AM, PM, midnight
-  b: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return AMPMParser;
+}(Parser);
+
+var AMPMMidnightParser = /*#__PURE__*/function (_Parser) {
+  _inherits(AMPMMidnightParser, _Parser);
+  var _super = _createSuper(AMPMMidnightParser);
+  function AMPMMidnightParser() {
+    var _this;
+    _classCallCheck(this, AMPMMidnightParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(AMPMMidnightParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'b':
         case 'bb':
         case 'bbb':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'bbbbb':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'bbbb':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']
-  },
-  // in the morning, in the afternoon, in the evening, at night
-  B: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return AMPMMidnightParser;
+}(Parser);
+
+var DayPeriodParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayPeriodParser, _Parser);
+  var _super = _createSuper(DayPeriodParser);
+  function DayPeriodParser() {
+    var _this;
+    _classCallCheck(this, DayPeriodParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayPeriodParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'B':
         case 'BB':
         case 'BBB':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'BBBBB':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'BBBB':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
-      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
-      return date;
-    },
-    incompatibleTokens: ['a', 'b', 't', 'T']
-  },
-  // Hour [1-12]
-  h: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
+      return date;
+    }
+  }]);
+  return DayPeriodParser;
+}(Parser);
+
+var Hour1to12Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour1to12Parser, _Parser);
+  var _super = _createSuper(Hour1to12Parser);
+  function Hour1to12Parser() {
+    var _this;
+    _classCallCheck(this, Hour1to12Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour1to12Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'h':
-          return parseNumericPattern(numericPatterns.hour12h, string);
-
+          return parseNumericPattern(numericPatterns.hour12h, dateString);
         case 'ho':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 12;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var isPM = date.getUTCHours() >= 12;
-
       if (isPM && value < 12) {
         date.setUTCHours(value + 12, 0, 0, 0);
       } else if (!isPM && value === 12) {
@@ -7466,257 +7753,488 @@ var parsers = {
       } else {
         date.setUTCHours(value, 0, 0, 0);
       }
-
       return date;
-    },
-    incompatibleTokens: ['H', 'K', 'k', 't', 'T']
-  },
-  // Hour [0-23]
-  H: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour1to12Parser;
+}(Parser);
+
+var Hour0to23Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour0to23Parser, _Parser);
+  var _super = _createSuper(Hour0to23Parser);
+  function Hour0to23Parser() {
+    var _this;
+    _classCallCheck(this, Hour0to23Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour0to23Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'H':
-          return parseNumericPattern(numericPatterns.hour23h, string);
-
+          return parseNumericPattern(numericPatterns.hour23h, dateString);
         case 'Ho':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 23;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(value, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']
-  },
-  // Hour [0-11]
-  K: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour0to23Parser;
+}(Parser);
+
+var Hour0To11Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour0To11Parser, _Parser);
+  var _super = _createSuper(Hour0To11Parser);
+  function Hour0To11Parser() {
+    var _this;
+    _classCallCheck(this, Hour0To11Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour0To11Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'K':
-          return parseNumericPattern(numericPatterns.hour11h, string);
-
+          return parseNumericPattern(numericPatterns.hour11h, dateString);
         case 'Ko':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var isPM = date.getUTCHours() >= 12;
-
       if (isPM && value < 12) {
         date.setUTCHours(value + 12, 0, 0, 0);
       } else {
         date.setUTCHours(value, 0, 0, 0);
       }
-
       return date;
-    },
-    incompatibleTokens: ['h', 'H', 'k', 't', 'T']
-  },
-  // Hour [1-24]
-  k: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour0To11Parser;
+}(Parser);
+
+var Hour1To24Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour1To24Parser, _Parser);
+  var _super = _createSuper(Hour1To24Parser);
+  function Hour1To24Parser() {
+    var _this;
+    _classCallCheck(this, Hour1To24Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour1To24Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'k':
-          return parseNumericPattern(numericPatterns.hour24h, string);
-
+          return parseNumericPattern(numericPatterns.hour24h, dateString);
         case 'ko':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 24;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var hours = value <= 24 ? value % 24 : value;
       date.setUTCHours(hours, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']
-  },
-  // Minute
-  m: {
-    priority: 60,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour1To24Parser;
+}(Parser);
+
+var MinuteParser = /*#__PURE__*/function (_Parser) {
+  _inherits(MinuteParser, _Parser);
+  var _super = _createSuper(MinuteParser);
+  function MinuteParser() {
+    var _this;
+    _classCallCheck(this, MinuteParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 60);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(MinuteParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'm':
-          return parseNumericPattern(numericPatterns.minute, string);
-
+          return parseNumericPattern(numericPatterns.minute, dateString);
         case 'mo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'minute'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 59;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMinutes(value, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Second
-  s: {
-    priority: 50,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return MinuteParser;
+}(Parser);
+
+var SecondParser = /*#__PURE__*/function (_Parser) {
+  _inherits(SecondParser, _Parser);
+  var _super = _createSuper(SecondParser);
+  function SecondParser() {
+    var _this;
+    _classCallCheck(this, SecondParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 50);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(SecondParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 's':
-          return parseNumericPattern(numericPatterns.second, string);
-
+          return parseNumericPattern(numericPatterns.second, dateString);
         case 'so':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'second'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 59;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCSeconds(value, 0);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Fraction of second
-  S: {
-    priority: 30,
-    parse: function (string, token, _match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return SecondParser;
+}(Parser);
+
+var FractionOfSecondParser = /*#__PURE__*/function (_Parser) {
+  _inherits(FractionOfSecondParser, _Parser);
+  var _super = _createSuper(FractionOfSecondParser);
+  function FractionOfSecondParser() {
+    var _this;
+    _classCallCheck(this, FractionOfSecondParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 30);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(FractionOfSecondParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
+      var valueCallback = function valueCallback(value) {
         return Math.floor(value * Math.pow(10, -token.length + 3));
       };
-
-      return parseNDigits(token.length, string, valueCallback);
-    },
-    set: function (date, _flags, value, _options) {
+      return mapValue(parseNDigits(token.length, dateString), valueCallback);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMilliseconds(value);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Timezone (ISO-8601. +00:00 is `'Z'`)
-  X: {
-    priority: 10,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return FractionOfSecondParser;
+}(Parser);
+
+var ISOTimezoneWithZParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOTimezoneWithZParser, _Parser);
+  var _super = _createSuper(ISOTimezoneWithZParser);
+  function ISOTimezoneWithZParser() {
+    var _this;
+    _classCallCheck(this, ISOTimezoneWithZParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 10);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'x']);
+    return _this;
+  }
+  _createClass(ISOTimezoneWithZParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       switch (token) {
         case 'X':
-          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
         case 'XX':
-          return parseTimezonePattern(timezonePatterns.basic, string);
-
+          return parseTimezonePattern(timezonePatterns.basic, dateString);
         case 'XXXX':
-          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
         case 'XXXXX':
-          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
         case 'XXX':
         default:
-          return parseTimezonePattern(timezonePatterns.extended, string);
+          return parseTimezonePattern(timezonePatterns.extended, dateString);
       }
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       if (flags.timestampIsSet) {
         return date;
       }
-
       return new Date(date.getTime() - value);
-    },
-    incompatibleTokens: ['t', 'T', 'x']
-  },
-  // Timezone (ISO-8601)
-  x: {
-    priority: 10,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return ISOTimezoneWithZParser;
+}(Parser);
+
+var ISOTimezoneParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOTimezoneParser, _Parser);
+  var _super = _createSuper(ISOTimezoneParser);
+  function ISOTimezoneParser() {
+    var _this;
+    _classCallCheck(this, ISOTimezoneParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 10);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'X']);
+    return _this;
+  }
+  _createClass(ISOTimezoneParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       switch (token) {
         case 'x':
-          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
         case 'xx':
-          return parseTimezonePattern(timezonePatterns.basic, string);
-
+          return parseTimezonePattern(timezonePatterns.basic, dateString);
         case 'xxxx':
-          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
         case 'xxxxx':
-          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
         case 'xxx':
         default:
-          return parseTimezonePattern(timezonePatterns.extended, string);
+          return parseTimezonePattern(timezonePatterns.extended, dateString);
       }
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       if (flags.timestampIsSet) {
         return date;
       }
-
       return new Date(date.getTime() - value);
-    },
-    incompatibleTokens: ['t', 'T', 'X']
-  },
-  // Seconds timestamp
-  t: {
-    priority: 40,
-    parse: function (string, _token, _match, _options) {
-      return parseAnyDigitsSigned(string);
-    },
-    set: function (_date, _flags, value, _options) {
+    }
+  }]);
+  return ISOTimezoneParser;
+}(Parser);
+
+var TimestampSecondsParser = /*#__PURE__*/function (_Parser) {
+  _inherits(TimestampSecondsParser, _Parser);
+  var _super = _createSuper(TimestampSecondsParser);
+  function TimestampSecondsParser() {
+    var _this;
+    _classCallCheck(this, TimestampSecondsParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 40);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
+    return _this;
+  }
+  _createClass(TimestampSecondsParser, [{
+    key: "parse",
+    value: function parse(dateString) {
+      return parseAnyDigitsSigned(dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       return [new Date(value * 1000), {
         timestampIsSet: true
       }];
-    },
-    incompatibleTokens: '*'
-  },
-  // Milliseconds timestamp
-  T: {
-    priority: 20,
-    parse: function (string, _token, _match, _options) {
-      return parseAnyDigitsSigned(string);
-    },
-    set: function (_date, _flags, value, _options) {
+    }
+  }]);
+  return TimestampSecondsParser;
+}(Parser);
+
+var TimestampMillisecondsParser = /*#__PURE__*/function (_Parser) {
+  _inherits(TimestampMillisecondsParser, _Parser);
+  var _super = _createSuper(TimestampMillisecondsParser);
+  function TimestampMillisecondsParser() {
+    var _this;
+    _classCallCheck(this, TimestampMillisecondsParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 20);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
+    return _this;
+  }
+  _createClass(TimestampMillisecondsParser, [{
+    key: "parse",
+    value: function parse(dateString) {
+      return parseAnyDigitsSigned(dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       return [new Date(value), {
         timestampIsSet: true
       }];
-    },
-    incompatibleTokens: '*'
-  }
+    }
+  }]);
+  return TimestampMillisecondsParser;
+}(Parser);
+
+/*
+ * |     | Unit                           |     | Unit                           |
+ * |-----|--------------------------------|-----|--------------------------------|
+ * |  a  | AM, PM                         |  A* | Milliseconds in day            |
+ * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
+ * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
+ * |  d  | Day of month                   |  D  | Day of year                    |
+ * |  e  | Local day of week              |  E  | Day of week                    |
+ * |  f  |                                |  F* | Day of week in month           |
+ * |  g* | Modified Julian day            |  G  | Era                            |
+ * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
+ * |  i! | ISO day of week                |  I! | ISO week of year               |
+ * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
+ * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
+ * |  l* | (deprecated)                   |  L  | Stand-alone month              |
+ * |  m  | Minute                         |  M  | Month                          |
+ * |  n  |                                |  N  |                                |
+ * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
+ * |  p  |                                |  P  |                                |
+ * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
+ * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
+ * |  s  | Second                         |  S  | Fraction of second             |
+ * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
+ * |  u  | Extended year                  |  U* | Cyclic year                    |
+ * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
+ * |  w  | Local week of year             |  W* | Week of month                  |
+ * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
+ * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
+ * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
+ *
+ * Letters marked by * are not implemented but reserved by Unicode standard.
+ *
+ * Letters marked by ! are non-standard, but implemented by date-fns:
+ * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
+ * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
+ *   i.e. 7 for Sunday, 1 for Monday, etc.
+ * - `I` is ISO week of year, as opposed to `w` which is local week of year.
+ * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
+ *   `R` is supposed to be used in conjunction with `I` and `i`
+ *   for universal ISO week-numbering date, whereas
+ *   `Y` is supposed to be used in conjunction with `w` and `e`
+ *   for week-numbering date specific to the locale.
+ */
+var parsers = {
+  G: new EraParser(),
+  y: new YearParser(),
+  Y: new LocalWeekYearParser(),
+  R: new ISOWeekYearParser(),
+  u: new ExtendedYearParser(),
+  Q: new QuarterParser(),
+  q: new StandAloneQuarterParser(),
+  M: new MonthParser(),
+  L: new StandAloneMonthParser(),
+  w: new LocalWeekParser(),
+  I: new ISOWeekParser(),
+  d: new DateParser(),
+  D: new DayOfYearParser(),
+  E: new DayParser(),
+  e: new LocalDayParser(),
+  c: new StandAloneLocalDayParser(),
+  i: new ISODayParser(),
+  a: new AMPMParser(),
+  b: new AMPMMidnightParser(),
+  B: new DayPeriodParser(),
+  h: new Hour1to12Parser(),
+  H: new Hour0to23Parser(),
+  K: new Hour0To11Parser(),
+  k: new Hour1To24Parser(),
+  m: new MinuteParser(),
+  s: new SecondParser(),
+  S: new FractionOfSecondParser(),
+  X: new ISOTimezoneWithZParser(),
+  x: new ISOTimezoneParser(),
+  t: new TimestampSecondsParser(),
+  T: new TimestampMillisecondsParser()
 };
-var parsers$1 = parsers;
 
-var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
 // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
 //   (one of the certain letters followed by `o`)
 // - (\w)\1* matches any sequences of the same letter
@@ -7727,15 +8245,16 @@ var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separate
 //   If there is no matching single quote
 //   then the sequence will continue until the end of the string.
 // - . matches any single character unmatched by previous parts of the RegExps
+var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
 
-var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
+// This RegExp catches symbols escaped by quotes, and also
 // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
-
 var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
 var escapedStringRegExp = /^'([^]*?)'?$/;
 var doubleQuoteRegExp = /''/g;
 var notWhitespaceRegExp = /\S/;
 var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
+
 /**
  * @name parse
  * @category Common Helpers
@@ -7745,7 +8264,7 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * Return the date parsed from string using the given format string.
  *
  * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
- * > See: https://git.io/fxCyr
+ * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * The characters in the format string wrapped between two single quotes characters (') are escaped.
  * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
@@ -7968,10 +8487,10 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  *    - `p`: long localized time
  *
  * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
- *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
- *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
  *    on the given locale.
@@ -8002,23 +8521,6 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * Invalid Date is a Date, whose time value is NaN.
  * Time value of Date: http://es5.github.io/#x15.9.1.1
  *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - Old `parse` was renamed to `toDate`.
- *   Now `parse` is a new function which parses a string using a provided format.
- *
- *   ```javascript
- *   // Before v2.0.0
- *   parse('2016-01-01')
- *
- *   // v2.0.0 onward (toDate no longer accepts a string)
- *   toDate(1392098430000) // Unix to timestamp
- *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date
- *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
- *   ```
- *
  * @param {String} dateString - the string to parse
  * @param {String} formatString - the string of tokens
  * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
@@ -8027,18 +8529,18 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
  * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
  * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @returns {Date} the parsed date
  * @throws {TypeError} 3 arguments required
  * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
  * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
  * @throws {RangeError} `options.locale` must contain `match` property
- * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
+ * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @throws {RangeError} format string contains an unescaped latin alphabet character
  *
  * @example
@@ -8054,34 +8556,28 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * })
  * //=> Sun Feb 28 2010 00:00:00
  */
-
-function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
+function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
+  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
   requiredArgs(3, arguments);
   var dateString = String(dirtyDateString);
   var formatString = String(dirtyFormatString);
-  var options = dirtyOptions || {};
-  var locale = options.locale || defaultLocale;
-
+  var defaultOptions = getDefaultOptions();
+  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
   if (!locale.match) {
     throw new RangeError('locale must contain match property');
   }
+  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
 
-  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
-
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
+  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
 
-  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
-
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   if (formatString === '') {
     if (dateString === '') {
       return toDate(dirtyReferenceDate);
@@ -8089,113 +8585,96 @@ function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOpti
       return new Date(NaN);
     }
   }
-
   var subFnOptions = {
     firstWeekContainsDate: firstWeekContainsDate,
     weekStartsOn: weekStartsOn,
     locale: locale
-  }; // If timezone isn't specified, it will be set to the system timezone
+  };
 
-  var setters = [{
-    priority: TIMEZONE_UNIT_PRIORITY,
-    subPriority: -1,
-    set: dateToSystemTimezone,
-    index: 0
-  }];
-  var i;
+  // If timezone isn't specified, it will be set to the system timezone
+  var setters = [new DateToSystemTimezoneSetter()];
   var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
     var firstCharacter = substring[0];
-
-    if (firstCharacter === 'p' || firstCharacter === 'P') {
+    if (firstCharacter in longFormatters$1) {
       var longFormatter = longFormatters$1[firstCharacter];
-      return longFormatter(substring, locale.formatLong, subFnOptions);
+      return longFormatter(substring, locale.formatLong);
     }
-
     return substring;
   }).join('').match(formattingTokensRegExp);
   var usedTokens = [];
-
-  for (i = 0; i < tokens.length; i++) {
-    var token = tokens[i];
-
-    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
-      throwProtectedError(token, formatString, dirtyDateString);
-    }
-
-    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
-      throwProtectedError(token, formatString, dirtyDateString);
-    }
-
-    var firstCharacter = token[0];
-    var parser = parsers$1[firstCharacter];
-
-    if (parser) {
-      var incompatibleTokens = parser.incompatibleTokens;
-
-      if (Array.isArray(incompatibleTokens)) {
-        var incompatibleToken = void 0;
-
-        for (var _i = 0; _i < usedTokens.length; _i++) {
-          var usedToken = usedTokens[_i].token;
-
-          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
-            incompatibleToken = usedTokens[_i];
-            break;
+  var _iterator = _createForOfIteratorHelper(tokens),
+    _step;
+  try {
+    var _loop = function _loop() {
+      var token = _step.value;
+      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
+        throwProtectedError(token, formatString, dirtyDateString);
+      }
+      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
+        throwProtectedError(token, formatString, dirtyDateString);
+      }
+      var firstCharacter = token[0];
+      var parser = parsers[firstCharacter];
+      if (parser) {
+        var incompatibleTokens = parser.incompatibleTokens;
+        if (Array.isArray(incompatibleTokens)) {
+          var incompatibleToken = usedTokens.find(function (usedToken) {
+            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
+          });
+          if (incompatibleToken) {
+            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
           }
+        } else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
+          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
         }
-
-        if (incompatibleToken) {
-          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
+        usedTokens.push({
+          token: firstCharacter,
+          fullToken: token
+        });
+        var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
+        if (!parseResult) {
+          return {
+            v: new Date(NaN)
+          };
+        }
+        setters.push(parseResult.setter);
+        dateString = parseResult.rest;
+      } else {
+        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
+          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
         }
-      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {
-        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
-      }
-
-      usedTokens.push({
-        token: firstCharacter,
-        fullToken: token
-      });
-      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);
-
-      if (!parseResult) {
-        return new Date(NaN);
-      }
-
-      setters.push({
-        priority: parser.priority,
-        subPriority: parser.subPriority || 0,
-        set: parser.set,
-        validate: parser.validate,
-        value: parseResult.value,
-        index: setters.length
-      });
-      dateString = parseResult.rest;
-    } else {
-      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
-        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
-      } // Replace two single quote characters with one single quote character
-
-
-      if (token === "''") {
-        token = "'";
-      } else if (firstCharacter === "'") {
-        token = cleanEscapedString(token);
-      } // Cut token from string, or, if string doesn't match the token, return Invalid Date
 
+        // Replace two single quote characters with one single quote character
+        if (token === "''") {
+          token = "'";
+        } else if (firstCharacter === "'") {
+          token = cleanEscapedString(token);
+        }
 
-      if (dateString.indexOf(token) === 0) {
-        dateString = dateString.slice(token.length);
-      } else {
-        return new Date(NaN);
+        // Cut token from string, or, if string doesn't match the token, return Invalid Date
+        if (dateString.indexOf(token) === 0) {
+          dateString = dateString.slice(token.length);
+        } else {
+          return {
+            v: new Date(NaN)
+          };
+        }
       }
+    };
+    for (_iterator.s(); !(_step = _iterator.n()).done;) {
+      var _ret = _loop();
+      if (_typeof(_ret) === "object") return _ret.v;
     }
-  } // Check if the remaining input contains something other than whitespace
-
 
+    // Check if the remaining input contains something other than whitespace
+  } catch (err) {
+    _iterator.e(err);
+  } finally {
+    _iterator.f();
+  }
   if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
     return new Date(NaN);
   }
-
   var uniquePrioritySetters = setters.map(function (setter) {
     return setter.priority;
   }).sort(function (a, b) {
@@ -8212,48 +8691,38 @@ function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOpti
     return setterArray[0];
   });
   var date = toDate(dirtyReferenceDate);
-
-  if (isNaN(date)) {
+  if (isNaN(date.getTime())) {
     return new Date(NaN);
-  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
-  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
-  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37
-
+  }
 
+  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
   var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
   var flags = {};
-
-  for (i = 0; i < uniquePrioritySetters.length; i++) {
-    var setter = uniquePrioritySetters[i];
-
-    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
-      return new Date(NaN);
-    }
-
-    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)
-
-    if (result[0]) {
-      utcDate = result[0];
-      assign(flags, result[1]); // Result is date
-    } else {
-      utcDate = result;
+  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters),
+    _step2;
+  try {
+    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
+      var setter = _step2.value;
+      if (!setter.validate(utcDate, subFnOptions)) {
+        return new Date(NaN);
+      }
+      var result = setter.set(utcDate, flags, subFnOptions);
+      // Result is tuple (date, flags)
+      if (Array.isArray(result)) {
+        utcDate = result[0];
+        assign(flags, result[1]);
+        // Result is date
+      } else {
+        utcDate = result;
+      }
     }
+  } catch (err) {
+    _iterator2.e(err);
+  } finally {
+    _iterator2.f();
   }
-
   return utcDate;
 }
-
-function dateToSystemTimezone(date, flags) {
-  if (flags.timestampIsSet) {
-    return date;
-  }
-
-  var convertedDate = new Date(0);
-  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
-  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
-  return convertedDate;
-}
-
 function cleanEscapedString(input) {
   return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
 }
@@ -8305,8 +8774,8 @@ date.format = function (v, column) {
 };
 
 var date$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': date
+	__proto__: null,
+	'default': date
 });
 
 const number = Object.assign({}, defaultType);
@@ -8334,8 +8803,8 @@ number.compare = function (x, y) {
 };
 
 var number$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': number
+	__proto__: null,
+	'default': number
 });
 
 const decimal = Object.assign({}, number);
@@ -8346,8 +8815,8 @@ decimal.format = function (v) {
 };
 
 var decimal$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': decimal
+	__proto__: null,
+	'default': decimal
 });
 
 const percentage = Object.assign({}, number);
@@ -8358,8 +8827,8 @@ percentage.format = function (v) {
 };
 
 var percentage$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': percentage
+	__proto__: null,
+	'default': percentage
 });
 
 const boolean = Object.assign({}, defaultType);
@@ -8386,8 +8855,8 @@ boolean.compare = function (x, y) {
 };
 
 var boolean$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': boolean
+	__proto__: null,
+	'default': boolean
 });
 
 var index$1 = {
@@ -8934,13 +9403,13 @@ const _sfc_main = {
 									sortValue =
 										sortValue ||
 										sortFn(xvalue, yvalue, column, xRow, yRow) *
-											(srt.type === SORT_TYPES.Descending ? -1 : 1);
+										(srt.type === SORT_TYPES.Descending ? -1 : 1);
 								} else {
 									//* else we use our own sort
 									sortValue =
 										sortValue ||
 										column.typeDef.compare(xvalue, yvalue, column) *
-											(srt.type === SORT_TYPES.Descending ? -1 : 1);
+										(srt.type === SORT_TYPES.Descending ? -1 : 1);
 								}
 							}
 						}
@@ -9524,7 +9993,7 @@ const _sfc_main = {
 									this.columnFilters[fieldKey(col.field)],
 									false,
 									col.filterOptions &&
-										typeof col.filterOptions.filterDropdownItems === "object"
+									typeof col.filterOptions.filterDropdownItems === "object"
 								);
 							});
 							// should we remove the header?
@@ -9911,20 +10380,24 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
               name: "internal-table-actions",
               fn: vue.withCtx(() => [
                 vue.renderSlot(_ctx.$slots, "table-actions")
-              ])
+              ]),
+              key: "0"
             }
           : undefined
       ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["onKeyup", "onEnter", "value", "search-enabled", "global-search-placeholder"]),
-      ($options.selectedRowCount && !_ctx.disableSelectInfo)
+      (!_ctx.disableSelectInfo)
         ? (vue.openBlock(), vue.createElementBlock("div", {
             key: 1,
             class: vue.normalizeClass(["vgt-selection-info-row clearfix", _ctx.selectionInfoClass])
           }, [
             vue.createTextVNode(vue.toDisplayString($options.selectionInfo) + " ", 1 /* TEXT */),
-            vue.createElementVNode("a", {
-              href: "",
-              onClick: _cache[1] || (_cache[1] = vue.withModifiers($event => ($options.unselectAllInternal(true)), ["prevent"]))
-            }, vue.toDisplayString(_ctx.clearSelectionText), 1 /* TEXT */),
+            (!!_ctx.clearSelectionText)
+              ? (vue.openBlock(), vue.createElementBlock("a", {
+                  key: 0,
+                  href: "",
+                  onClick: _cache[1] || (_cache[1] = vue.withModifiers($event => ($options.unselectAllInternal(true)), ["prevent"]))
+                }, vue.toDisplayString(_ctx.clearSelectionText), 1 /* TEXT */))
+              : vue.createCommentVNode("v-if", true),
             vue.createElementVNode("div", _hoisted_3, [
               vue.renderSlot(_ctx.$slots, "selected-row-actions")
             ])
@@ -10066,7 +10539,8 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               formattedRow: slotProps.formattedRow,
                               row: slotProps.row
                             })
-                          ])
+                          ]),
+                          key: "0"
                         }
                       : undefined
                   ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["onVgtExpand", "header-row", "columns", "line-numbers", "selectable", "select-all-by-group", "collapsable", "collect-formatted", "formatted-row", "class", "get-classes", "full-colspan", "groupIndex", "onSelectGroupChange"]))
@@ -10127,7 +10601,7 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               : vue.createCommentVNode("v-if", true)
                           ], 64 /* STABLE_FRAGMENT */))
                         }), 256 /* UNKEYED_FRAGMENT */))
-                      ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_7))
+                      ], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_7))
                     : vue.createCommentVNode("v-if", true),
                   (_ctx.expandedRowIndex === index)
                     ? (vue.openBlock(), vue.createElementBlock("tr", {
@@ -10177,7 +10651,8 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               formattedRow: slotProps.formattedRow,
                               row: slotProps.row
                             })
-                          ])
+                          ]),
+                          key: "0"
                         }
                       : undefined
                   ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["header-row", "columns", "line-numbers", "selectable", "select-all-by-group", "collect-formatted", "formatted-row", "get-classes", "full-colspan", "groupIndex", "onSelectGroupChange"]))
diff --git a/node_modules/vue-good-table-next/dist/vue-good-table-next.css b/node_modules/vue-good-table-next/dist/vue-good-table-next.css
index 8070d9f..b8c2047 100644
--- a/node_modules/vue-good-table-next/dist/vue-good-table-next.css
+++ b/node_modules/vue-good-table-next/dist/vue-good-table-next.css
@@ -199,11 +199,9 @@ table.vgt-table tr.clickable:hover {
   border: 1px solid #DCDFE6;
   transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);
 }
-.vgt-input::placeholder, .vgt-select::placeholder {
-  /* Chrome, Firefox, Opera, Safari 10.1+ */
+.vgt-input::placeholder, .vgt-select::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
   color: #606266;
-  opacity: 0.3;
-  /* Firefox */
+  opacity: 0.3; /* Firefox */
 }
 .vgt-input:focus, .vgt-select:focus {
   outline: none;
@@ -267,8 +265,8 @@ table.vgt-table tr.clickable:hover {
     box-sizing: border-box;
   }
   .vgt-compact tbody,
-.vgt-compact tr,
-.vgt-compact td {
+  .vgt-compact tr,
+  .vgt-compact td {
     display: block;
     width: 100%;
   }
@@ -521,7 +519,6 @@ table.vgt-table tr.clickable:hover {
   .vgt-wrap__footer .footer__navigation__info {
     display: none;
   }
-
   .vgt-wrap__footer .footer__navigation__page-btn {
     margin-left: 16px;
   }
@@ -573,11 +570,9 @@ table.vgt-table tr.clickable:hover {
   background-color: #232d3f;
   border: 1px solid #435169;
 }
-.vgt-table.nocturnal .vgt-input::placeholder, .vgt-table.nocturnal .vgt-select::placeholder {
-  /* Chrome, Firefox, Opera, Safari 10.1+ */
+.vgt-table.nocturnal .vgt-input::placeholder, .vgt-table.nocturnal .vgt-select::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
   color: #C7CED8;
-  opacity: 0.3;
-  /* Firefox */
+  opacity: 0.3; /* Firefox */
 }
 
 .vgt-wrap.nocturnal .vgt-wrap__footer {
@@ -648,11 +643,9 @@ table.vgt-table tr.clickable:hover {
   background-color: #232d3f;
   border: 1px solid #435169;
 }
-.vgt-wrap.nocturnal .vgt-global-search__input .vgt-input::placeholder, .vgt-wrap.nocturnal .vgt-global-search__input .vgt-select::placeholder {
-  /* Chrome, Firefox, Opera, Safari 10.1+ */
+.vgt-wrap.nocturnal .vgt-global-search__input .vgt-input::placeholder, .vgt-wrap.nocturnal .vgt-global-search__input .vgt-select::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
   color: #C7CED8;
-  opacity: 0.3;
-  /* Firefox */
+  opacity: 0.3; /* Firefox */
 }
 
 .vgt-table.black-rhino {
@@ -703,11 +696,9 @@ table.vgt-table tr.clickable:hover {
   background-color: #34445f;
   border: 1px solid transparent;
 }
-.vgt-table.black-rhino .vgt-input::placeholder, .vgt-table.black-rhino .vgt-select::placeholder {
-  /* Chrome, Firefox, Opera, Safari 10.1+ */
+.vgt-table.black-rhino .vgt-input::placeholder, .vgt-table.black-rhino .vgt-select::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
   color: #dae2f0;
-  opacity: 0.3;
-  /* Firefox */
+  opacity: 0.3; /* Firefox */
 }
 
 .vgt-wrap.black-rhino .vgt-wrap__footer {
@@ -781,11 +772,9 @@ table.vgt-table tr.clickable:hover {
   background-color: #44516c;
   border: 1px solid transparent;
 }
-.vgt-wrap.black-rhino .vgt-global-search__input .vgt-input::placeholder, .vgt-wrap.black-rhino .vgt-global-search__input .vgt-select::placeholder {
-  /* Chrome, Firefox, Opera, Safari 10.1+ */
+.vgt-wrap.black-rhino .vgt-global-search__input .vgt-input::placeholder, .vgt-wrap.black-rhino .vgt-global-search__input .vgt-select::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
   color: #dae2f0;
-  opacity: 0.3;
-  /* Firefox */
+  opacity: 0.3; /* Firefox */
 }
 
 .vgt-inner-wrap {
@@ -932,9 +921,7 @@ table.vgt-table tr.clickable:hover {
   box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
   border: 1px solid #E4EBF3;
 }
-.vgt-wrap.polar-bear .vgt-global-search__input .vgt-input::placeholder, .vgt-wrap.polar-bear .vgt-global-search__input .vgt-select::placeholder {
-  /* Chrome, Firefox, Opera, Safari 10.1+ */
+.vgt-wrap.polar-bear .vgt-global-search__input .vgt-input::placeholder, .vgt-wrap.polar-bear .vgt-global-search__input .vgt-select::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
   color: #394567;
-  opacity: 0.3;
-  /* Firefox */
+  opacity: 0.3; /* Firefox */
 }
\ No newline at end of file
diff --git a/node_modules/vue-good-table-next/dist/vue-good-table-next.global.prod.js b/node_modules/vue-good-table-next/dist/vue-good-table-next.global.prod.js
index e3f402b..a7b2636 100644
--- a/node_modules/vue-good-table-next/dist/vue-good-table-next.global.prod.js
+++ b/node_modules/vue-good-table-next/dist/vue-good-table-next.global.prod.js
@@ -1,9 +1,9 @@
 /*!
-  * vue-good-table-next v0.2.0
+  * vue-good-table-next v0.2.1
   * (c) 2021-present Boris Flesch <boris@singlequote.net>
   * (c) 2017-2021 xaksis <shay@crayonbits.com>
   * @license MIT
   */
-var VueGoodTable=function(e,t){"use strict";const n="asc",r="desc",a="none",o="records",i=[10,20,30,40,50];var l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},s={exports:{}};!function(e,t){var n="__lodash_hash_undefined__",r=9007199254740991,a="[object Arguments]",o="[object Array]",i="[object Boolean]",s="[object Date]",c="[object Error]",u="[object Function]",d="[object Map]",h="[object Number]",g="[object Object]",p="[object Promise]",f="[object RegExp]",m="[object Set]",w="[object String]",b="[object Symbol]",y="[object WeakMap]",v="[object ArrayBuffer]",C="[object DataView]",x=/^\[object .+?Constructor\]$/,k=/^(?:0|[1-9]\d*)$/,P={};P["[object Float32Array]"]=P["[object Float64Array]"]=P["[object Int8Array]"]=P["[object Int16Array]"]=P["[object Int32Array]"]=P["[object Uint8Array]"]=P["[object Uint8ClampedArray]"]=P["[object Uint16Array]"]=P["[object Uint32Array]"]=!0,P[a]=P[o]=P[v]=P[i]=P[C]=P[s]=P[c]=P[u]=P[d]=P[h]=P[g]=P[f]=P[m]=P[w]=P[y]=!1;var T="object"==typeof l&&l&&l.Object===Object&&l,S="object"==typeof self&&self&&self.Object===Object&&self,E=T||S||Function("return this")(),R=t&&!t.nodeType&&t,B=R&&e&&!e.nodeType&&e,D=B&&B.exports===R,N=D&&T.process,O=function(){try{return N&&N.binding&&N.binding("util")}catch(e){}}(),_=O&&O.isTypedArray;function F(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function M(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function I(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var U,V,A,$=Array.prototype,j=Object.prototype,L=E["__core-js_shared__"],z=Function.prototype.toString,H=j.hasOwnProperty,Y=(U=/[^.]+$/.exec(L&&L.keys&&L.keys.IE_PROTO||""))?"Symbol(src)_1."+U:"",q=j.toString,W=RegExp("^"+z.call(H).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Q=D?E.Buffer:void 0,G=E.Symbol,K=E.Uint8Array,X=j.propertyIsEnumerable,J=$.splice,Z=G?G.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=Q?Q.isBuffer:void 0,ne=(V=Object.keys,A=Object,function(e){return V(A(e))}),re=Ne(E,"DataView"),ae=Ne(E,"Map"),oe=Ne(E,"Promise"),ie=Ne(E,"Set"),le=Ne(E,"WeakMap"),se=Ne(Object,"create"),ce=Me(re),ue=Me(ae),de=Me(oe),he=Me(ie),ge=Me(le),pe=G?G.prototype:void 0,fe=pe?pe.valueOf:void 0;function me(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function we(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function be(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ye(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new be;++t<n;)this.add(e[t])}function ve(e){var t=this.__data__=new we(e);this.size=t.size}function Ce(e,t){var n=Ve(e),r=!n&&Ue(e),a=!n&&!r&&Ae(e),o=!n&&!r&&!a&&He(e),i=n||r||a||o,l=i?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],s=l.length;for(var c in e)!t&&!H.call(e,c)||i&&("length"==c||a&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Fe(c,s))||l.push(c);return l}function xe(e,t){for(var n=e.length;n--;)if(Ie(e[n][0],t))return n;return-1}function ke(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Z&&Z in Object(e)?function(e){var t=H.call(e,Z),n=e[Z];try{e[Z]=void 0;var r=!0}catch(e){}var a=q.call(e);r&&(t?e[Z]=n:delete e[Z]);return a}(e):function(e){return q.call(e)}(e)}function Pe(e){return ze(e)&&ke(e)==a}function Te(e,t,n,r,l){return e===t||(null==e||null==t||!ze(e)&&!ze(t)?e!=e&&t!=t:function(e,t,n,r,l,u){var p=Ve(e),y=Ve(t),x=p?o:_e(e),k=y?o:_e(t),P=(x=x==a?g:x)==g,T=(k=k==a?g:k)==g,S=x==k;if(S&&Ae(e)){if(!Ae(t))return!1;p=!0,P=!1}if(S&&!P)return u||(u=new ve),p||He(e)?Re(e,t,n,r,l,u):function(e,t,n,r,a,o,l){switch(n){case C:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case v:return!(e.byteLength!=t.byteLength||!o(new K(e),new K(t)));case i:case s:case h:return Ie(+e,+t);case c:return e.name==t.name&&e.message==t.message;case f:case w:return e==t+"";case d:var u=M;case m:if(u||(u=I),e.size!=t.size&&!(1&r))return!1;var g=l.get(e);if(g)return g==t;r|=2,l.set(e,t);var p=Re(u(e),u(t),r,a,o,l);return l.delete(e),p;case b:if(fe)return fe.call(e)==fe.call(t)}return!1}(e,t,x,n,r,l,u);if(!(1&n)){var E=P&&H.call(e,"__wrapped__"),R=T&&H.call(t,"__wrapped__");if(E||R){var B=E?e.value():e,D=R?t.value():t;return u||(u=new ve),l(B,D,n,r,u)}}if(!S)return!1;return u||(u=new ve),function(e,t,n,r,a,o){var i=1&n,l=Be(e),s=l.length,c=Be(t);if(s!=c.length&&!i)return!1;var u=s;for(;u--;){var d=l[u];if(!(i?d in t:H.call(t,d)))return!1}var h=o.get(e);if(h&&o.get(t))return h==t;var g=!0;o.set(e,t),o.set(t,e);var p=i;for(;++u<s;){var f=e[d=l[u]],m=t[d];if(r)var w=i?r(m,f,d,t,e,o):r(f,m,d,e,t,o);if(!(void 0===w?f===m||a(f,m,n,r,o):w)){g=!1;break}p||(p="constructor"==d)}if(g&&!p){var b=e.constructor,y=t.constructor;b==y||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof y&&y instanceof y||(g=!1)}return o.delete(e),o.delete(t),g}(e,t,n,r,l,u)}(e,t,n,r,Te,l))}function Se(e){return!(!Le(e)||function(e){return!!Y&&Y in e}(e))&&($e(e)?W:x).test(Me(e))}function Ee(e){if((t=e)!==("function"==typeof(n=t&&t.constructor)&&n.prototype||j))return ne(e);var t,n,r=[];for(var a in Object(e))H.call(e,a)&&"constructor"!=a&&r.push(a);return r}function Re(e,t,n,r,a,o){var i=1&n,l=e.length,s=t.length;if(l!=s&&!(i&&s>l))return!1;var c=o.get(e);if(c&&o.get(t))return c==t;var u=-1,d=!0,h=2&n?new ye:void 0;for(o.set(e,t),o.set(t,e);++u<l;){var g=e[u],p=t[u];if(r)var f=i?r(p,g,u,t,e,o):r(g,p,u,e,t,o);if(void 0!==f){if(f)continue;d=!1;break}if(h){if(!F(t,(function(e,t){if(!h.has(t)&&(g===e||a(g,e,n,r,o)))return h.push(t)}))){d=!1;break}}else if(g!==p&&!a(g,p,n,r,o)){d=!1;break}}return o.delete(e),o.delete(t),d}function Be(e){return function(e,t,n){var r=t(e);return Ve(e)?r:function(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}(r,n(e))}(e,Ye,Oe)}function De(e,t){var n,r,a=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?a["string"==typeof t?"string":"hash"]:a.map}function Ne(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Se(n)?n:void 0}me.prototype.clear=function(){this.__data__=se?se(null):{},this.size=0},me.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},me.prototype.get=function(e){var t=this.__data__;if(se){var r=t[e];return r===n?void 0:r}return H.call(t,e)?t[e]:void 0},me.prototype.has=function(e){var t=this.__data__;return se?void 0!==t[e]:H.call(t,e)},me.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=se&&void 0===t?n:t,this},we.prototype.clear=function(){this.__data__=[],this.size=0},we.prototype.delete=function(e){var t=this.__data__,n=xe(t,e);return!(n<0)&&(n==t.length-1?t.pop():J.call(t,n,1),--this.size,!0)},we.prototype.get=function(e){var t=this.__data__,n=xe(t,e);return n<0?void 0:t[n][1]},we.prototype.has=function(e){return xe(this.__data__,e)>-1},we.prototype.set=function(e,t){var n=this.__data__,r=xe(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},be.prototype.clear=function(){this.size=0,this.__data__={hash:new me,map:new(ae||we),string:new me}},be.prototype.delete=function(e){var t=De(this,e).delete(e);return this.size-=t?1:0,t},be.prototype.get=function(e){return De(this,e).get(e)},be.prototype.has=function(e){return De(this,e).has(e)},be.prototype.set=function(e,t){var n=De(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},ye.prototype.add=ye.prototype.push=function(e){return this.__data__.set(e,n),this},ye.prototype.has=function(e){return this.__data__.has(e)},ve.prototype.clear=function(){this.__data__=new we,this.size=0},ve.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},ve.prototype.get=function(e){return this.__data__.get(e)},ve.prototype.has=function(e){return this.__data__.has(e)},ve.prototype.set=function(e,t){var n=this.__data__;if(n instanceof we){var r=n.__data__;if(!ae||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new be(r)}return n.set(e,t),this.size=n.size,this};var Oe=ee?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,a=0,o=[];++n<r;){var i=e[n];t(i,n,e)&&(o[a++]=i)}return o}(ee(e),(function(t){return X.call(e,t)})))}:function(){return[]},_e=ke;function Fe(e,t){return!!(t=null==t?r:t)&&("number"==typeof e||k.test(e))&&e>-1&&e%1==0&&e<t}function Me(e){if(null!=e){try{return z.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ie(e,t){return e===t||e!=e&&t!=t}(re&&_e(new re(new ArrayBuffer(1)))!=C||ae&&_e(new ae)!=d||oe&&_e(oe.resolve())!=p||ie&&_e(new ie)!=m||le&&_e(new le)!=y)&&(_e=function(e){var t=ke(e),n=t==g?e.constructor:void 0,r=n?Me(n):"";if(r)switch(r){case ce:return C;case ue:return d;case de:return p;case he:return m;case ge:return y}return t});var Ue=Pe(function(){return arguments}())?Pe:function(e){return ze(e)&&H.call(e,"callee")&&!X.call(e,"callee")},Ve=Array.isArray;var Ae=te||function(){return!1};function $e(e){if(!Le(e))return!1;var t=ke(e);return t==u||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function je(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}function Le(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ze(e){return null!=e&&"object"==typeof e}var He=_?function(e){return function(t){return e(t)}}(_):function(e){return ze(e)&&je(e.length)&&!!P[ke(e)]};function Ye(e){return null!=(t=e)&&je(t.length)&&!$e(t)?Ce(e):Ee(e);var t}e.exports=function(e,t){return Te(e,t)}}(s,s.exports);var c=s.exports;let u={a:["a","à","á","â","ã","ä","å","æ","ā","ă","ą","ǎ","ǟ","ǡ","ǻ","ȁ","ȃ","ȧ","ɐ","ɑ","ɒ","ͣ","а","ӑ","ӓ","ᵃ","ᵄ","ᶏ","ḁ","ẚ","ạ","ả","ấ","ầ","ẩ","ẫ","ậ","ắ","ằ","ẳ","ẵ","ặ","ₐ","ⱥ","ａ"],b:["b","ƀ","ƃ","ɓ","ᖯ","ᵇ","ᵬ","ᶀ","ḃ","ḅ","ḇ","ｂ"],c:["c","ç","ć","ĉ","ċ","č","ƈ","ȼ","ɕ","ͨ","ᴄ","ᶜ","ḉ","ↄ","ｃ"],d:["d","ď","đ","Ƌ","ƌ","ȡ","ɖ","ɗ","ͩ","ᵈ","ᵭ","ᶁ","ᶑ","ḋ","ḍ","ḏ","ḑ","ḓ","ｄ"],e:["e","è","é","ê","ë","ē","ĕ","ė","ę","ě","ǝ","ȅ","ȇ","ȩ","ɇ","ɘ","ͤ","ᵉ","ᶒ","ḕ","ḗ","ḙ","ḛ","ḝ","ẹ","ẻ","ẽ","ế","ề","ể","ễ","ệ","ₑ","ｅ"],f:["f","ƒ","ᵮ","ᶂ","ᶠ","ḟ","ｆ"],g:["g","ĝ","ğ","ġ","ģ","ǥ","ǧ","ǵ","ɠ","ɡ","ᵍ","ᵷ","ᵹ","ᶃ","ᶢ","ḡ","ｇ"],h:["h","ĥ","ħ","ƕ","ȟ","ɥ","ɦ","ʮ","ʯ","ʰ","ʱ","ͪ","Һ","һ","ᑋ","ᶣ","ḣ","ḥ","ḧ","ḩ","ḫ","ⱨ","ｈ"],i:["i","ì","í","î","ï","ĩ","ī","ĭ","į","ǐ","ȉ","ȋ","ɨ","ͥ","ᴉ","ᵎ","ᵢ","ᶖ","ᶤ","ḭ","ḯ","ỉ","ị","ｉ"],j:["j","ĵ","ǰ","ɉ","ʝ","ʲ","ᶡ","ᶨ","ｊ"],k:["k","ķ","ƙ","ǩ","ʞ","ᵏ","ᶄ","ḱ","ḳ","ḵ","ⱪ","ｋ"],l:["l","ĺ","ļ","ľ","ŀ","ł","ƚ","ȴ","ɫ","ɬ","ɭ","ˡ","ᶅ","ᶩ","ᶪ","ḷ","ḹ","ḻ","ḽ","ℓ","ⱡ"],m:["m","ɯ","ɰ","ɱ","ͫ","ᴟ","ᵐ","ᵚ","ᵯ","ᶆ","ᶬ","ᶭ","ḿ","ṁ","ṃ","㎡","㎥","ｍ"],n:["n","ñ","ń","ņ","ň","ŉ","ƞ","ǹ","ȵ","ɲ","ɳ","ᵰ","ᶇ","ᶮ","ᶯ","ṅ","ṇ","ṉ","ṋ","ⁿ","ｎ"],o:["o","ò","ó","ô","õ","ö","ø","ō","ŏ","ő","ơ","ǒ","ǫ","ǭ","ǿ","ȍ","ȏ","ȫ","ȭ","ȯ","ȱ","ɵ","ͦ","о","ӧ","ө","ᴏ","ᴑ","ᴓ","ᴼ","ᵒ","ᶱ","ṍ","ṏ","ṑ","ṓ","ọ","ỏ","ố","ồ","ổ","ỗ","ộ","ớ","ờ","ở","ỡ","ợ","ₒ","ｏ","𐐬"],p:["p","ᵖ","ᵱ","ᵽ","ᶈ","ṕ","ṗ","ｐ"],q:["q","ɋ","ʠ","ᛩ","ｑ"],r:["r","ŕ","ŗ","ř","ȑ","ȓ","ɍ","ɹ","ɻ","ʳ","ʴ","ʵ","ͬ","ᵣ","ᵲ","ᶉ","ṙ","ṛ","ṝ","ṟ"],s:["s","ś","ŝ","ş","š","ș","ʂ","ᔆ","ᶊ","ṡ","ṣ","ṥ","ṧ","ṩ","ｓ"],t:["t","ţ","ť","ŧ","ƫ","ƭ","ț","ʇ","ͭ","ᵀ","ᵗ","ᵵ","ᶵ","ṫ","ṭ","ṯ","ṱ","ẗ","ｔ"],u:["u","ù","ú","û","ü","ũ","ū","ŭ","ů","ű","ų","ư","ǔ","ǖ","ǘ","ǚ","ǜ","ȕ","ȗ","ͧ","ߎ","ᵘ","ᵤ","ṳ","ṵ","ṷ","ṹ","ṻ","ụ","ủ","ứ","ừ","ử","ữ","ự","ｕ"],v:["v","ʋ","ͮ","ᵛ","ᵥ","ᶹ","ṽ","ṿ","ⱱ","ｖ","ⱴ"],w:["w","ŵ","ʷ","ᵂ","ẁ","ẃ","ẅ","ẇ","ẉ","ẘ","ⱳ","ｗ"],x:["x","̽","͓","ᶍ","ͯ","ẋ","ẍ","ₓ","ｘ"],y:["y","ý","ÿ","ŷ","ȳ","ɏ","ʸ","ẏ","ỳ","ỵ","ỷ","ỹ","ｙ"],z:["z","ź","ż","ž","ƶ","ȥ","ɀ","ʐ","ʑ","ᙆ","ᙇ","ᶻ","ᶼ","ᶽ","ẑ","ẓ","ẕ","ⱬ","ｚ"]};const d=function(){let e={};for(let t in u){let n=u[t];for(let r in n){let a=n[r];a!==t&&(e[a]=t)}}return e}(),h=/[^a-z0-9\s,.-]/,g=e=>{if(-1===e.search(h))return e;let t="",n=e.length;for(var r=0;r<n;r++){let n=e.charAt(r);t+=n in d?d[n]:n}return t},p=e=>e.replace(/[\\^$*+?.()|[\]{}]/g,"\\$&");var f={format:e=>e,filterPredicate(e,t,n=!1,r=!1){if(null==e)return!1;const a=n?String(e).toLowerCase():g(p(String(e)).toLowerCase()),o=n?t.toLowerCase():g(p(t).toLowerCase());return r?a===o:a.indexOf(o)>-1},compare(e,t){function n(e){return null==e?"":g(String(e).toLowerCase())}return(e=n(e))<(t=n(t))?-1:e>t?1:0}},m=(e,t)=>{const n=e.__vccOpts||e;for(const[e,r]of t)n[e]=r;return n};const w={name:"VgtPaginationPageInfo",props:{currentPage:{default:1},lastPage:{default:1},totalRecords:{default:0},ofText:{default:"of",type:String},pageText:{default:"page",type:String},currentPerPage:{},mode:{default:o},infoFn:{default:null}},data(){return{id:this.getId()}},computed:{pageInfo(){return`${this.ofText} ${this.lastPage}`},firstRecordOnPage(){return(this.currentPage-1)*this.currentPerPage+1},lastRecordOnPage(){return Math.min(this.totalRecords,this.currentPage*this.currentPerPage)},recordInfo(){let e=this.firstRecordOnPage;const t=this.lastRecordOnPage;return 0===t&&(e=0),`${e} - ${t} ${this.ofText} ${this.totalRecords}`},infoParams(){let e=this.firstRecordOnPage;const t=this.lastRecordOnPage;return 0===t&&(e=0),{firstRecordOnPage:e,lastRecordOnPage:t,totalRecords:this.totalRecords,currentPage:this.currentPage,totalPages:this.lastPage}}},methods:{getId:()=>`vgt-page-input-${Math.floor(Math.random()*Date.now())}`,changePage(e){const t=parseInt(e.target.value,10);
+var VueGoodTable=function(e,t){"use strict";var n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},r={exports:{}};!function(e,t){var r="__lodash_hash_undefined__",a=1,o=2,i=9007199254740991,l="[object Arguments]",s="[object Array]",c="[object AsyncFunction]",u="[object Boolean]",d="[object Date]",h="[object Error]",f="[object Function]",p="[object GeneratorFunction]",g="[object Map]",m="[object Number]",w="[object Null]",v="[object Object]",y="[object Promise]",b="[object Proxy]",k="[object RegExp]",C="[object Set]",x="[object String]",P="[object Symbol]",T="[object Undefined]",S="[object WeakMap]",E="[object ArrayBuffer]",R="[object DataView]",O=/^\[object .+?Constructor\]$/,B=/^(?:0|[1-9]\d*)$/,D={};D["[object Float32Array]"]=D["[object Float64Array]"]=D["[object Int8Array]"]=D["[object Int16Array]"]=D["[object Int32Array]"]=D["[object Uint8Array]"]=D["[object Uint8ClampedArray]"]=D["[object Uint16Array]"]=D["[object Uint32Array]"]=!0,D[l]=D[s]=D[E]=D[u]=D[R]=D[d]=D[h]=D[f]=D[g]=D[m]=D[v]=D[k]=D[C]=D[x]=D[S]=!1;var N="object"==typeof n&&n&&n.Object===Object&&n,_="object"==typeof self&&self&&self.Object===Object&&self,F=N||_||Function("return this")(),M=t&&!t.nodeType&&t,A=M&&e&&!e.nodeType&&e,I=A&&A.exports===M,V=I&&N.process,U=function(){try{return V&&V.binding&&V.binding("util")}catch(e){}}(),$=U&&U.isTypedArray;function j(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function L(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function z(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var H,Y,q,W=Array.prototype,G=Object.prototype,Q=F["__core-js_shared__"],K=Function.prototype.toString,X=G.hasOwnProperty,J=(H=/[^.]+$/.exec(Q&&Q.keys&&Q.keys.IE_PROTO||""))?"Symbol(src)_1."+H:"",Z=G.toString,ee=RegExp("^"+K.call(X).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),te=I?F.Buffer:void 0,ne=F.Symbol,re=F.Uint8Array,ae=G.propertyIsEnumerable,oe=W.splice,ie=ne?ne.toStringTag:void 0,le=Object.getOwnPropertySymbols,se=te?te.isBuffer:void 0,ce=(Y=Object.keys,q=Object,function(e){return Y(q(e))}),ue=Ve(F,"DataView"),de=Ve(F,"Map"),he=Ve(F,"Promise"),fe=Ve(F,"Set"),pe=Ve(F,"WeakMap"),ge=Ve(Object,"create"),me=Le(ue),we=Le(de),ve=Le(he),ye=Le(fe),be=Le(pe),ke=ne?ne.prototype:void 0,Ce=ke?ke.valueOf:void 0;function xe(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Pe(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Te(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Se(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Te;++t<n;)this.add(e[t])}function Ee(e){var t=this.__data__=new Pe(e);this.size=t.size}function Re(e,t){var n=Ye(e),r=!n&&He(e),a=!n&&!r&&qe(e),o=!n&&!r&&!a&&Xe(e),i=n||r||a||o,l=i?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],s=l.length;for(var c in e)!t&&!X.call(e,c)||i&&("length"==c||a&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||je(c,s))||l.push(c);return l}function Oe(e,t){for(var n=e.length;n--;)if(ze(e[n][0],t))return n;return-1}function Be(e){return null==e?void 0===e?T:w:ie&&ie in Object(e)?function(e){var t=X.call(e,ie),n=e[ie];try{e[ie]=void 0;var r=!0}catch(e){}var a=Z.call(e);r&&(t?e[ie]=n:delete e[ie]);return a}(e):function(e){return Z.call(e)}(e)}function De(e){return Ke(e)&&Be(e)==l}function Ne(e,t,n,r,i){return e===t||(null==e||null==t||!Ke(e)&&!Ke(t)?e!=e&&t!=t:function(e,t,n,r,i,c){var f=Ye(e),p=Ye(t),w=f?s:$e(e),y=p?s:$e(t),b=(w=w==l?v:w)==v,T=(y=y==l?v:y)==v,S=w==y;if(S&&qe(e)){if(!qe(t))return!1;f=!0,b=!1}if(S&&!b)return c||(c=new Ee),f||Xe(e)?Me(e,t,n,r,i,c):function(e,t,n,r,i,l,s){switch(n){case R:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case E:return!(e.byteLength!=t.byteLength||!l(new re(e),new re(t)));case u:case d:case m:return ze(+e,+t);case h:return e.name==t.name&&e.message==t.message;case k:case x:return e==t+"";case g:var c=L;case C:if(c||(c=z),e.size!=t.size&&!(r&a))return!1;var f=s.get(e);if(f)return f==t;r|=o,s.set(e,t);var p=Me(c(e),c(t),r,i,l,s);return s.delete(e),p;case P:if(Ce)return Ce.call(e)==Ce.call(t)}return!1}(e,t,w,n,r,i,c);if(!(n&a)){var O=b&&X.call(e,"__wrapped__"),B=T&&X.call(t,"__wrapped__");if(O||B){var D=O?e.value():e,N=B?t.value():t;return c||(c=new Ee),i(D,N,n,r,c)}}if(!S)return!1;return c||(c=new Ee),function(e,t,n,r,o,i){var l=n&a,s=Ae(e),c=s.length,u=Ae(t);if(c!=u.length&&!l)return!1;var d=c;for(;d--;){var h=s[d];if(!(l?h in t:X.call(t,h)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var p=!0;i.set(e,t),i.set(t,e);var g=l;for(;++d<c;){var m=e[h=s[d]],w=t[h];if(r)var v=l?r(w,m,h,t,e,i):r(m,w,h,e,t,i);if(!(void 0===v?m===w||o(m,w,n,r,i):v)){p=!1;break}g||(g="constructor"==h)}if(p&&!g){var y=e.constructor,b=t.constructor;y==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(p=!1)}return i.delete(e),i.delete(t),p}(e,t,n,r,i,c)}(e,t,n,r,Ne,i))}function _e(e){return!(!Qe(e)||function(e){return!!J&&J in e}(e))&&(We(e)?ee:O).test(Le(e))}function Fe(e){if((t=e)!==("function"==typeof(n=t&&t.constructor)&&n.prototype||G))return ce(e);var t,n,r=[];for(var a in Object(e))X.call(e,a)&&"constructor"!=a&&r.push(a);return r}function Me(e,t,n,r,i,l){var s=n&a,c=e.length,u=t.length;if(c!=u&&!(s&&u>c))return!1;var d=l.get(e);if(d&&l.get(t))return d==t;var h=-1,f=!0,p=n&o?new Se:void 0;for(l.set(e,t),l.set(t,e);++h<c;){var g=e[h],m=t[h];if(r)var w=s?r(m,g,h,t,e,l):r(g,m,h,e,t,l);if(void 0!==w){if(w)continue;f=!1;break}if(p){if(!j(t,(function(e,t){if(!p.has(t)&&(g===e||i(g,e,n,r,l)))return p.push(t)}))){f=!1;break}}else if(g!==m&&!i(g,m,n,r,l)){f=!1;break}}return l.delete(e),l.delete(t),f}function Ae(e){return function(e,t,n){var r=t(e);return Ye(e)?r:function(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}(r,n(e))}(e,Je,Ue)}function Ie(e,t){var n,r,a=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?a["string"==typeof t?"string":"hash"]:a.map}function Ve(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return _e(n)?n:void 0}xe.prototype.clear=function(){this.__data__=ge?ge(null):{},this.size=0},xe.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},xe.prototype.get=function(e){var t=this.__data__;if(ge){var n=t[e];return n===r?void 0:n}return X.call(t,e)?t[e]:void 0},xe.prototype.has=function(e){var t=this.__data__;return ge?void 0!==t[e]:X.call(t,e)},xe.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ge&&void 0===t?r:t,this},Pe.prototype.clear=function(){this.__data__=[],this.size=0},Pe.prototype.delete=function(e){var t=this.__data__,n=Oe(t,e);return!(n<0)&&(n==t.length-1?t.pop():oe.call(t,n,1),--this.size,!0)},Pe.prototype.get=function(e){var t=this.__data__,n=Oe(t,e);return n<0?void 0:t[n][1]},Pe.prototype.has=function(e){return Oe(this.__data__,e)>-1},Pe.prototype.set=function(e,t){var n=this.__data__,r=Oe(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Te.prototype.clear=function(){this.size=0,this.__data__={hash:new xe,map:new(de||Pe),string:new xe}},Te.prototype.delete=function(e){var t=Ie(this,e).delete(e);return this.size-=t?1:0,t},Te.prototype.get=function(e){return Ie(this,e).get(e)},Te.prototype.has=function(e){return Ie(this,e).has(e)},Te.prototype.set=function(e,t){var n=Ie(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Se.prototype.add=Se.prototype.push=function(e){return this.__data__.set(e,r),this},Se.prototype.has=function(e){return this.__data__.has(e)},Ee.prototype.clear=function(){this.__data__=new Pe,this.size=0},Ee.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Ee.prototype.get=function(e){return this.__data__.get(e)},Ee.prototype.has=function(e){return this.__data__.has(e)},Ee.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Pe){var r=n.__data__;if(!de||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Te(r)}return n.set(e,t),this.size=n.size,this};var Ue=le?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,a=0,o=[];++n<r;){var i=e[n];t(i,n,e)&&(o[a++]=i)}return o}(le(e),(function(t){return ae.call(e,t)})))}:function(){return[]},$e=Be;function je(e,t){return!!(t=null==t?i:t)&&("number"==typeof e||B.test(e))&&e>-1&&e%1==0&&e<t}function Le(e){if(null!=e){try{return K.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function ze(e,t){return e===t||e!=e&&t!=t}(ue&&$e(new ue(new ArrayBuffer(1)))!=R||de&&$e(new de)!=g||he&&$e(he.resolve())!=y||fe&&$e(new fe)!=C||pe&&$e(new pe)!=S)&&($e=function(e){var t=Be(e),n=t==v?e.constructor:void 0,r=n?Le(n):"";if(r)switch(r){case me:return R;case we:return g;case ve:return y;case ye:return C;case be:return S}return t});var He=De(function(){return arguments}())?De:function(e){return Ke(e)&&X.call(e,"callee")&&!ae.call(e,"callee")},Ye=Array.isArray;var qe=se||function(){return!1};function We(e){if(!Qe(e))return!1;var t=Be(e);return t==f||t==p||t==c||t==b}function Ge(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=i}function Qe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ke(e){return null!=e&&"object"==typeof e}var Xe=$?function(e){return function(t){return e(t)}}($):function(e){return Ke(e)&&Ge(e.length)&&!!D[Be(e)]};function Je(e){return null!=(t=e)&&Ge(t.length)&&!We(t)?Re(e):Fe(e);var t}e.exports=function(e,t){return Ne(e,t)}}(r,r.exports);var a=r.exports,o=(e,t)=>{const n=e.__vccOpts||e;for(const[e,r]of t)n[e]=r;return n};const i={name:"VgtGlobalSearch",props:["value","searchEnabled","globalSearchPlaceholder"],emits:["input","keyup","enter"],data(){return{globalSearchTerm:null,id:this.getId()}},computed:{showControlBar(){return!!this.searchEnabled||!(!this.$slots||!this.$slots["internal-table-actions"])}},methods:{updateValue(e){this.$emit("input",e),this.$emit("keyup",e)},entered(e){this.$emit("enter",e)},getId:()=>`vgt-search-${Math.floor(Math.random()*Date.now())}`}},l={key:0,class:"vgt-global-search vgt-clearfix"},s={class:"vgt-global-search__input vgt-pull-left"},c=["for"],u=[t.createElementVNode("span",{"aria-hidden":"true",class:"input__icon"},[t.createElementVNode("div",{class:"magnifying-glass"})],-1),t.createElementVNode("span",{class:"sr-only"},"Search",-1)],d=["id","placeholder","value"],h={class:"vgt-global-search__actions vgt-pull-right"};var f=o(i,[["render",function(e,n,r,a,o,i){return i.showControlBar?(t.openBlock(),t.createElementBlock("div",l,[t.createElementVNode("div",s,[r.searchEnabled?(t.openBlock(),t.createElementBlock("form",{key:0,onSubmit:n[2]||(n[2]=t.withModifiers((()=>{}),["prevent"])),role:"search"},[t.createElementVNode("label",{for:o.id},[...u],8,c),t.createElementVNode("input",{id:o.id,type:"text",class:"vgt-input vgt-pull-left",placeholder:r.globalSearchPlaceholder,value:r.value,onInput:n[0]||(n[0]=e=>i.updateValue(e.target.value)),onKeyup:n[1]||(n[1]=t.withKeys((e=>i.entered(e.target.value)),["enter"]))},null,40,d)],32)):t.createCommentVNode("v-if",!0)]),t.createElementVNode("div",h,[t.renderSlot(e.$slots,"internal-table-actions")])])):t.createCommentVNode("v-if",!0)}]]);const p={name:"VgtHeaderRow",props:{headerRow:{type:Object},columns:{type:Array},lineNumbers:{type:Boolean},selectable:{type:Boolean},selectAllByGroup:{type:Boolean},collapsable:{type:[Boolean,Number],default:!1},collectFormatted:{type:Function},formattedRow:{type:Function},getClasses:{type:Function},fullColspan:{type:Number},groupIndex:{type:Number}},emits:["vgtExpand","select-group-change"],data:()=>({}),computed:{allSelected(){const{headerRow:e}=this;return e.children.filter((e=>e.vgtSelected)).length===e.children.length}},methods:{columnCollapsable(e){return!0===this.collapsable?0===e:e===this.collapsable},toggleSelectGroup(e){this.$emit("select-group-change",{groupIndex:this.groupIndex,checked:e.target.checked})}},mounted(){},components:{}},g=["colspan"],m=["checked"],w=["innerHTML"],v={key:1},y={key:1,class:"vgt-row-header"},b={key:2,class:"vgt-row-header"},k=["checked"],C=["onClick"],x={key:0},P=["innerHTML"];var T=o(p,[["render",function(e,n,r,a,o,i){return t.openBlock(),t.createElementBlock("tr",null,["span"===r.headerRow.mode?(t.openBlock(),t.createElementBlock("th",{key:0,class:"vgt-left-align vgt-row-header",colspan:r.fullColspan},[r.selectAllByGroup?t.renderSlot(e.$slots,"table-header-group-select",{key:0,columns:r.columns,row:r.headerRow},(()=>[t.createElementVNode("input",{type:"checkbox",checked:i.allSelected,onChange:n[0]||(n[0]=e=>i.toggleSelectGroup(e))},null,40,m)])):t.createCommentVNode("v-if",!0),t.createElementVNode("span",{onClick:n[1]||(n[1]=t=>r.collapsable?e.$emit("vgtExpand",!r.headerRow.vgtIsExpanded):()=>{})},[r.collapsable?(t.openBlock(),t.createElementBlock("span",{key:0,class:t.normalizeClass(["triangle",{expand:r.headerRow.vgtIsExpanded}])},null,2)):t.createCommentVNode("v-if",!0),t.renderSlot(e.$slots,"table-header-row",{row:r.headerRow},(()=>[r.headerRow.html?(t.openBlock(),t.createElementBlock("span",{key:0,innerHTML:r.headerRow.label},null,8,w)):(t.openBlock(),t.createElementBlock("span",v,t.toDisplayString(r.headerRow.label),1))]))])],8,g)):t.createCommentVNode("v-if",!0),t.createCommentVNode(" if the mode is not span, we display every column "),"span"!==r.headerRow.mode&&r.lineNumbers?(t.openBlock(),t.createElementBlock("th",y)):t.createCommentVNode("v-if",!0),"span"!==r.headerRow.mode&&r.selectable?(t.openBlock(),t.createElementBlock("th",b,[r.selectAllByGroup?t.renderSlot(e.$slots,"table-header-group-select",{key:0,columns:r.columns,row:r.headerRow},(()=>[t.createElementVNode("input",{type:"checkbox",checked:i.allSelected,onChange:n[2]||(n[2]=e=>i.toggleSelectGroup(e))},null,40,k)])):t.createCommentVNode("v-if",!0)])):t.createCommentVNode("v-if",!0),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((n,a)=>(t.openBlock(),t.createElementBlock(t.Fragment,{key:a},["span"===r.headerRow.mode||n.hidden?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("th",{key:0,class:t.normalizeClass(["vgt-row-header",r.getClasses(a,"td")]),onClick:t=>i.columnCollapsable(a)?e.$emit("vgtExpand",!r.headerRow.vgtIsExpanded):()=>{}},[i.columnCollapsable(a)?(t.openBlock(),t.createElementBlock("span",{key:0,class:t.normalizeClass(["triangle",{expand:r.headerRow.vgtIsExpanded}])},null,2)):t.createCommentVNode("v-if",!0),t.renderSlot(e.$slots,"table-header-row",{row:r.headerRow,column:n,formattedRow:r.formattedRow(r.headerRow,!0)},(()=>[n.html?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("span",x,t.toDisplayString(r.collectFormatted(r.headerRow,n,!0)),1)),n.html?(t.openBlock(),t.createElementBlock("span",{key:1,innerHTML:r.collectFormatted(r.headerRow,n,!0)},null,8,P)):t.createCommentVNode("v-if",!0)]))],10,C))],64)))),128))])}]]);const S={key:0},E={key:0},R={key:1},O={key:2},B={key:0},D=["name","placeholder","value","onKeyup","onInput"],N=["name","value","onChange"],_={value:"",key:"-1"},F=["value"],M=["name","value","onChange"],A={value:"",key:"-1"},I=["value"];var V=o({name:"VgtFilterRow",props:["lineNumbers","columns","expandRowsEnabled","typedColumns","globalSearchEnabled","selectable","mode"],emits:["filter-changed"],watch:{columns:{handler(e,t){this.populateInitialFilters()},deep:!0,immediate:!0}},data:()=>({columnFilters:{},timer:null}),computed:{hasFilterRow(){for(let e=0;e<this.columns.length;e++){const t=this.columns[e];if(t.filterOptions&&t.filterOptions.enabled)return!0}return!1}},methods:{fieldKey:e=>"function"==typeof e&&e.name?e.name:e,reset(e=!1){this.columnFilters={},e&&this.$emit("filter-changed",this.columnFilters)},isFilterable:e=>e.filterOptions&&e.filterOptions.enabled,isDropdown(e){return this.isFilterable(e)&&e.filterOptions.filterDropdownItems&&e.filterOptions.filterDropdownItems.length},isDropdownObjects(e){return this.isDropdown(e)&&"object"==typeof e.filterOptions.filterDropdownItems[0]},isDropdownArray(e){return this.isDropdown(e)&&"object"!=typeof e.filterOptions.filterDropdownItems[0]},getClasses(e){const t="filter-th";return e.filterOptions&&e.filterOptions.styleClass?[t,...e.filterOptions.styleClass.split(" ")].join(" "):t},getPlaceholder(e){return this.isFilterable(e)&&e.filterOptions.placeholder||`Filter ${e.label}`},getName(e){return`vgt-${this.fieldKey(e.field)}`},updateFiltersOnEnter(e,t){this.timer&&clearTimeout(this.timer),this.updateFiltersImmediately(e.field,t)},updateFiltersOnKeyup(e,t){"enter"!==e.filterOptions.trigger&&this.updateFilters(e,t)},updateSlotFilter(e,t){let n=e.filterOptions.slotFilterField||e.field;"function"==typeof e.filterOptions.formatValue&&(t=e.filterOptions.formatValue(t)),this.updateFiltersImmediately(n,t)},updateFilters(e,t){this.timer&&clearTimeout(this.timer),this.timer=setTimeout((()=>{this.updateFiltersImmediately(e.field,t)}),400)},updateFiltersImmediately(e,t){this.columnFilters[this.fieldKey(e)]=t,this.$emit("filter-changed",this.columnFilters)},populateInitialFilters(){for(let e=0;e<this.columns.length;e++){const t=this.columns[e];this.isFilterable(t)&&null!=t.filterOptions.filterValue&&(this.columnFilters[this.fieldKey(t.field)]=t.filterOptions.filterValue)}this.$emit("filter-changed",this.columnFilters)}}},[["render",function(e,n,r,a,o,i){return i.hasFilterRow?(t.openBlock(),t.createElementBlock("tr",S,[r.expandRowsEnabled?(t.openBlock(),t.createElementBlock("th",E)):t.createCommentVNode("v-if",!0),r.lineNumbers?(t.openBlock(),t.createElementBlock("th",R)):t.createCommentVNode("v-if",!0),r.selectable?(t.openBlock(),t.createElementBlock("th",O)):t.createCommentVNode("v-if",!0),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((n,r)=>(t.openBlock(),t.createElementBlock(t.Fragment,{key:r},[n.hidden?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("th",{key:0,class:t.normalizeClass(i.getClasses(n))},[t.renderSlot(e.$slots,"column-filter",{column:n,updateFilters:i.updateSlotFilter},(()=>[i.isFilterable(n)?(t.openBlock(),t.createElementBlock("div",B,[i.isDropdown(n)?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("input",{key:0,name:i.getName(n),type:"text",class:"vgt-input",placeholder:i.getPlaceholder(n),value:o.columnFilters[i.fieldKey(n.field)],onKeyup:t.withKeys((e=>i.updateFiltersOnEnter(n,e.target.value)),["enter"]),onInput:e=>i.updateFiltersOnKeyup(n,e.target.value)},null,40,D)),t.createCommentVNode(" options are a list of primitives "),i.isDropdownArray(n)?(t.openBlock(),t.createElementBlock("select",{key:1,name:i.getName(n),class:"vgt-select",value:o.columnFilters[i.fieldKey(n.field)],onChange:e=>i.updateFiltersImmediately(n.field,e.target.value)},[t.createElementVNode("option",_,t.toDisplayString(i.getPlaceholder(n)),1),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(n.filterOptions.filterDropdownItems,((e,n)=>(t.openBlock(),t.createElementBlock("option",{key:n,value:e},t.toDisplayString(e),9,F)))),128))],40,N)):t.createCommentVNode("v-if",!0),t.createCommentVNode(" options are a list of objects with text and value "),i.isDropdownObjects(n)?(t.openBlock(),t.createElementBlock("select",{key:2,name:i.getName(n),class:"vgt-select",value:o.columnFilters[i.fieldKey(n.field)],onChange:e=>i.updateFiltersImmediately(n.field,e.target.value)},[t.createElementVNode("option",A,t.toDisplayString(i.getPlaceholder(n)),1),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(n.filterOptions.filterDropdownItems,((e,n)=>(t.openBlock(),t.createElementBlock("option",{key:n,value:e.value},t.toDisplayString(e.text),9,I)))),128))],40,M)):t.createCommentVNode("v-if",!0)])):t.createCommentVNode("v-if",!0)]))],2))],64)))),128))])):t.createCommentVNode("v-if",!0)}]]);const U="asc",$="asc",j="desc",L="none",z="records",H=[10,20,30,40,50];function Y(e){return e.firstSortType||U}function q(e,t){return j===Y(t)&&e===$?L:e===$?j:j===Y(t)&&e===j?$:e===j?L:j===Y(t)&&e===L?j:$}const W={name:"VgtTableHeader",props:{lineNumbers:{default:!1,type:Boolean},selectable:{default:!1,type:Boolean},allSelected:{default:!1,type:Boolean},allSelectedIndeterminate:{default:!1,type:Boolean},columns:{type:Array},expandRowsEnabled:{default:!1,type:Boolean},mode:{type:String},typedColumns:{},sortable:{type:Boolean},multipleColumnSort:{type:Boolean,default:!0},getClasses:{type:Function},searchEnabled:{type:Boolean},tableRef:{},paginated:{}},emits:["toggle-select-all","toggle-expand-rows-all","sort-change","filter-changed"],watch:{columns:{handler(){this.setColumnStyles()},immediate:!0,deep:!0},tableRef:{handler(){this.setColumnStyles()},immediate:!0},paginated:{handler(){this.tableRef&&this.setColumnStyles()},deep:!0}},data:()=>({checkBoxThStyle:{},lineNumberThStyle:{},columnStyles:[],sorts:[],ro:null}),computed:{},methods:{reset(){this.$refs["filter-row"].reset(!0)},toggleExpandRowsAll(){this.$emit("toggle-expand-rows-all")},toggleSelectAll(){this.$emit("toggle-select-all")},isSortableColumn(e){const{sortable:t}=e;return"boolean"==typeof t?t:this.sortable},sort(e,t){this.isSortableColumn(t)&&(this.sorts=e.shiftKey&&this.multipleColumnSort?((e,t)=>{const n=function(e,t){for(let n=0;n<e.length;n++)if(t.field===e[n].field)return n;return-1}(e,t);return-1===n?e.push({field:t.field,type:Y(t)}):e[n].type=q(e[n].type,t),e})(this.sorts,t):((e,t)=>{const n=function(e,t){return 1===e.length&&e[0].field===t.field?e[0].type:void 0}(e,t),r=q(n,t);return[{field:t.field,type:n?r:Y(t)}]})(this.sorts,t),this.$emit("sort-change",this.sorts))},setInitialSort(e){this.sorts=e,this.$emit("sort-change",this.sorts)},getColumnSort(e){for(let t=0;t<this.sorts.length;t+=1)if(this.sorts[t].field===e.field)return this.sorts[t].type||"asc";return null},getColumnSortLong(e){return"asc"===this.getColumnSort(e)?"ascending":"descending"},getHeaderClasses(e,t){return Object.assign({},this.getClasses(t,"th"),{sortable:this.isSortableColumn(e),"sorting sorting-desc":"desc"===this.getColumnSort(e),"sorting sorting-asc":"asc"===this.getColumnSort(e)})},filterRows(e){this.$emit("filter-changed",e)},getWidthStyle(e){if(window&&window.getComputedStyle&&e){return{width:window.getComputedStyle(e,null).width}}return{width:"auto"}},setColumnStyles(){const e=[];for(let t=0;t<this.columns.length;t++)if(this.tableRef){let n=0;this.selectable&&n++,this.lineNumbers&&n++;e.push(this.getWidthStyle(this.tableRef.rows[0].cells[t+n]))}else e.push({minWidth:this.columns[t].width?this.columns[t].width:"auto",maxWidth:this.columns[t].width?this.columns[t].width:"auto",width:this.columns[t].width?this.columns[t].width:"auto"});this.columnStyles=e},getColumnStyle(e,t){const n={minWidth:e.width?e.width:"auto",maxWidth:e.width?e.width:"auto",width:e.width?e.width:"auto"};if(this.tableRef){this.selectable&&t++,this.lineNumbers&&t++;const e=window.getComputedStyle(this.tableRef.rows[0].cells[t],null);n.width=e.width}return n}},mounted(){this.$nextTick((()=>{"ResizeObserver"in window&&(this.ro=new ResizeObserver((()=>{this.setColumnStyles()})),this.ro.observe(this.$parent.$el),this.tableRef&&Array.from(this.$parent.$refs["table-header-primary"].$el.children[0].children).forEach((e=>{this.ro.observe(e)})))}))},beforeUnmount(){this.ro&&this.ro.disconnect()},components:{"vgt-filter-row":V}},G={key:0,scope:"col",class:"line-numbers"},Q={key:1,scope:"col",class:"vgt-checkbox-col"},K=["checked",".indeterminate"],X={key:2,scope:"col",class:"vgt-checkbox-col"},J=["title","aria-sort","aria-controls"],Z=["onClick"],ee={class:"sr-only"};var te=o(W,[["render",function(e,n,r,a,o,i){const l=t.resolveComponent("vgt-filter-row");return t.openBlock(),t.createElementBlock("thead",null,[t.createElementVNode("tr",null,[r.lineNumbers?(t.openBlock(),t.createElementBlock("th",G)):t.createCommentVNode("v-if",!0),r.selectable?(t.openBlock(),t.createElementBlock("th",Q,[t.createElementVNode("input",{type:"checkbox",checked:r.allSelected,".indeterminate":r.allSelectedIndeterminate,onChange:n[0]||(n[0]=(...e)=>i.toggleSelectAll&&i.toggleSelectAll(...e))},null,40,K)])):t.createCommentVNode("v-if",!0),r.expandRowsEnabled?(t.openBlock(),t.createElementBlock("th",X,[t.createElementVNode("a",{href:"",onClick:n[1]||(n[1]=t.withModifiers(((...e)=>i.toggleExpandRowsAll&&i.toggleExpandRowsAll(...e)),["prevent"])),class:"vgt-wrap__expander"}," (+) ")])):t.createCommentVNode("v-if",!0),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((n,r)=>(t.openBlock(),t.createElementBlock(t.Fragment,{key:r},[n.hidden?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("th",{key:0,scope:"col",title:n.tooltip,class:t.normalizeClass(i.getHeaderClasses(n,r)),style:t.normalizeStyle(o.columnStyles[r]),"aria-sort":i.getColumnSortLong(n),"aria-controls":`col-${r}`},[t.renderSlot(e.$slots,"table-column",{column:n},(()=>[t.createTextVNode(t.toDisplayString(n.label),1)])),i.isSortableColumn(n)?(t.openBlock(),t.createElementBlock("button",{key:0,onClick:e=>i.sort(e,n)},[t.createElementVNode("span",ee," Sort table by "+t.toDisplayString(n.label)+" in "+t.toDisplayString(i.getColumnSortLong(n))+" order ",1)],8,Z)):t.createCommentVNode("v-if",!0)],14,J))],64)))),128))]),t.createVNode(l,{ref:"filter-row",onFilterChanged:i.filterRows,"global-search-enabled":r.searchEnabled,"line-numbers":r.lineNumbers,"expand-rows-enabled":r.expandRowsEnabled,selectable:r.selectable,columns:r.columns,mode:r.mode,"typed-columns":r.typedColumns},{"column-filter":t.withCtx((n=>[t.renderSlot(e.$slots,"column-filter",{column:n.column,updateFilters:n.updateFilters})])),_:3},8,["onFilterChanged","global-search-enabled","line-numbers","expand-rows-enabled","selectable","columns","mode","typed-columns"])])}]]);const ne={name:"VgtPaginationPageInfo",props:{currentPage:{default:1},lastPage:{default:1},totalRecords:{default:0},ofText:{default:"of",type:String},pageText:{default:"page",type:String},currentPerPage:{},mode:{default:z},infoFn:{default:null}},data(){return{id:this.getId()}},computed:{pageInfo(){return`${this.ofText} ${this.lastPage}`},firstRecordOnPage(){return(this.currentPage-1)*this.currentPerPage+1},lastRecordOnPage(){return Math.min(this.totalRecords,this.currentPage*this.currentPerPage)},recordInfo(){let e=this.firstRecordOnPage;const t=this.lastRecordOnPage;return 0===t&&(e=0),`${e} - ${t} ${this.ofText} ${this.totalRecords}`},infoParams(){let e=this.firstRecordOnPage;const t=this.lastRecordOnPage;return 0===t&&(e=0),{firstRecordOnPage:e,lastRecordOnPage:t,totalRecords:this.totalRecords,currentPage:this.currentPage,totalPages:this.lastPage}}},methods:{getId:()=>`vgt-page-input-${Math.floor(Math.random()*Date.now())}`,changePage(e){const t=parseInt(e.target.value,10);
 //! invalid number
-if(Number.isNaN(t)||t>this.lastPage||t<1)return e.target.value=this.currentPage,!1;e.target.value=t,this.$emit("page-changed",t)}},mounted(){},components:{}},b={class:"footer__navigation__page-info"},y={key:0},v=["for"],C=["id","value"],x=t.createElementVNode("span",{id:"change-page-hint",style:{display:"none"}}," Type a page number and press Enter to change the page. ",-1),k={key:2};var P=m(w,[["render",function(e,n,r,a,o,i){return t.openBlock(),t.createElementBlock("div",b,[r.infoFn?(t.openBlock(),t.createElementBlock("div",y,t.toDisplayString(r.infoFn(i.infoParams)),1)):"pages"===r.mode?(t.openBlock(),t.createElementBlock("form",{key:1,onSubmit:n[1]||(n[1]=t.withModifiers((()=>{}),["prevent"]))},[t.createElementVNode("label",{for:o.id,class:"page-info__label"},[t.createElementVNode("span",null,t.toDisplayString(r.pageText),1),t.createElementVNode("input",{id:o.id,"aria-describedby":"change-page-hint","aria-controls":"vgb-table",class:"footer__navigation__page-info__current-entry",type:"text",onKeyup:n[0]||(n[0]=t.withKeys(t.withModifiers(((...e)=>i.changePage&&i.changePage(...e)),["stop"]),["enter"])),value:r.currentPage},null,40,C),t.createElementVNode("span",null,t.toDisplayString(i.pageInfo),1)],8,v),x],32)):(t.openBlock(),t.createElementBlock("div",k,t.toDisplayString(i.recordInfo),1))])}]]);const T={class:"vgt-wrap__footer vgt-clearfix"},S={key:0,class:"footer__row-count vgt-pull-left"},E=["for"],R=["id"],B=["value"],D=["value"],N={class:"footer__navigation vgt-pull-right"};var O=m({name:"VgtPagination",props:{styleClass:{default:"table table-bordered"},total:{default:null},perPage:{},rtl:{default:!1},perPageDropdownEnabled:{default:!0},customRowsPerPageDropdown:{default:()=>[]},paginateDropdownAllowAll:{default:!0},mode:{default:o},nextText:{default:"Next"},prevText:{default:"Prev"},rowsPerPageText:{default:"Rows per page:"},ofText:{default:"of"},pageText:{default:"page"},allText:{default:"All"},infoFn:{default:null}},data(){return{id:this.getId(),currentPage:1,prevPage:0,currentPerPage:10,rowsPerPageOptions:[]}},watch:{perPage:{handler(e,t){this.handlePerPage(),this.perPageChanged(t)},immediate:!0},customRowsPerPageDropdown:{handler(){this.handlePerPage()},deep:!0},total:{handler(e,t){-1===this.rowsPerPageOptions.indexOf(this.currentPerPage)&&(this.currentPerPage=e)}}},computed:{pagesCount(){const e=Math.floor(this.total/this.currentPerPage);return 0===this.total%this.currentPerPage?e:e+1},nextIsPossible(){return this.currentPage<this.pagesCount},prevIsPossible(){return this.currentPage>1}},methods:{getId:()=>`vgt-select-rpp-${Math.floor(Math.random()*Date.now())}`,changePage(e,t=!0){e>0&&this.total>this.currentPerPage*(e-1)&&(this.prevPage=this.currentPage,this.currentPage=e,this.pageChanged(t))},nextPage(){this.nextIsPossible&&(this.prevPage=this.currentPage,++this.currentPage,this.pageChanged())},previousPage(){this.prevIsPossible&&(this.prevPage=this.currentPage,--this.currentPage,this.pageChanged())},pageChanged(e=!0){const t={currentPage:this.currentPage,prevPage:this.prevPage};e||(t.noEmit=!0),this.$emit("page-changed",t)},perPageChanged(e){e&&this.$emit("per-page-changed",{currentPerPage:this.currentPerPage}),this.changePage(1,!1)},handlePerPage(){if(this.rowsPerPageOptions=null!==this.customRowsPerPageDropdown&&Array.isArray(this.customRowsPerPageDropdown)&&0!==this.customRowsPerPageDropdown.length?JSON.parse(JSON.stringify(this.customRowsPerPageDropdown)):JSON.parse(JSON.stringify(i)),this.perPage){this.currentPerPage=this.perPage;let e=!1;for(let t=0;t<this.rowsPerPageOptions.length;t++)this.rowsPerPageOptions[t]===this.perPage&&(e=!0);e||-1===this.perPage||this.rowsPerPageOptions.unshift(this.perPage)}else this.currentPerPage=10}},mounted(){},components:{"pagination-page-info":P}},[["render",function(e,n,r,a,o,i){const l=t.resolveComponent("pagination-page-info");return t.openBlock(),t.createElementBlock("div",T,[r.perPageDropdownEnabled?(t.openBlock(),t.createElementBlock("div",S,[t.createElementVNode("form",null,[t.createElementVNode("label",{for:o.id,class:"footer__row-count__label"},t.toDisplayString(r.rowsPerPageText)+":",9,E),t.withDirectives(t.createElementVNode("select",{id:o.id,autocomplete:"off",name:"perPageSelect",class:"footer__row-count__select","onUpdate:modelValue":n[0]||(n[0]=e=>o.currentPerPage=e),onChange:n[1]||(n[1]=(...e)=>i.perPageChanged&&i.perPageChanged(...e)),"aria-controls":"vgt-table"},[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(o.rowsPerPageOptions,((e,n)=>(t.openBlock(),t.createElementBlock("option",{key:n,value:e},t.toDisplayString(e),9,B)))),128)),r.paginateDropdownAllowAll?(t.openBlock(),t.createElementBlock("option",{key:0,value:r.total},t.toDisplayString(r.allText),9,D)):t.createCommentVNode("v-if",!0)],40,R),[[t.vModelSelect,o.currentPerPage]])])])):t.createCommentVNode("v-if",!0),t.createElementVNode("div",N,[t.createVNode(l,{onPageChanged:i.changePage,"total-records":r.total,"last-page":i.pagesCount,"current-page":o.currentPage,"current-per-page":o.currentPerPage,"of-text":r.ofText,"page-text":r.pageText,"info-fn":r.infoFn,mode:r.mode},null,8,["onPageChanged","total-records","last-page","current-page","current-per-page","of-text","page-text","info-fn","mode"]),t.createElementVNode("button",{type:"button","aria-controls":"vgt-table",class:t.normalizeClass(["footer__navigation__page-btn",{disabled:!i.prevIsPossible}]),onClick:n[2]||(n[2]=t.withModifiers(((...e)=>i.previousPage&&i.previousPage(...e)),["prevent","stop"]))},[t.createElementVNode("span",{"aria-hidden":"true",class:t.normalizeClass(["chevron",{left:!r.rtl,right:r.rtl}])},null,2),t.createElementVNode("span",null,t.toDisplayString(r.prevText),1)],2),t.createElementVNode("button",{type:"button","aria-controls":"vgt-table",class:t.normalizeClass(["footer__navigation__page-btn",{disabled:!i.nextIsPossible}]),onClick:n[3]||(n[3]=t.withModifiers(((...e)=>i.nextPage&&i.nextPage(...e)),["prevent","stop"]))},[t.createElementVNode("span",null,t.toDisplayString(r.nextText),1),t.createElementVNode("span",{"aria-hidden":"true",class:t.normalizeClass(["chevron",{right:!r.rtl,left:r.rtl}])},null,2)],2)])])}]]);const _={name:"VgtGlobalSearch",props:["value","searchEnabled","globalSearchPlaceholder"],emits:["input","keyup","enter"],data(){return{globalSearchTerm:null,id:this.getId()}},computed:{showControlBar(){return!!this.searchEnabled||!(!this.$slots||!this.$slots["internal-table-actions"])}},methods:{updateValue(e){this.$emit("input",e),this.$emit("keyup",e)},entered(e){this.$emit("enter",e)},getId:()=>`vgt-search-${Math.floor(Math.random()*Date.now())}`}},F={key:0,class:"vgt-global-search vgt-clearfix"},M={class:"vgt-global-search__input vgt-pull-left"},I=["for"],U=[t.createElementVNode("span",{"aria-hidden":"true",class:"input__icon"},[t.createElementVNode("div",{class:"magnifying-glass"})],-1),t.createElementVNode("span",{class:"sr-only"},"Search",-1)],V=["id","placeholder","value"],A={class:"vgt-global-search__actions vgt-pull-right"};var $=m(_,[["render",function(e,n,r,a,o,i){return i.showControlBar?(t.openBlock(),t.createElementBlock("div",F,[t.createElementVNode("div",M,[r.searchEnabled?(t.openBlock(),t.createElementBlock("form",{key:0,onSubmit:n[2]||(n[2]=t.withModifiers((()=>{}),["prevent"])),role:"search"},[t.createElementVNode("label",{for:o.id},U,8,I),t.createElementVNode("input",{id:o.id,type:"text",class:"vgt-input vgt-pull-left",placeholder:r.globalSearchPlaceholder,value:r.value,onInput:n[0]||(n[0]=e=>i.updateValue(e.target.value)),onKeyup:n[1]||(n[1]=t.withKeys((e=>i.entered(e.target.value)),["enter"]))},null,40,V)],32)):t.createCommentVNode("v-if",!0)]),t.createElementVNode("div",A,[t.renderSlot(e.$slots,"internal-table-actions")])])):t.createCommentVNode("v-if",!0)}]]);const j={key:0},L={key:0},z={key:1},H={key:2},Y={key:0},q=["name","placeholder","value","onKeyup","onInput"],W=["name","value","onChange"],Q={value:"",key:"-1"},G=["value"],K=["name","value","onChange"],X={value:"",key:"-1"},J=["value"];var Z=m({name:"VgtFilterRow",props:["lineNumbers","columns","expandRowsEnabled","typedColumns","globalSearchEnabled","selectable","mode"],emits:["filter-changed"],watch:{columns:{handler(e,t){this.populateInitialFilters()},deep:!0,immediate:!0}},data:()=>({columnFilters:{},timer:null}),computed:{hasFilterRow(){for(let e=0;e<this.columns.length;e++){const t=this.columns[e];if(t.filterOptions&&t.filterOptions.enabled)return!0}return!1}},methods:{fieldKey:e=>"function"==typeof e&&e.name?e.name:e,reset(e=!1){this.columnFilters={},e&&this.$emit("filter-changed",this.columnFilters)},isFilterable:e=>e.filterOptions&&e.filterOptions.enabled,isDropdown(e){return this.isFilterable(e)&&e.filterOptions.filterDropdownItems&&e.filterOptions.filterDropdownItems.length},isDropdownObjects(e){return this.isDropdown(e)&&"object"==typeof e.filterOptions.filterDropdownItems[0]},isDropdownArray(e){return this.isDropdown(e)&&"object"!=typeof e.filterOptions.filterDropdownItems[0]},getClasses(e){const t="filter-th";return e.filterOptions&&e.filterOptions.styleClass?[t,...e.filterOptions.styleClass.split(" ")].join(" "):t},getPlaceholder(e){return this.isFilterable(e)&&e.filterOptions.placeholder||`Filter ${e.label}`},getName(e){return`vgt-${this.fieldKey(e.field)}`},updateFiltersOnEnter(e,t){this.timer&&clearTimeout(this.timer),this.updateFiltersImmediately(e.field,t)},updateFiltersOnKeyup(e,t){"enter"!==e.filterOptions.trigger&&this.updateFilters(e,t)},updateSlotFilter(e,t){let n=e.filterOptions.slotFilterField||e.field;"function"==typeof e.filterOptions.formatValue&&(t=e.filterOptions.formatValue(t)),this.updateFiltersImmediately(n,t)},updateFilters(e,t){this.timer&&clearTimeout(this.timer),this.timer=setTimeout((()=>{this.updateFiltersImmediately(e.field,t)}),400)},updateFiltersImmediately(e,t){this.columnFilters[this.fieldKey(e)]=t,this.$emit("filter-changed",this.columnFilters)},populateInitialFilters(){for(let e=0;e<this.columns.length;e++){const t=this.columns[e];this.isFilterable(t)&&null!=t.filterOptions.filterValue&&(this.columnFilters[this.fieldKey(t.field)]=t.filterOptions.filterValue)}this.$emit("filter-changed",this.columnFilters)}}},[["render",function(e,n,r,a,o,i){return i.hasFilterRow?(t.openBlock(),t.createElementBlock("tr",j,[r.expandRowsEnabled?(t.openBlock(),t.createElementBlock("th",L)):t.createCommentVNode("v-if",!0),r.lineNumbers?(t.openBlock(),t.createElementBlock("th",z)):t.createCommentVNode("v-if",!0),r.selectable?(t.openBlock(),t.createElementBlock("th",H)):t.createCommentVNode("v-if",!0),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((n,r)=>(t.openBlock(),t.createElementBlock(t.Fragment,{key:r},[n.hidden?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("th",{key:0,class:t.normalizeClass(i.getClasses(n))},[t.renderSlot(e.$slots,"column-filter",{column:n,updateFilters:i.updateSlotFilter},(()=>[i.isFilterable(n)?(t.openBlock(),t.createElementBlock("div",Y,[i.isDropdown(n)?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("input",{key:0,name:i.getName(n),type:"text",class:"vgt-input",placeholder:i.getPlaceholder(n),value:o.columnFilters[i.fieldKey(n.field)],onKeyup:t.withKeys((e=>i.updateFiltersOnEnter(n,e.target.value)),["enter"]),onInput:e=>i.updateFiltersOnKeyup(n,e.target.value)},null,40,q)),t.createCommentVNode(" options are a list of primitives "),i.isDropdownArray(n)?(t.openBlock(),t.createElementBlock("select",{key:1,name:i.getName(n),class:"vgt-select",value:o.columnFilters[i.fieldKey(n.field)],onChange:e=>i.updateFiltersImmediately(n.field,e.target.value)},[t.createElementVNode("option",Q,t.toDisplayString(i.getPlaceholder(n)),1),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(n.filterOptions.filterDropdownItems,((e,n)=>(t.openBlock(),t.createElementBlock("option",{key:n,value:e},t.toDisplayString(e),9,G)))),128))],40,W)):t.createCommentVNode("v-if",!0),t.createCommentVNode(" options are a list of objects with text and value "),i.isDropdownObjects(n)?(t.openBlock(),t.createElementBlock("select",{key:2,name:i.getName(n),class:"vgt-select",value:o.columnFilters[i.fieldKey(n.field)],onChange:e=>i.updateFiltersImmediately(n.field,e.target.value)},[t.createElementVNode("option",X,t.toDisplayString(i.getPlaceholder(n)),1),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(n.filterOptions.filterDropdownItems,((e,n)=>(t.openBlock(),t.createElementBlock("option",{key:n,value:e.value},t.toDisplayString(e.text),9,J)))),128))],40,K)):t.createCommentVNode("v-if",!0)])):t.createCommentVNode("v-if",!0)]))],2))],64)))),128))])):t.createCommentVNode("v-if",!0)}]]);function ee(e){return e.firstSortType||"asc"}function te(e,t){return r===ee(t)&&e===n?a:e===n?r:r===ee(t)&&e===r?n:e===r?a:r===ee(t)&&e===a?r:n}const ne={name:"VgtTableHeader",props:{lineNumbers:{default:!1,type:Boolean},selectable:{default:!1,type:Boolean},allSelected:{default:!1,type:Boolean},allSelectedIndeterminate:{default:!1,type:Boolean},columns:{type:Array},expandRowsEnabled:{default:!1,type:Boolean},mode:{type:String},typedColumns:{},sortable:{type:Boolean},multipleColumnSort:{type:Boolean,default:!0},getClasses:{type:Function},searchEnabled:{type:Boolean},tableRef:{},paginated:{}},emits:["toggle-select-all","toggle-expand-rows-all","sort-change","filter-changed"],watch:{columns:{handler(){this.setColumnStyles()},immediate:!0,deep:!0},tableRef:{handler(){this.setColumnStyles()},immediate:!0},paginated:{handler(){this.tableRef&&this.setColumnStyles()},deep:!0}},data:()=>({checkBoxThStyle:{},lineNumberThStyle:{},columnStyles:[],sorts:[],ro:null}),computed:{},methods:{reset(){this.$refs["filter-row"].reset(!0)},toggleExpandRowsAll(){this.$emit("toggle-expand-rows-all")},toggleSelectAll(){this.$emit("toggle-select-all")},isSortableColumn(e){const{sortable:t}=e;return"boolean"==typeof t?t:this.sortable},sort(e,t){this.isSortableColumn(t)&&(this.sorts=e.shiftKey&&this.multipleColumnSort?((e,t)=>{const n=function(e,t){for(let n=0;n<e.length;n++)if(t.field===e[n].field)return n;return-1}(e,t);return-1===n?e.push({field:t.field,type:ee(t)}):e[n].type=te(e[n].type,t),e})(this.sorts,t):((e,t)=>{const n=function(e,t){return 1===e.length&&e[0].field===t.field?e[0].type:void 0}(e,t),r=te(n,t);return[{field:t.field,type:n?r:ee(t)}]})(this.sorts,t),this.$emit("sort-change",this.sorts))},setInitialSort(e){this.sorts=e,this.$emit("sort-change",this.sorts)},getColumnSort(e){for(let t=0;t<this.sorts.length;t+=1)if(this.sorts[t].field===e.field)return this.sorts[t].type||"asc";return null},getColumnSortLong(e){return"asc"===this.getColumnSort(e)?"ascending":"descending"},getHeaderClasses(e,t){return Object.assign({},this.getClasses(t,"th"),{sortable:this.isSortableColumn(e),"sorting sorting-desc":"desc"===this.getColumnSort(e),"sorting sorting-asc":"asc"===this.getColumnSort(e)})},filterRows(e){this.$emit("filter-changed",e)},getWidthStyle(e){if(window&&window.getComputedStyle&&e){return{width:window.getComputedStyle(e,null).width}}return{width:"auto"}},setColumnStyles(){const e=[];for(let t=0;t<this.columns.length;t++)if(this.tableRef){let n=0;this.selectable&&n++,this.lineNumbers&&n++;e.push(this.getWidthStyle(this.tableRef.rows[0].cells[t+n]))}else e.push({minWidth:this.columns[t].width?this.columns[t].width:"auto",maxWidth:this.columns[t].width?this.columns[t].width:"auto",width:this.columns[t].width?this.columns[t].width:"auto"});this.columnStyles=e},getColumnStyle(e,t){const n={minWidth:e.width?e.width:"auto",maxWidth:e.width?e.width:"auto",width:e.width?e.width:"auto"};if(this.tableRef){this.selectable&&t++,this.lineNumbers&&t++;const e=window.getComputedStyle(this.tableRef.rows[0].cells[t],null);n.width=e.width}return n}},mounted(){this.$nextTick((()=>{"ResizeObserver"in window&&(this.ro=new ResizeObserver((()=>{this.setColumnStyles()})),this.ro.observe(this.$parent.$el),this.tableRef&&Array.from(this.$parent.$refs["table-header-primary"].$el.children[0].children).forEach((e=>{this.ro.observe(e)})))}))},beforeUnmount(){this.ro&&this.ro.disconnect()},components:{"vgt-filter-row":Z}},re={key:0,scope:"col",class:"line-numbers"},ae={key:1,scope:"col",class:"vgt-checkbox-col"},oe=["checked",".indeterminate"],ie={key:2,scope:"col",class:"vgt-checkbox-col"},le=["title","aria-sort","aria-controls"],se=["onClick"],ce={class:"sr-only"};var ue=m(ne,[["render",function(e,n,r,a,o,i){const l=t.resolveComponent("vgt-filter-row");return t.openBlock(),t.createElementBlock("thead",null,[t.createElementVNode("tr",null,[r.lineNumbers?(t.openBlock(),t.createElementBlock("th",re)):t.createCommentVNode("v-if",!0),r.selectable?(t.openBlock(),t.createElementBlock("th",ae,[t.createElementVNode("input",{type:"checkbox",checked:r.allSelected,".indeterminate":r.allSelectedIndeterminate,onChange:n[0]||(n[0]=(...e)=>i.toggleSelectAll&&i.toggleSelectAll(...e))},null,40,oe)])):t.createCommentVNode("v-if",!0),r.expandRowsEnabled?(t.openBlock(),t.createElementBlock("th",ie,[t.createElementVNode("a",{href:"",onClick:n[1]||(n[1]=t.withModifiers(((...e)=>i.toggleExpandRowsAll&&i.toggleExpandRowsAll(...e)),["prevent"])),class:"vgt-wrap__expander"}," (+) ")])):t.createCommentVNode("v-if",!0),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((n,r)=>(t.openBlock(),t.createElementBlock(t.Fragment,{key:r},[n.hidden?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("th",{key:0,scope:"col",title:n.tooltip,class:t.normalizeClass(i.getHeaderClasses(n,r)),style:t.normalizeStyle(o.columnStyles[r]),"aria-sort":i.getColumnSortLong(n),"aria-controls":`col-${r}`},[t.renderSlot(e.$slots,"table-column",{column:n},(()=>[t.createTextVNode(t.toDisplayString(n.label),1)])),i.isSortableColumn(n)?(t.openBlock(),t.createElementBlock("button",{key:0,onClick:e=>i.sort(e,n)},[t.createElementVNode("span",ce," Sort table by "+t.toDisplayString(n.label)+" in "+t.toDisplayString(i.getColumnSortLong(n))+" order ",1)],8,se)):t.createCommentVNode("v-if",!0)],14,le))],64)))),128))]),t.createVNode(l,{ref:"filter-row",onFilterChanged:i.filterRows,"global-search-enabled":r.searchEnabled,"line-numbers":r.lineNumbers,"expand-rows-enabled":r.expandRowsEnabled,selectable:r.selectable,columns:r.columns,mode:r.mode,"typed-columns":r.typedColumns},{"column-filter":t.withCtx((n=>[t.renderSlot(e.$slots,"column-filter",{column:n.column,updateFilters:n.updateFilters})])),_:3},8,["onFilterChanged","global-search-enabled","line-numbers","expand-rows-enabled","selectable","columns","mode","typed-columns"])])}]]);const de={name:"VgtHeaderRow",props:{headerRow:{type:Object},columns:{type:Array},lineNumbers:{type:Boolean},selectable:{type:Boolean},selectAllByGroup:{type:Boolean},collapsable:{type:[Boolean,Number],default:!1},collectFormatted:{type:Function},formattedRow:{type:Function},getClasses:{type:Function},fullColspan:{type:Number},groupIndex:{type:Number}},emits:["vgtExpand","select-group-change"],data:()=>({}),computed:{allSelected(){const{headerRow:e}=this;return e.children.filter((e=>e.vgtSelected)).length===e.children.length}},methods:{columnCollapsable(e){return!0===this.collapsable?0===e:e===this.collapsable},toggleSelectGroup(e){this.$emit("select-group-change",{groupIndex:this.groupIndex,checked:e.target.checked})}},mounted(){},components:{}},he=["colspan"],ge=["checked"],pe=["innerHTML"],fe={key:1},me={key:1,class:"vgt-row-header"},we={key:2,class:"vgt-row-header"},be=["checked"],ye=["onClick"],ve={key:0},Ce=["innerHTML"];var xe=m(de,[["render",function(e,n,r,a,o,i){return t.openBlock(),t.createElementBlock("tr",null,["span"===r.headerRow.mode?(t.openBlock(),t.createElementBlock("th",{key:0,class:"vgt-left-align vgt-row-header",colspan:r.fullColspan},[r.selectAllByGroup?t.renderSlot(e.$slots,"table-header-group-select",{key:0,columns:r.columns,row:r.headerRow},(()=>[t.createElementVNode("input",{type:"checkbox",checked:i.allSelected,onChange:n[0]||(n[0]=e=>i.toggleSelectGroup(e))},null,40,ge)])):t.createCommentVNode("v-if",!0),t.createElementVNode("span",{onClick:n[1]||(n[1]=t=>r.collapsable?e.$emit("vgtExpand",!r.headerRow.vgtIsExpanded):()=>{})},[r.collapsable?(t.openBlock(),t.createElementBlock("span",{key:0,class:t.normalizeClass(["triangle",{expand:r.headerRow.vgtIsExpanded}])},null,2)):t.createCommentVNode("v-if",!0),t.renderSlot(e.$slots,"table-header-row",{row:r.headerRow},(()=>[r.headerRow.html?(t.openBlock(),t.createElementBlock("span",{key:0,innerHTML:r.headerRow.label},null,8,pe)):(t.openBlock(),t.createElementBlock("span",fe,t.toDisplayString(r.headerRow.label),1))]))])],8,he)):t.createCommentVNode("v-if",!0),t.createCommentVNode(" if the mode is not span, we display every column "),"span"!==r.headerRow.mode&&r.lineNumbers?(t.openBlock(),t.createElementBlock("th",me)):t.createCommentVNode("v-if",!0),"span"!==r.headerRow.mode&&r.selectable?(t.openBlock(),t.createElementBlock("th",we,[r.selectAllByGroup?t.renderSlot(e.$slots,"table-header-group-select",{key:0,columns:r.columns,row:r.headerRow},(()=>[t.createElementVNode("input",{type:"checkbox",checked:i.allSelected,onChange:n[2]||(n[2]=e=>i.toggleSelectGroup(e))},null,40,be)])):t.createCommentVNode("v-if",!0)])):t.createCommentVNode("v-if",!0),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((n,a)=>(t.openBlock(),t.createElementBlock(t.Fragment,{key:a},["span"===r.headerRow.mode||n.hidden?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("th",{key:0,class:t.normalizeClass(["vgt-row-header",r.getClasses(a,"td")]),onClick:t=>i.columnCollapsable(a)?e.$emit("vgtExpand",!r.headerRow.vgtIsExpanded):()=>{}},[i.columnCollapsable(a)?(t.openBlock(),t.createElementBlock("span",{key:0,class:t.normalizeClass(["triangle",{expand:r.headerRow.vgtIsExpanded}])},null,2)):t.createCommentVNode("v-if",!0),t.renderSlot(e.$slots,"table-header-row",{row:r.headerRow,column:n,formattedRow:r.formattedRow(r.headerRow,!0)},(()=>[n.html?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("span",ve,t.toDisplayString(r.collectFormatted(r.headerRow,n,!0)),1)),n.html?(t.openBlock(),t.createElementBlock("span",{key:1,innerHTML:r.collectFormatted(r.headerRow,n,!0)},null,8,Ce)):t.createCommentVNode("v-if",!0)]))],10,ye))],64)))),128))])}]]);function ke(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function Pe(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function Te(e){Pe(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function Se(e,t){Pe(2,arguments);var n=Te(e).getTime(),r=ke(t);return new Date(n+r)}function Ee(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function Re(e){return Pe(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function Be(e){if(Pe(1,arguments),!Re(e)&&"number"!=typeof e)return!1;var t=Te(e);return!isNaN(Number(t))}var De={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}},Ne=function(e,t,n){var r,a=De[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r};function Oe(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var _e={date:Oe({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Oe({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Oe({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Fe={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"},Me=function(e,t,n,r){return Fe[e]};function Ie(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var l=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;r=e.values[s]||e.values[l]}return r[e.argumentCallback?e.argumentCallback(t):t]}}var Ue={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Ie({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Ie({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Ie({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Ie({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Ie({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},Ve=Ue;function Ae(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,l=o[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?je(s,(function(e){return e.test(l)})):$e(s,(function(e){return e.test(l)}));i=e.valueCallback?e.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var u=t.slice(l.length);return{value:i,rest:u}}}function $e(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function je(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var Le,ze={ordinalNumber:(Le={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(Le.matchPattern);if(!n)return null;var r=n[0],a=e.match(Le.parsePattern);if(!a)return null;var o=Le.valueCallback?Le.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:Ae({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Ae({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Ae({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Ae({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Ae({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},He={code:"en-US",formatDistance:Ne,formatLong:_e,formatRelative:Me,localize:Ve,match:ze,options:{weekStartsOn:0,firstWeekContainsDate:1}};function Ye(e,t){Pe(2,arguments);var n=ke(t);return Se(e,-n)}var qe=864e5;function We(e){Pe(1,arguments);var t=1,n=Te(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function Qe(e){Pe(1,arguments);var t=Te(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=We(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=We(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function Ge(e){Pe(1,arguments);var t=Qe(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=We(n);return r}var Ke=6048e5;function Xe(e){Pe(1,arguments);var t=Te(e),n=We(t).getTime()-Ge(t).getTime();return Math.round(n/Ke)+1}function Je(e,t){Pe(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:ke(a),i=null==n.weekStartsOn?o:ke(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=Te(e),s=l.getUTCDay(),c=(s<i?7:0)+s-i;return l.setUTCDate(l.getUTCDate()-c),l.setUTCHours(0,0,0,0),l}function Ze(e,t){Pe(1,arguments);var n=Te(e),r=n.getUTCFullYear(),a=t||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,l=null==i?1:ke(i),s=null==a.firstWeekContainsDate?l:ke(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,s),c.setUTCHours(0,0,0,0);var u=Je(c,t),d=new Date(0);d.setUTCFullYear(r,0,s),d.setUTCHours(0,0,0,0);var h=Je(d,t);return n.getTime()>=u.getTime()?r+1:n.getTime()>=h.getTime()?r:r-1}function et(e,t){Pe(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:ke(a),i=null==n.firstWeekContainsDate?o:ke(n.firstWeekContainsDate),l=Ze(e,t),s=new Date(0);s.setUTCFullYear(l,0,i),s.setUTCHours(0,0,0,0);var c=Je(s,t);return c}var tt=6048e5;function nt(e,t){Pe(1,arguments);var n=Te(e),r=Je(n,t).getTime()-et(n,t).getTime();return Math.round(r/tt)+1}function rt(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}var at={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return rt("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):rt(n+1,2)},d:function(e,t){return rt(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return rt(e.getUTCHours()%12||12,t.length)},H:function(e,t){return rt(e.getUTCHours(),t.length)},m:function(e,t){return rt(e.getUTCMinutes(),t.length)},s:function(e,t){return rt(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return rt(Math.floor(r*Math.pow(10,n-3)),t.length)}},ot=at,it="midnight",lt="noon",st="morning",ct="afternoon",ut="evening",dt="night",ht={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear();return n.ordinalNumber(r>0?r:1-r,{unit:"year"})}return ot.y(e,t)},Y:function(e,t,n,r){var a=Ze(e,r),o=a>0?a:1-a;return"YY"===t?rt(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):rt(o,t.length)},R:function(e,t){return rt(Qe(e),t.length)},u:function(e,t){return rt(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return rt(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return rt(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return ot.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return rt(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=nt(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):rt(a,t.length)},I:function(e,t,n){var r=Xe(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):rt(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):ot.d(e,t)},D:function(e,t,n){var r=function(e){Pe(1,arguments);var t=Te(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime();return Math.floor((n-r)/qe)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):rt(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return rt(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return rt(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return rt(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?lt:0===a?it:a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?ut:a>=12?ct:a>=4?st:dt,t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return ot.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ot.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):rt(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):rt(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):ot.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ot.s(e,t)},S:function(e,t){return ot.S(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return pt(a);case"XXXX":case"XX":return ft(a);default:return ft(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return pt(a);case"xxxx":case"xx":return ft(a);default:return ft(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+gt(a,":");default:return"GMT"+ft(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+gt(a,":");default:return"GMT"+ft(a,":")}},t:function(e,t,n,r){return rt(Math.floor((r._originalDate||e).getTime()/1e3),t.length)},T:function(e,t,n,r){return rt((r._originalDate||e).getTime(),t.length)}};function gt(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+rt(o,2)}function pt(e,t){return e%60==0?(e>0?"-":"+")+rt(Math.abs(e)/60,2):ft(e,t)}function ft(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+rt(Math.floor(a/60),2)+n+rt(a%60,2)}var mt=ht;function wt(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function bt(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var yt={p:bt,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return wt(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",wt(a,t)).replace("{{time}}",bt(o,t))}},vt=yt,Ct=["D","DD"],xt=["YY","YYYY"];function kt(e){return-1!==Ct.indexOf(e)}function Pt(e){return-1!==xt.indexOf(e)}function Tt(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var St=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Rt=/^'([^]*?)'?$/,Bt=/''/g,Dt=/[a-zA-Z]/;function Nt(e){return e.match(Rt)[1].replace(Bt,"'")}function Ot(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function _t(e,t,n){Pe(2,arguments);var r=n||{},a=r.locale,o=a&&a.options&&a.options.weekStartsOn,i=null==o?0:ke(o),l=null==r.weekStartsOn?i:ke(r.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=Te(e),c=ke(t),u=s.getUTCDay(),d=c%7,h=(d+7)%7,g=(h<l?7:0)+c-u;return s.setUTCDate(s.getUTCDate()+g),s}var Ft=/^(1[0-2]|0?\d)/,Mt=/^(3[0-1]|[0-2]?\d)/,It=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Ut=/^(5[0-3]|[0-4]?\d)/,Vt=/^(2[0-3]|[0-1]?\d)/,At=/^(2[0-4]|[0-1]?\d)/,$t=/^(1[0-1]|0?\d)/,jt=/^(1[0-2]|0?\d)/,Lt=/^[0-5]?\d/,zt=/^[0-5]?\d/,Ht=/^\d/,Yt=/^\d{1,2}/,qt=/^\d{1,3}/,Wt=/^\d{1,4}/,Qt=/^-?\d+/,Gt=/^-?\d/,Kt=/^-?\d{1,2}/,Xt=/^-?\d{1,3}/,Jt=/^-?\d{1,4}/,Zt=/^([+-])(\d{2})(\d{2})?|Z/,en=/^([+-])(\d{2})(\d{2})|Z/,tn=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,nn=/^([+-])(\d{2}):(\d{2})|Z/,rn=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function an(e,t,n){var r=t.match(e);if(!r)return null;var a=parseInt(r[0],10);return{value:n?n(a):a,rest:t.slice(r[0].length)}}function on(e,t){var n=t.match(e);return n?"Z"===n[0]?{value:0,rest:t.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:t.slice(n[0].length)}:null}function ln(e,t){return an(Qt,e,t)}function sn(e,t,n){switch(e){case 1:return an(Ht,t,n);case 2:return an(Yt,t,n);case 3:return an(qt,t,n);case 4:return an(Wt,t,n);default:return an(new RegExp("^\\d{1,"+e+"}"),t,n)}}function cn(e,t,n){switch(e){case 1:return an(Gt,t,n);case 2:return an(Kt,t,n);case 3:return an(Xt,t,n);case 4:return an(Jt,t,n);default:return an(new RegExp("^-?\\d{1,"+e+"}"),t,n)}}function un(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function dn(e,t){var n,r=t>0,a=r?t:1-t;if(a<=50)n=e||100;else{var o=a+50;n=e+100*Math.floor(o/100)-(e>=o%100?100:0)}return r?n:1-n}var hn=[31,28,31,30,31,30,31,31,30,31,30,31],gn=[31,29,31,30,31,30,31,31,30,31,30,31];function pn(e){return e%400==0||e%4==0&&e%100!=0}var fn={G:{priority:140,parse:function(e,t,n,r){switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"});case"GGGGG":return n.era(e,{width:"narrow"});default:return n.era(e,{width:"wide"})||n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"})}},set:function(e,t,n,r){return t.era=n,e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["R","u","t","T"]},y:{priority:130,parse:function(e,t,n,r){var a=function(e){return{year:e,isTwoDigitYear:"yy"===t}};switch(t){case"y":return sn(4,e,a);case"yo":return n.ordinalNumber(e,{unit:"year",valueCallback:a});default:return sn(t.length,e,a)}},validate:function(e,t,n){return t.isTwoDigitYear||t.year>0},set:function(e,t,n,r){var a=e.getUTCFullYear();if(n.isTwoDigitYear){var o=dn(n.year,a);return e.setUTCFullYear(o,0,1),e.setUTCHours(0,0,0,0),e}return e.setUTCFullYear("era"in t&&1!==t.era?1-n.year:n.year,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},Y:{priority:130,parse:function(e,t,n,r){var a=function(e){return{year:e,isTwoDigitYear:"YY"===t}};switch(t){case"Y":return sn(4,e,a);case"Yo":return n.ordinalNumber(e,{unit:"year",valueCallback:a});default:return sn(t.length,e,a)}},validate:function(e,t,n){return t.isTwoDigitYear||t.year>0},set:function(e,t,n,r){var a=Ze(e,r);if(n.isTwoDigitYear){var o=dn(n.year,a);return e.setUTCFullYear(o,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),Je(e,r)}return e.setUTCFullYear("era"in t&&1!==t.era?1-n.year:n.year,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),Je(e,r)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:{priority:130,parse:function(e,t,n,r){return cn("R"===t?4:t.length,e)},set:function(e,t,n,r){var a=new Date(0);return a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0),We(a)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:{priority:130,parse:function(e,t,n,r){return cn("u"===t?4:t.length,e)},set:function(e,t,n,r){return e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},Q:{priority:120,parse:function(e,t,n,r){switch(t){case"Q":case"QQ":return sn(t.length,e);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});default:return n.quarter(e,{width:"wide",context:"formatting"})||n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=1&&t<=4},set:function(e,t,n,r){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:{priority:120,parse:function(e,t,n,r){switch(t){case"q":case"qq":return sn(t.length,e);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});default:return n.quarter(e,{width:"wide",context:"standalone"})||n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=1&&t<=4},set:function(e,t,n,r){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:{priority:110,parse:function(e,t,n,r){var a=function(e){return e-1};switch(t){case"M":return an(Ft,e,a);case"MM":return sn(2,e,a);case"Mo":return n.ordinalNumber(e,{unit:"month",valueCallback:a});case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});default:return n.month(e,{width:"wide",context:"formatting"})||n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},L:{priority:110,parse:function(e,t,n,r){var a=function(e){return e-1};switch(t){case"L":return an(Ft,e,a);case"LL":return sn(2,e,a);case"Lo":return n.ordinalNumber(e,{unit:"month",valueCallback:a});case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});default:return n.month(e,{width:"wide",context:"standalone"})||n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:{priority:100,parse:function(e,t,n,r){switch(t){case"w":return an(Ut,e);case"wo":return n.ordinalNumber(e,{unit:"week"});default:return sn(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=53},set:function(e,t,n,r){return Je(function(e,t,n){Pe(2,arguments);var r=Te(e),a=ke(t),o=nt(r,n)-a;return r.setUTCDate(r.getUTCDate()-7*o),r}(e,n,r),r)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:{priority:100,parse:function(e,t,n,r){switch(t){case"I":return an(Ut,e);case"Io":return n.ordinalNumber(e,{unit:"week"});default:return sn(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=53},set:function(e,t,n,r){return We(function(e,t){Pe(2,arguments);var n=Te(e),r=ke(t),a=Xe(n)-r;return n.setUTCDate(n.getUTCDate()-7*a),n}(e,n,r),r)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:{priority:90,subPriority:1,parse:function(e,t,n,r){switch(t){case"d":return an(Mt,e);case"do":return n.ordinalNumber(e,{unit:"date"});default:return sn(t.length,e)}},validate:function(e,t,n){var r=pn(e.getUTCFullYear()),a=e.getUTCMonth();return r?t>=1&&t<=gn[a]:t>=1&&t<=hn[a]},set:function(e,t,n,r){return e.setUTCDate(n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:{priority:90,subPriority:1,parse:function(e,t,n,r){switch(t){case"D":case"DD":return an(It,e);case"Do":return n.ordinalNumber(e,{unit:"date"});default:return sn(t.length,e)}},validate:function(e,t,n){return pn(e.getUTCFullYear())?t>=1&&t<=366:t>=1&&t<=365},set:function(e,t,n,r){return e.setUTCMonth(0,n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:{priority:90,parse:function(e,t,n,r){switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=_t(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["D","i","e","c","t","T"]},e:{priority:90,parse:function(e,t,n,r){var a=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"e":case"ee":return sn(t.length,e,a);case"eo":return n.ordinalNumber(e,{unit:"day",valueCallback:a});case"eee":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeeee":return n.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=_t(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:{priority:90,parse:function(e,t,n,r){var a=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"c":case"cc":return sn(t.length,e,a);case"co":return n.ordinalNumber(e,{unit:"day",valueCallback:a});case"ccc":return n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"ccccc":return n.day(e,{width:"narrow",context:"standalone"});case"cccccc":return n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});default:return n.day(e,{width:"wide",context:"standalone"})||n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=_t(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:{priority:90,parse:function(e,t,n,r){var a=function(e){return 0===e?7:e};switch(t){case"i":case"ii":return sn(t.length,e);case"io":return n.ordinalNumber(e,{unit:"day"});case"iii":return n.day(e,{width:"abbreviated",context:"formatting",valueCallback:a})||n.day(e,{width:"short",context:"formatting",valueCallback:a})||n.day(e,{width:"narrow",context:"formatting",valueCallback:a});case"iiiii":return n.day(e,{width:"narrow",context:"formatting",valueCallback:a});case"iiiiii":return n.day(e,{width:"short",context:"formatting",valueCallback:a})||n.day(e,{width:"narrow",context:"formatting",valueCallback:a});default:return n.day(e,{width:"wide",context:"formatting",valueCallback:a})||n.day(e,{width:"abbreviated",context:"formatting",valueCallback:a})||n.day(e,{width:"short",context:"formatting",valueCallback:a})||n.day(e,{width:"narrow",context:"formatting",valueCallback:a})}},validate:function(e,t,n){return t>=1&&t<=7},set:function(e,t,n,r){return e=function(e,t){Pe(2,arguments);var n=ke(t);n%7==0&&(n-=7);var r=1,a=Te(e),o=a.getUTCDay(),i=((n%7+7)%7<r?7:0)+n-o;return a.setUTCDate(a.getUTCDate()+i),a}(e,n,r),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:{priority:80,parse:function(e,t,n,r){switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(un(n),0,0,0),e},incompatibleTokens:["b","B","H","k","t","T"]},b:{priority:80,parse:function(e,t,n,r){switch(t){case"b":case"bb":case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(un(n),0,0,0),e},incompatibleTokens:["a","B","H","k","t","T"]},B:{priority:80,parse:function(e,t,n,r){switch(t){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(un(n),0,0,0),e},incompatibleTokens:["a","b","t","T"]},h:{priority:70,parse:function(e,t,n,r){switch(t){case"h":return an(jt,e);case"ho":return n.ordinalNumber(e,{unit:"hour"});default:return sn(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=12},set:function(e,t,n,r){var a=e.getUTCHours()>=12;return e.setUTCHours(a&&n<12?n+12:a||12!==n?n:0,0,0,0),e},incompatibleTokens:["H","K","k","t","T"]},H:{priority:70,parse:function(e,t,n,r){switch(t){case"H":return an(Vt,e);case"Ho":return n.ordinalNumber(e,{unit:"hour"});default:return sn(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=23},set:function(e,t,n,r){return e.setUTCHours(n,0,0,0),e},incompatibleTokens:["a","b","h","K","k","t","T"]},K:{priority:70,parse:function(e,t,n,r){switch(t){case"K":return an($t,e);case"Ko":return n.ordinalNumber(e,{unit:"hour"});default:return sn(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){var a=e.getUTCHours()>=12;return e.setUTCHours(a&&n<12?n+12:n,0,0,0),e},incompatibleTokens:["h","H","k","t","T"]},k:{priority:70,parse:function(e,t,n,r){switch(t){case"k":return an(At,e);case"ko":return n.ordinalNumber(e,{unit:"hour"});default:return sn(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=24},set:function(e,t,n,r){return e.setUTCHours(n<=24?n%24:n,0,0,0),e},incompatibleTokens:["a","b","h","H","K","t","T"]},m:{priority:60,parse:function(e,t,n,r){switch(t){case"m":return an(Lt,e);case"mo":return n.ordinalNumber(e,{unit:"minute"});default:return sn(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=59},set:function(e,t,n,r){return e.setUTCMinutes(n,0,0),e},incompatibleTokens:["t","T"]},s:{priority:50,parse:function(e,t,n,r){switch(t){case"s":return an(zt,e);case"so":return n.ordinalNumber(e,{unit:"second"});default:return sn(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=59},set:function(e,t,n,r){return e.setUTCSeconds(n,0),e},incompatibleTokens:["t","T"]},S:{priority:30,parse:function(e,t,n,r){return sn(t.length,e,(function(e){return Math.floor(e*Math.pow(10,3-t.length))}))},set:function(e,t,n,r){return e.setUTCMilliseconds(n),e},incompatibleTokens:["t","T"]},X:{priority:10,parse:function(e,t,n,r){switch(t){case"X":return on(Zt,e);case"XX":return on(en,e);case"XXXX":return on(tn,e);case"XXXXX":return on(rn,e);default:return on(nn,e)}},set:function(e,t,n,r){return t.timestampIsSet?e:new Date(e.getTime()-n)},incompatibleTokens:["t","T","x"]},x:{priority:10,parse:function(e,t,n,r){switch(t){case"x":return on(Zt,e);case"xx":return on(en,e);case"xxxx":return on(tn,e);case"xxxxx":return on(rn,e);default:return on(nn,e)}},set:function(e,t,n,r){return t.timestampIsSet?e:new Date(e.getTime()-n)},incompatibleTokens:["t","T","X"]},t:{priority:40,parse:function(e,t,n,r){return ln(e)},set:function(e,t,n,r){return[new Date(1e3*n),{timestampIsSet:!0}]},incompatibleTokens:"*"},T:{priority:20,parse:function(e,t,n,r){return ln(e)},set:function(e,t,n,r){return[new Date(n),{timestampIsSet:!0}]},incompatibleTokens:"*"}},mn=fn,wn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,bn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,yn=/^'([^]*?)'?$/,vn=/''/g,Cn=/\S/,xn=/[a-zA-Z]/;function kn(e,t,n,r){Pe(3,arguments);var a=String(e),o=String(t),i=r||{},l=i.locale||He;if(!l.match)throw new RangeError("locale must contain match property");var s=l.options&&l.options.firstWeekContainsDate,c=null==s?1:ke(s),u=null==i.firstWeekContainsDate?c:ke(i.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=l.options&&l.options.weekStartsOn,h=null==d?0:ke(d),g=null==i.weekStartsOn?h:ke(i.weekStartsOn);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===o)return""===a?Te(n):new Date(NaN);var p,f={firstWeekContainsDate:u,weekStartsOn:g,locale:l},m=[{priority:10,subPriority:-1,set:Pn,index:0}],w=o.match(bn).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,vt[t])(e,l.formatLong,f):e})).join("").match(wn),b=[];for(p=0;p<w.length;p++){var y=w[p];!i.useAdditionalWeekYearTokens&&Pt(y)&&Tt(y,o,e),!i.useAdditionalDayOfYearTokens&&kt(y)&&Tt(y,o,e);var v=y[0],C=mn[v];if(C){var x=C.incompatibleTokens;if(Array.isArray(x)){for(var k=void 0,P=0;P<b.length;P++){var T=b[P].token;if(-1!==x.indexOf(T)||T===v){k=b[P];break}}if(k)throw new RangeError("The format string mustn't contain `".concat(k.fullToken,"` and `").concat(y,"` at the same time"))}else if("*"===C.incompatibleTokens&&b.length)throw new RangeError("The format string mustn't contain `".concat(y,"` and any other token at the same time"));b.push({token:v,fullToken:y});var S=C.parse(a,y,l.match,f);if(!S)return new Date(NaN);m.push({priority:C.priority,subPriority:C.subPriority||0,set:C.set,validate:C.validate,value:S.value,index:m.length}),a=S.rest}else{if(v.match(xn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+v+"`");if("''"===y?y="'":"'"===v&&(y=Tn(y)),0!==a.indexOf(y))return new Date(NaN);a=a.slice(y.length)}}if(a.length>0&&Cn.test(a))return new Date(NaN);var E=m.map((function(e){return e.priority})).sort((function(e,t){return t-e})).filter((function(e,t,n){return n.indexOf(e)===t})).map((function(e){return m.filter((function(t){return t.priority===e})).sort((function(e,t){return t.subPriority-e.subPriority}))})).map((function(e){return e[0]})),R=Te(n);if(isNaN(R))return new Date(NaN);var B=Ye(R,Ee(R)),D={};for(p=0;p<E.length;p++){var N=E[p];if(N.validate&&!N.validate(B,N.value,f))return new Date(NaN);var O=N.set(B,D,N.value,f);O[0]?(B=O[0],Ot(D,O[1])):B=O}return B}function Pn(e,t){if(t.timestampIsSet)return e;var n=new Date(0);return n.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),n}function Tn(e){return e.match(yn)[1].replace(vn,"'")}const Sn=Object.assign({},f);Sn.isRight=!0,Sn.compare=function(e,t,n){function r(e){if(n&&n.dateInputFormat)return kn(`${e}`,`${n.dateInputFormat}`,new Date);if("string"==typeof e)try{return Date.parse(e)}catch(t){return e}return e}return e=r(e),t=r(t),Be(e)?Be(t)?function(e,t){Pe(2,arguments);var n=Te(e),r=Te(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}(e,t):1:-1},Sn.format=function(e,t){if(null==e)return"";const n=kn(e,t.dateInputFormat,new Date);return Be(n)?function(e,t,n){Pe(2,arguments);var r=String(t),a=n||{},o=a.locale||He,i=o.options&&o.options.firstWeekContainsDate,l=null==i?1:ke(i),s=null==a.firstWeekContainsDate?l:ke(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=o.options&&o.options.weekStartsOn,u=null==c?0:ke(c),d=null==a.weekStartsOn?u:ke(a.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var h=Te(e);if(!Be(h))throw new RangeError("Invalid time value");var g=Ee(h),p=Ye(h,g),f={firstWeekContainsDate:s,weekStartsOn:d,locale:o,_originalDate:h};return r.match(Et).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,vt[t])(e,o.formatLong,f):e})).join("").match(St).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return Nt(n);var i=mt[r];if(i)return!a.useAdditionalWeekYearTokens&&Pt(n)&&Tt(n,t,e),!a.useAdditionalDayOfYearTokens&&kt(n)&&Tt(n,t,e),i(p,n,o.localize,f);if(r.match(Dt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("")}(n,t.dateOutputFormat):(console.error(`Not a valid date: "${e}"`),null)};var En=Object.freeze({__proto__:null,default:Sn});const Rn=Object.assign({},f);Rn.isRight=!0,Rn.filterPredicate=function(e,t){return 0===Rn.compare(e,t)},Rn.compare=function(e,t){function n(e){return null==e?-1/0:e.indexOf(".")>=0?parseFloat(e):parseInt(e,10)}return(e="number"==typeof e?e:n(e))<(t="number"==typeof t?t:n(t))?-1:e>t?1:0};var Bn=Object.freeze({__proto__:null,default:Rn});const Dn=Object.assign({},Rn);Dn.format=function(e){return null==e?"":parseFloat(Math.round(100*e)/100).toFixed(2)};var Nn=Object.freeze({__proto__:null,default:Dn});const On=Object.assign({},Rn);On.format=function(e){return null==e?"":`${parseFloat(100*e).toFixed(2)}%`};var _n=Object.freeze({__proto__:null,default:On});const Fn=Object.assign({},f);Fn.isRight=!0,Fn.filterPredicate=function(e,t){return 0===Fn.compare(e,t)},Fn.compare=function(e,t){function n(e){return"boolean"==typeof e?e?1:0:"string"==typeof e?"true"===e?1:0:-1/0}return(e=n(e))<(t=n(t))?-1:e>t?1:0};const Mn={},In={date:En,decimal:Nn,number:Bn,percentage:_n,boolean:Object.freeze({__proto__:null,default:Fn})};Object.keys(In).forEach((e=>{const t=e.replace(/^\.\//,"").replace(/\.js/,"");Mn[t]=In[e].default}));const Un={name:"vue-good-table",props:{isLoading:{default:null,type:Boolean},maxHeight:{default:null,type:String},fixedHeader:Boolean,theme:{default:""},mode:{default:"local"},totalRows:{},styleClass:{default:"vgt-table bordered"},columns:{},rows:{},lineNumbers:Boolean,responsive:{default:!0,type:Boolean},rtl:Boolean,rowStyleClass:{default:null,type:[Function,String]},compactMode:Boolean,enableRowExpand:{default:!1,type:Boolean},expandRowsOptions:{default:()=>({enabled:!1})},groupOptions:{default:()=>({enabled:!1,collapsable:!1,rowKey:null})},selectOptions:{default:()=>({enabled:!1,selectionInfoClass:"",selectionText:"rows selected",clearSelectionText:"clear",disableSelectInfo:!1,selectAllByGroup:!1})},sortOptions:{default:()=>({enabled:!0,multipleColumns:!0,initialSortBy:{}})},paginationOptions:{default:()=>({enabled:!1,position:"bottom",perPage:10,perPageDropdown:null,perPageDropdownEnabled:!0,dropdownAllowAll:!0,mode:"records",infoFn:null})},searchOptions:{default:()=>({enabled:!1,trigger:null,externalQuery:null,searchFn:null,placeholder:"Search Table"})},expandedRowClasses:{default:"",type:String},expandedRowDetailClasses:{default:"",type:String}},data:()=>({tableLoading:!1,nextText:"Next",prevText:"Previous",rowsPerPageText:"Rows per page",ofText:"of",allText:"All",pageText:"page",selectable:!1,selectOnCheckboxOnly:!1,selectAllByPage:!0,disableSelectInfo:!1,selectionInfoClass:"",selectionText:"rows selected",clearSelectionText:"clear",maintainExpanded:!0,expandedRowKeys:new Set,sortable:!0,defaultSortBy:null,multipleColumnSort:!0,searchEnabled:!1,searchTrigger:null,externalSearchQuery:null,searchFn:null,searchPlaceholder:"Search Table",searchSkipDiacritics:!1,perPage:null,paginate:!1,paginateOnTop:!1,paginateOnBottom:!0,customRowsPerPageDropdown:[],paginateDropdownAllowAll:!0,paginationMode:"records",paginationInfoFn:null,currentPage:1,currentPerPage:10,sorts:[],globalSearchTerm:"",filteredRows:[],columnFilters:{},forceSearch:!1,sortChanged:!1,dataTypes:Mn||{},expandedRowIndex:null}),emits:["select-all","selected-rows-change","search","per-page-change","page-change","update:isLoading","sort-change","row-click","row-dblclick","row-aux-click","cell-click","row-mouseenter","row-mouseleave","column-filter"],watch:{rows:{handler(){this.$emit("update:isLoading",!1),this.filterRows(this.columnFilters,!1)},deep:!0,immediate:!0},selectOptions:{handler(){this.initializeSelect()},deep:!0,immediate:!0},paginationOptions:{handler(e,t){c(e,t)||this.initializePagination()},deep:!0,immediate:!0},expandRowsOptions:{handler(e,t){this.initializeExpandRows()},deep:!0,immediate:!0},searchOptions:{handler(){void 0!==this.searchOptions.externalQuery&&this.searchOptions.externalQuery!==this.searchTerm&&(this.externalSearchQuery=this.searchOptions.externalQuery,this.handleSearch()),this.initializeSearch()},deep:!0,immediate:!0},sortOptions:{handler(e,t){c(e,t)||this.initializeSort()},deep:!0},selectedRows(e,t){c(e,t)||this.$emit("selected-rows-change",{selectedRows:this.selectedRows})}},computed:{tableStyles(){return this.compactMode?this.tableStyleClasses+"vgt-compact":this.tableStyleClasses},hasFooterSlot(){return!!this.$slots["table-actions-bottom"]},wrapperStyles(){return{overflow:"scroll-y",maxHeight:this.maxHeight?this.maxHeight:"auto"}},rowKeyField(){return this.groupOptions.rowKey||"vgt_header_id"},hasHeaderRowTemplate(){return!!this.$slots["table-header-row"]},showEmptySlot(){return!this.paginated.length||"no groups"===this.paginated[0].label&&!this.paginated[0].children.length},allSelected(){return this.selectedRowCount>0&&(this.selectAllByPage&&this.selectedPageRowsCount===this.totalPageRowCount||!this.selectAllByPage&&this.selectedRowCount===this.totalRowCount)},allSelectedIndeterminate(){return!this.allSelected&&(this.selectAllByPage&&this.selectedPageRowsCount>0||!this.selectAllByPage&&this.selectedRowCount>0)},selectionInfo(){return`${this.selectedRowCount} ${this.selectionText}`},selectedRowCount(){return this.selectedRows.length},selectedPageRowsCount(){return this.selectedPageRows.length},selectedPageRows(){const e=[];return this.paginated.forEach((t=>{t.children.forEach((t=>{t.vgtSelected&&e.push(t)}))})),e},selectedRows(){const e=[];return this.processedRows.forEach((t=>{t.children.forEach((t=>{t.vgtSelected&&e.push(t)}))})),e.sort(((e,t)=>e.originalIndex-t.originalIndex))},fullColspan(){let e=0;for(let t=0;t<this.columns.length;t+=1)this.columns[t].hidden||(e+=1);return this.lineNumbers&&e++,this.selectable&&e++,this.expandRowsEnabled&&e++,e},groupHeaderOnTop(){return!(this.groupOptions&&this.groupOptions.enabled&&this.groupOptions.headerPosition&&"bottom"===this.groupOptions.headerPosition)&&!(!this.groupOptions||!this.groupOptions.enabled)},groupHeaderOnBottom(){return!!(this.groupOptions&&this.groupOptions.enabled&&this.groupOptions.headerPosition&&"bottom"===this.groupOptions.headerPosition)},totalRowCount(){return this.processedRows.reduce(((e,t)=>e+(t.children?t.children.length:0)),0)},totalPageRowCount(){return this.paginated.reduce(((e,t)=>e+(t.children?t.children.length:0)),0)},wrapStyleClasses(){let e="vgt-wrap";return this.rtl&&(e+=" rtl"),e+=` ${this.theme}`,e},tableStyleClasses(){let e=this.styleClass;return e+=` ${this.theme}`,e},searchTerm(){return null!=this.externalSearchQuery?this.externalSearchQuery:this.globalSearchTerm},globalSearchAllowed(){return!(!this.searchEnabled||!this.globalSearchTerm||"enter"===this.searchTrigger)||(null!=this.externalSearchQuery&&"enter"!==this.searchTrigger||!!this.forceSearch&&(this.forceSearch=!1,!0))},processedRows(){let e=this.filteredRows;if("remote"===this.mode)return e;if(this.globalSearchAllowed){const t=[];this.filteredRows.forEach((e=>{t.push(...e.children)}));const n=[];t.forEach((e=>{for(let t=0;t<this.columns.length;t+=1){const r=this.columns[t];if(!r.globalSearchDisabled)if(this.searchFn){if(this.searchFn(e,r,this.collectFormatted(e,r),this.searchTerm)){n.push(e);break}}else{if(f.filterPredicate(this.collectFormatted(e,r),this.searchTerm,this.searchSkipDiacritics)){n.push(e);break}}}})),this.$emit("search",{searchTerm:this.searchTerm,rowCount:n.length}),e=[],this.filteredRows.forEach((t=>{const r=t.vgt_header_id,a=n.filter((e=>e.vgt_id===r));if(a.length){const n=JSON.parse(JSON.stringify(t));n.children=a,e.push(n)}}))}return this.sorts.length&&e.forEach((e=>{e.children.sort(((e,t)=>{let n;for(let o=0;o<this.sorts.length;o+=1){const i=this.sorts[o];if(i.type===a)n=n||e.originalIndex-t.originalIndex;else{const a=this.getColumnForField(i.field),o=this.collect(e,i.field),l=this.collect(t,i.field),{sortFn:s}=a;n=s&&"function"==typeof s?n||s(o,l,a,e,t)*(i.type===r?-1:1):n||a.typeDef.compare(o,l,a)*(i.type===r?-1:1)}}return n}))})),"enter"===this.searchTrigger&&(this.filteredRows=e),e},paginated(){if(!this.processedRows.length)return[];if("remote"===this.mode)return this.processedRows;let e=[];if(this.processedRows.forEach((t=>{this.groupOptions.enabled&&e.push(t),e.push(...t.children)})),this.paginate){let t=(this.currentPage-1)*this.currentPerPage;(t>=e.length||-1===this.currentPerPage)&&(this.currentPage=1,t=0);let n=e.length+1;-1!==this.currentPerPage&&(n=this.currentPage*this.currentPerPage),e=e.slice(t,n)}const t=[];return e.forEach((e=>{if(void 0!==e.vgt_header_id){this.handleExpanded(e);const n=JSON.parse(JSON.stringify(e));n.children=[],t.push(n)}else{let n=t.find((t=>t.vgt_header_id===e.vgt_id));n||(n=this.processedRows.find((t=>t.vgt_header_id===e.vgt_id)),n&&(n=JSON.parse(JSON.stringify(n)),n.children=[],t.push(n))),n.children.push(e)}})),t},originalRows(){const e=JSON.parse(JSON.stringify(this.rows));let t=[];t=this.handleGrouped(this.groupOptions.enabled?e:[{label:"no groups",children:e}]);let n=0;return t.forEach((e=>{e.children.forEach((e=>{e.originalIndex=n++}))})),t},typedColumns(){const e=this.columns;for(let t=0;t<this.columns.length;t++){const n=e[t];n.typeDef=this.dataTypes[n.type]||f}return e},hasRowClickListener(){return this.$attrs&&this.$attrs["row-click"]}},methods:{handleExpanded(e){e.vgtIsExpanded=!(!this.maintainExpanded||!this.expandedRowKeys.has(e[this.rowKeyField]))},toggleExpand(e){const t=this.filteredRows.find((t=>t[this.rowKeyField]===e));t&&(t.vgtIsExpanded=!t.vgtIsExpanded),this.maintainExpanded&&t.vgtIsExpanded?this.expandedRowKeys.add(t[this.rowKeyField]):this.expandedRowKeys.delete(t[this.rowKeyField])},expandAll(){this.filteredRows.forEach((e=>{e.vgtIsExpanded=!0,this.maintainExpanded&&this.expandedRowKeys.add(e[this.rowKeyField])}))},collapseAll(){this.filteredRows.forEach((e=>{e.vgtIsExpanded=!1,this.expandedRowKeys.clear()}))},getColumnForField(e){for(let t=0;t<this.typedColumns.length;t+=1)if(this.typedColumns[t].field===e)return this.typedColumns[t]},handleSearch(){this.resetTable(),"remote"===this.mode&&this.$emit("search",{searchTerm:this.searchTerm})},reset(){this.initializeSort(),this.changePage(1),this.$refs["table-header-primary"].reset(!0),this.$refs["table-header-secondary"]&&this.$refs["table-header-secondary"].reset(!0)},emitSelectedRows(){this.$emit("select-all",{selected:this.selectedRowCount===this.totalRowCount,selectedRows:this.selectedRows})},unselectAllInternal(e){(this.selectAllByPage&&!e?this.paginated:this.filteredRows).forEach(((e,t)=>{e.children.forEach(((e,t)=>{e.vgtSelected=!1}))})),this.emitSelectedRows()},toggleSelectAll(){if(this.allSelected)return void this.unselectAllInternal();(this.selectAllByPage?this.paginated:this.filteredRows).forEach((e=>{e.children.forEach((e=>{e.vgtSelected=!0}))})),this.emitSelectedRows()},toggleExpandRowsAll(){for(let e of this.rows)e.expanded=!!e.expandedRow&&!e.expanded;this.$emit("toggle-expand-rows-all",{})},toggleSelectGroup(e,t){t.children.forEach((t=>{t.vgtSelected=e}))},changePage(e){const t=this.paginate;let{paginationBottom:n,paginationTop:r}=this.$refs;t&&(this.paginateOnTop&&r&&(r.currentPage=e),this.paginateOnBottom&&n&&(n.currentPage=e),this.currentPage=e)},pageChangedEvent(){return{currentPage:this.currentPage,currentPerPage:this.currentPerPage,total:Math.floor(this.totalRowCount/this.currentPerPage)}},pageChanged(e){if(this.currentPage=e.currentPage,!e.noEmit){const t=this.pageChangedEvent();t.prevPage=e.prevPage,this.$emit("page-change",t),"remote"===this.mode&&this.$emit("update:isLoading",!0)}},perPageChanged(e){this.currentPerPage=e.currentPerPage;let t=this.paginationOptions.position;!this.$refs.paginationTop||"top"!==t&&"both"!==t||(this.$refs.paginationTop.currentPerPage=this.currentPerPage),!this.$refs.paginationBottom||"bottom"!==t&&"both"!==t||(this.$refs.paginationBottom.currentPerPage=this.currentPerPage);const n=this.pageChangedEvent();this.$emit("per-page-change",n),"remote"===this.mode&&this.$emit("update:isLoading",!0)},changeSort(e){this.sorts=e,this.$emit("sort-change",e),this.changePage(1),"remote"!==this.mode?this.sortChanged=!0:this.$emit("update:isLoading",!0)},toggleRowExpand(e,t){this.expandedRowIndex=this.expandedRowIndex===t?null:t},onCheckboxClicked(e,t,n){this.enableRowExpand&&this.toggleRowExpand(e,t),e.vgtSelected=!e.vgtSelected,this.$emit("row-click",{row:e,pageIndex:t,selected:!!e.vgtSelected,event:n})},toggleExpandRow(e){e.expanded=!e.expanded},onRowDoubleClicked(e,t,n){this.$emit("row-dblclick",{row:e,pageIndex:t,selected:!!e.vgtSelected,event:n})},onRowClicked(e,t,n){this.enableRowExpand&&this.toggleRowExpand(e,t),this.selectable&&!this.selectOnCheckboxOnly&&(e.vgtSelected=!e.vgtSelected),this.$emit("row-click",{row:e,pageIndex:t,selected:!!e.vgtSelected,event:n})},onRowAuxClicked(e,t,n){this.$emit("row-aux-click",{row:e,pageIndex:t,selected:!!e.vgtSelected,event:n})},onCellClicked(e,t,n,r){this.$emit("cell-click",{row:e,column:t,rowIndex:n,event:r})},onMouseenter(e,t){this.$emit("row-mouseenter",{row:e,pageIndex:t})},onMouseleave(e,t){this.$emit("row-mouseleave",{row:e,pageIndex:t})},searchTableOnEnter(){"enter"===this.searchTrigger&&(this.handleSearch(),this.filteredRows=JSON.parse(JSON.stringify(this.originalRows)),this.forceSearch=!0,this.sortChanged=!0)},searchTableOnKeyUp(){"enter"!==this.searchTrigger&&this.handleSearch()},resetTable(){this.unselectAllInternal(!0),this.changePage(1)},collect:(e,t)=>"function"==typeof t?t(e):"string"==typeof t?function(e,t){let n=e;const r=t.split(".");for(let e=0;e<r.length;e++){if(null==n)return;n=n[r[e]]}return n}(e,t):void 0,collectFormatted(e,t,n=!1){let r;if(r=this.collect(e,n&&t.headerField?t.headerField:t.field),void 0===r)return"";if(t.formatFn&&"function"==typeof t.formatFn)return t.formatFn(r,e);let a=t.typeDef;a||(a=this.dataTypes[t.type]||f);let o=a.format(r,t);return!this.compactMode||""!=o&&null!=o?o:"-"},formattedRow(e,t=!1){const n={};for(let r=0;r<this.typedColumns.length;r++){const a=this.typedColumns[r];a.field&&(n[a.field]=this.collectFormatted(e,a,t))}return n},getClasses(e,t,n){const{typeDef:r,[`${t}Class`]:a}=this.typedColumns[e];let{isRight:o}=r;this.rtl&&(o=!0);const i={"vgt-right-align":o,"vgt-left-align":!o};return"function"==typeof a?i[a(n)]=!0:"string"==typeof a&&(i[a]=!0),i},filterRows(e,t=!0){this.columnFilters=e;let n=JSON.parse(JSON.stringify(this.originalRows)),r=!1;if(this.columnFilters&&Object.keys(this.columnFilters).length){if(("remote"!==this.mode||t)&&this.changePage(1),t&&this.$emit("column-filter",{columnFilters:this.columnFilters}),"remote"===this.mode)return void(t?this.$emit("update:isLoading",!0):this.filteredRows=n);const e=e=>"function"==typeof e&&e.name?e.name:e;for(let t=0;t<this.typedColumns.length;t++){const a=this.typedColumns[t];this.columnFilters[e(a.field)]&&(r=!0,n.forEach((t=>{const n=t.children.filter((t=>{if(a.filterOptions&&"function"==typeof a.filterOptions.filterFn)return a.filterOptions.filterFn(this.collect(t,a.field),this.columnFilters[e(a.field)]);const{typeDef:n}=a;return n.filterPredicate(this.collect(t,a.field),this.columnFilters[e(a.field)],!1,a.filterOptions&&"object"==typeof a.filterOptions.filterDropdownItems)}));t.children=n})))}}this.filteredRows=r?n.filter((e=>e.children&&e.children.length)):n},getCurrentIndex(e){let t=0,n=!1;for(let r=0;r<this.paginated.length;r+=1){const a=this.paginated[r],{children:o}=a;if(o&&o.length)for(let r=0;r<o.length;r+=1){if(o[r].originalIndex===e){n=!0;break}t+=1}if(n)break}return(this.currentPage-1)*this.currentPerPage+t+1},getRowStyleClass(e){let t,n="";return this.hasRowClickListener&&(n+="clickable"),t="function"==typeof this.rowStyleClass?this.rowStyleClass(e):this.rowStyleClass,t&&(n+=` ${t}`),this.expandedRowIndex===e.originalIndex&&(n+=` ${this.expandedRowClasses}`),n},handleGrouped(e){return e.forEach(((e,t)=>{e.vgt_header_id=t,this.groupOptions.maintainExpanded&&this.expandedRowKeys.has(e[this.groupOptions.rowKey])&&(e.vgtIsExpanded=!0),e.children.forEach((e=>{e.vgt_id=t}))})),e},initializePagination(){const{enabled:e,perPage:t,position:n,perPageDropdown:r,perPageDropdownEnabled:a,dropdownAllowAll:o,nextLabel:i,prevLabel:l,rowsPerPageLabel:s,ofLabel:c,pageLabel:u,allLabel:d,setCurrentPage:h,mode:g,infoFn:p}=this.paginationOptions;"boolean"==typeof e&&(this.paginate=e),"number"==typeof t&&(this.perPage=t),"top"===n?(this.paginateOnTop=!0,this.paginateOnBottom=!1):"both"===n&&(this.paginateOnTop=!0,this.paginateOnBottom=!0),Array.isArray(r)&&r.length&&(this.customRowsPerPageDropdown=r,this.perPage||([this.perPage]=r)),"boolean"==typeof a&&(this.perPageDropdownEnabled=a),"boolean"==typeof o&&(this.paginateDropdownAllowAll=o),"string"==typeof g&&(this.paginationMode=g),"string"==typeof i&&(this.nextText=i),"string"==typeof l&&(this.prevText=l),"string"==typeof s&&(this.rowsPerPageText=s),"string"==typeof c&&(this.ofText=c),"string"==typeof u&&(this.pageText=u),"string"==typeof d&&(this.allText=d),"number"==typeof h&&setTimeout((()=>{this.changePage(h)}),500),"function"==typeof p&&(this.paginationInfoFn=p)},initializeExpandRows(){const{enabled:e}=this.expandRowsOptions;"boolean"==typeof e&&(this.expandRowsEnabled=e)},initializeSearch(){const{enabled:e,trigger:t,externalQuery:n,searchFn:r,placeholder:a,skipDiacritics:o}=this.searchOptions;"boolean"==typeof e&&(this.searchEnabled=e),"enter"===t&&(this.searchTrigger=t),"string"==typeof n&&(this.externalSearchQuery=n),"function"==typeof r&&(this.searchFn=r),"string"==typeof a&&(this.searchPlaceholder=a),"boolean"==typeof o&&(this.searchSkipDiacritics=o)},initializeSort(){const{enabled:e,initialSortBy:t,multipleColumns:n}=this.sortOptions,r=JSON.parse(JSON.stringify(t||{}));if("boolean"==typeof e&&(this.sortable=e),"boolean"==typeof n&&(this.multipleColumnSort=n),"object"==typeof r){const e=this.fixedHeader?this.$refs["table-header-secondary"]:this.$refs["table-header-primary"];if(Array.isArray(r))e.setInitialSort(r);else{Object.prototype.hasOwnProperty.call(r,"field")&&e.setInitialSort([r])}}},initializeSelect(){const{enabled:e,selectionInfoClass:t,selectionText:n,clearSelectionText:r,selectOnCheckboxOnly:a,selectAllByPage:o,disableSelectInfo:i,selectAllByGroup:l}=this.selectOptions;"boolean"==typeof e&&(this.selectable=e),"boolean"==typeof a&&(this.selectOnCheckboxOnly=a),"boolean"==typeof o&&(this.selectAllByPage=o),"boolean"==typeof l&&(this.selectAllByGroup=l),"boolean"==typeof i&&(this.disableSelectInfo=i),"string"==typeof t&&(this.selectionInfoClass=t),"string"==typeof n&&(this.selectionText=n),"string"==typeof r&&(this.clearSelectionText=r)}},mounted(){this.perPage&&(this.currentPerPage=this.perPage),this.initializeSort()},components:{"vgt-pagination":O,"vgt-global-search":$,"vgt-header-row":xe,"vgt-table-header":ue}},Vn={key:0,class:"vgt-loading vgt-center-align"},An=t.createElementVNode("span",{class:"vgt-loading__content"}," Loading... ",-1),$n={class:"vgt-selection-info-row__actions vgt-pull-right"},jn={class:"vgt-fixed-header"},Ln=["id"],zn=["id"],Hn=["onMouseenter","onMouseleave","onDblclick","onClick","onAuxclick"],Yn={key:0,class:"line-numbers"},qn=["onClick"],Wn=["disabled","checked"],Qn=["onClick","data-label"],Gn={key:0},Kn=["innerHTML"],Xn=["colspan"],Jn=["colspan"],Zn={key:0},er=["colspan"],tr=t.createElementVNode("div",{class:"vgt-center-align vgt-text-disabled"}," No data for table ",-1),nr={key:2,class:"vgt-wrap__actions-footer"};var rr=m(Un,[["render",function(e,n,r,a,o,i){const l=t.resolveComponent("vgt-pagination"),s=t.resolveComponent("vgt-global-search"),c=t.resolveComponent("vgt-table-header"),u=t.resolveComponent("vgt-header-row");return t.openBlock(),t.createElementBlock("div",{class:t.normalizeClass(i.wrapStyleClasses)},[r.isLoading?(t.openBlock(),t.createElementBlock("div",Vn,[t.renderSlot(e.$slots,"loadingContent",{},(()=>[An]))])):t.createCommentVNode("v-if",!0),t.createElementVNode("div",{class:t.normalizeClass(["vgt-inner-wrap",{"is-loading":r.isLoading}])},[e.paginate&&e.paginateOnTop?t.renderSlot(e.$slots,"pagination-top",{key:0,pageChanged:i.pageChanged,perPageChanged:i.perPageChanged,total:r.totalRows||i.totalRowCount},(()=>[t.createVNode(l,{ref:"paginationTop",onPageChanged:i.pageChanged,onPerPageChanged:i.perPageChanged,perPage:e.perPage,rtl:r.rtl,total:r.totalRows||i.totalRowCount,mode:e.paginationMode,nextText:e.nextText,prevText:e.prevText,rowsPerPageText:e.rowsPerPageText,perPageDropdownEnabled:r.paginationOptions.perPageDropdownEnabled,customRowsPerPageDropdown:e.customRowsPerPageDropdown,paginateDropdownAllowAll:e.paginateDropdownAllowAll,ofText:e.ofText,pageText:e.pageText,allText:e.allText,"info-fn":e.paginationInfoFn},null,8,["onPageChanged","onPerPageChanged","perPage","rtl","total","mode","nextText","prevText","rowsPerPageText","perPageDropdownEnabled","customRowsPerPageDropdown","paginateDropdownAllowAll","ofText","pageText","allText","info-fn"])])):t.createCommentVNode("v-if",!0),t.createVNode(s,{onKeyup:i.searchTableOnKeyUp,onEnter:i.searchTableOnEnter,value:e.globalSearchTerm,onInput:n[0]||(n[0]=t=>e.globalSearchTerm=t),"search-enabled":e.searchEnabled&&null==e.externalSearchQuery,"global-search-placeholder":e.searchPlaceholder},t.createSlots({_:2},[e.$slots["table-actions"]?{name:"internal-table-actions",fn:t.withCtx((()=>[t.renderSlot(e.$slots,"table-actions")]))}:void 0]),1032,["onKeyup","onEnter","value","search-enabled","global-search-placeholder"]),i.selectedRowCount&&!e.disableSelectInfo?(t.openBlock(),t.createElementBlock("div",{key:1,class:t.normalizeClass(["vgt-selection-info-row clearfix",e.selectionInfoClass])},[t.createTextVNode(t.toDisplayString(i.selectionInfo)+" ",1),t.createElementVNode("a",{href:"",onClick:n[1]||(n[1]=t.withModifiers((e=>i.unselectAllInternal(!0)),["prevent"]))},t.toDisplayString(e.clearSelectionText),1),t.createElementVNode("div",$n,[t.renderSlot(e.$slots,"selected-row-actions")])],2)):t.createCommentVNode("v-if",!0),t.createElementVNode("div",jn,[r.fixedHeader?(t.openBlock(),t.createElementBlock("table",{key:0,id:"vgt-table",class:t.normalizeClass(i.tableStyleClasses)},[t.createElementVNode("colgroup",null,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((e,n)=>(t.openBlock(),t.createElementBlock("col",{key:n,id:`col-${n}`},null,8,Ln)))),128))]),t.createCommentVNode(" Table header "),t.createVNode(c,{ref:"table-header-secondary",onToggleSelectAll:i.toggleSelectAll,onToggleExpandRowsAll:i.toggleExpandRowsAll,onSortChange:i.changeSort,onFilterChanged:i.filterRows,columns:r.columns,"line-numbers":r.lineNumbers,selectable:e.selectable,"all-selected":i.allSelected,"all-selected-indeterminate":i.allSelectedIndeterminate,mode:r.mode,sortable:e.sortable,"multiple-column-sort":e.multipleColumnSort,"typed-columns":i.typedColumns,getClasses:i.getClasses,searchEnabled:e.searchEnabled,paginated:i.paginated,"table-ref":e.$refs.table},{"table-column":t.withCtx((n=>[t.renderSlot(e.$slots,"table-column",{column:n.column},(()=>[t.createElementVNode("span",null,t.toDisplayString(n.column.label),1)]))])),"column-filter":t.withCtx((n=>[t.renderSlot(e.$slots,"column-filter",{column:n.column,updateFilters:n.updateFilters})])),_:3},8,["onToggleSelectAll","onToggleExpandRowsAll","onSortChange","onFilterChanged","columns","line-numbers","selectable","all-selected","all-selected-indeterminate","mode","sortable","multiple-column-sort","typed-columns","getClasses","searchEnabled","paginated","table-ref"])],2)):t.createCommentVNode("v-if",!0)]),t.createElementVNode("div",{class:t.normalizeClass({"vgt-responsive":r.responsive}),style:t.normalizeStyle(i.wrapperStyles)},[t.createElementVNode("table",{id:"vgt-table",ref:"table",class:t.normalizeClass(i.tableStyles)},[t.createElementVNode("colgroup",null,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((e,n)=>(t.openBlock(),t.createElementBlock("col",{key:n,id:`col-${n}`},null,8,zn)))),128))]),t.createCommentVNode(" Table header "),t.createVNode(c,{ref:"table-header-primary",onToggleSelectAll:i.toggleSelectAll,onToggleExpandRowsAll:i.toggleExpandRowsAll,onSortChange:i.changeSort,onFilterChanged:i.filterRows,columns:r.columns,"line-numbers":r.lineNumbers,selectable:e.selectable,"all-selected":i.allSelected,"all-selected-indeterminate":i.allSelectedIndeterminate,mode:r.mode,sortable:e.sortable,"multiple-column-sort":e.multipleColumnSort,"typed-columns":i.typedColumns,getClasses:i.getClasses,searchEnabled:e.searchEnabled},{"table-column":t.withCtx((n=>[t.renderSlot(e.$slots,"table-column",{column:n.column},(()=>[t.createElementVNode("span",null,t.toDisplayString(n.column.label),1)]))])),"column-filter":t.withCtx((n=>[t.renderSlot(e.$slots,"column-filter",{column:n.column,updateFilters:n.updateFilters})])),_:3},8,["onToggleSelectAll","onToggleExpandRowsAll","onSortChange","onFilterChanged","columns","line-numbers","selectable","all-selected","all-selected-indeterminate","mode","sortable","multiple-column-sort","typed-columns","getClasses","searchEnabled"]),t.createCommentVNode(" Table body starts here "),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(i.paginated,((n,a)=>(t.openBlock(),t.createElementBlock("tbody",{key:a},[t.createCommentVNode(" if group row header is at the top "),i.groupHeaderOnTop?(t.openBlock(),t.createBlock(u,{key:0,onVgtExpand:e=>i.toggleExpand(n[i.rowKeyField]),"header-row":n,columns:r.columns,"line-numbers":r.lineNumbers,selectable:e.selectable,"select-all-by-group":e.selectAllByGroup,collapsable:r.groupOptions.collapsable,"collect-formatted":i.collectFormatted,"formatted-row":i.formattedRow,class:t.normalizeClass(i.getRowStyleClass(n)),"get-classes":i.getClasses,"full-colspan":i.fullColspan,groupIndex:a,onSelectGroupChange:e=>i.toggleSelectGroup(e,n)},t.createSlots({_:2},[i.hasHeaderRowTemplate?{name:"table-header-row",fn:t.withCtx((n=>[t.renderSlot(e.$slots,"table-header-row",{column:n.column,formattedRow:n.formattedRow,row:n.row})]))}:void 0]),1032,["onVgtExpand","header-row","columns","line-numbers","selectable","select-all-by-group","collapsable","collect-formatted","formatted-row","class","get-classes","full-colspan","groupIndex","onSelectGroupChange"])):t.createCommentVNode("v-if",!0),t.createCommentVNode(" normal rows here. we loop over all rows "),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(n.children,((a,o)=>(t.openBlock(),t.createElementBlock(t.Fragment,null,[!r.groupOptions.collapsable||n.vgtIsExpanded?(t.openBlock(),t.createElementBlock("tr",{key:a.originalIndex,class:t.normalizeClass(i.getRowStyleClass(a)),onMouseenter:e=>i.onMouseenter(a,o),onMouseleave:e=>i.onMouseleave(a,o),onDblclick:e=>i.onRowDoubleClicked(a,o,e),onClick:e=>i.onRowClicked(a,o,e),onAuxclick:e=>i.onRowAuxClicked(a,o,e)},[r.lineNumbers?(t.openBlock(),t.createElementBlock("th",Yn,t.toDisplayString(i.getCurrentIndex(a.originalIndex)),1)):t.createCommentVNode("v-if",!0),e.selectable?(t.openBlock(),t.createElementBlock("th",{key:1,onClick:t.withModifiers((e=>i.onCheckboxClicked(a,o,e)),["stop"]),class:"vgt-checkbox-col"},[t.createElementVNode("input",{type:"checkbox",disabled:a.vgtDisabled,checked:a.vgtSelected},null,8,Wn)],8,qn)):t.createCommentVNode("v-if",!0),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((n,l)=>(t.openBlock(),t.createElementBlock(t.Fragment,null,[!n.hidden&&n.field?(t.openBlock(),t.createElementBlock("td",{key:l,onClick:e=>i.onCellClicked(a,n,o,e),class:t.normalizeClass(i.getClasses(l,"td",a)),"data-label":r.compactMode?n.label:void 0},[t.renderSlot(e.$slots,"table-row",{row:a,column:n,formattedRow:i.formattedRow(a),index:o,expandedRow:e.expandedRowIndex===o},(()=>[n.html?(t.openBlock(),t.createElementBlock("span",{key:1,innerHTML:i.collect(a,n.field)},null,8,Kn)):(t.openBlock(),t.createElementBlock("span",Gn,t.toDisplayString(i.collectFormatted(a,n)),1))]))],10,Qn)):t.createCommentVNode("v-if",!0)],64)))),256))],42,Hn)):t.createCommentVNode("v-if",!0),e.expandedRowIndex===o?(t.openBlock(),t.createElementBlock("tr",{class:t.normalizeClass(r.expandedRowDetailClasses),key:a.originalIndex},[t.createElementVNode("td",{colspan:i.fullColspan},[t.renderSlot(e.$slots,"row-details",{row:a,formattedRow:i.formattedRow(a),index:o})],8,Xn)],2)):t.createCommentVNode("v-if",!0),a.expanded?(t.openBlock(),t.createElementBlock("tr",{key:a.originalIndex},[t.createElementVNode("td",{colspan:i.fullColspan},t.toDisplayString(a.expandedRow),9,Jn)])):t.createCommentVNode("v-if",!0)],64)))),256)),t.createCommentVNode(" if group row header is at the bottom "),i.groupHeaderOnBottom?(t.openBlock(),t.createBlock(u,{key:1,"header-row":n,columns:r.columns,"line-numbers":r.lineNumbers,selectable:e.selectable,"select-all-by-group":e.selectAllByGroup,"collect-formatted":i.collectFormatted,"formatted-row":i.formattedRow,"get-classes":i.getClasses,"full-colspan":i.fullColspan,groupIndex:e.index,onSelectGroupChange:e=>i.toggleSelectGroup(e,n)},t.createSlots({_:2},[i.hasHeaderRowTemplate?{name:"table-header-row",fn:t.withCtx((n=>[t.renderSlot(e.$slots,"table-header-row",{column:n.column,formattedRow:n.formattedRow,row:n.row})]))}:void 0]),1032,["header-row","columns","line-numbers","selectable","select-all-by-group","collect-formatted","formatted-row","get-classes","full-colspan","groupIndex","onSelectGroupChange"])):t.createCommentVNode("v-if",!0)])))),128)),i.showEmptySlot?(t.openBlock(),t.createElementBlock("tbody",Zn,[t.createElementVNode("tr",null,[t.createElementVNode("td",{colspan:i.fullColspan},[t.renderSlot(e.$slots,"emptystate",{},(()=>[tr]))],8,er)])])):t.createCommentVNode("v-if",!0)],2)],6),i.hasFooterSlot?(t.openBlock(),t.createElementBlock("div",nr,[t.renderSlot(e.$slots,"table-actions-bottom")])):t.createCommentVNode("v-if",!0),e.paginate&&e.paginateOnBottom?t.renderSlot(e.$slots,"pagination-bottom",{key:3,pageChanged:i.pageChanged,perPageChanged:i.perPageChanged,total:r.totalRows||i.totalRowCount},(()=>[t.createVNode(l,{ref:"paginationBottom",onPageChanged:i.pageChanged,onPerPageChanged:i.perPageChanged,perPage:e.perPage,rtl:r.rtl,total:r.totalRows||i.totalRowCount,mode:e.paginationMode,nextText:e.nextText,prevText:e.prevText,rowsPerPageText:e.rowsPerPageText,perPageDropdownEnabled:r.paginationOptions.perPageDropdownEnabled,customRowsPerPageDropdown:e.customRowsPerPageDropdown,paginateDropdownAllowAll:e.paginateDropdownAllowAll,ofText:e.ofText,pageText:e.pageText,allText:e.allText,"info-fn":e.paginationInfoFn},null,8,["onPageChanged","onPerPageChanged","perPage","rtl","total","mode","nextText","prevText","rowsPerPageText","perPageDropdownEnabled","customRowsPerPageDropdown","paginateDropdownAllowAll","ofText","pageText","allText","info-fn"])])):t.createCommentVNode("v-if",!0)],2)],2)}]]),ar={install:(e,t)=>{e.component("VueGoodTable",rr)}};return e.VueGoodTable=rr,e.default=ar,Object.defineProperty(e,"__esModule",{value:!0}),e}({},vue);
+if(Number.isNaN(t)||t>this.lastPage||t<1)return e.target.value=this.currentPage,!1;e.target.value=t,this.$emit("page-changed",t)}},mounted(){},components:{}},re={class:"footer__navigation__page-info"},ae={key:0},oe=["for"],ie=["id","value"],le=t.createElementVNode("span",{id:"change-page-hint",style:{display:"none"}}," Type a page number and press Enter to change the page. ",-1),se={key:2};var ce=o(ne,[["render",function(e,n,r,a,o,i){return t.openBlock(),t.createElementBlock("div",re,[r.infoFn?(t.openBlock(),t.createElementBlock("div",ae,t.toDisplayString(r.infoFn(i.infoParams)),1)):"pages"===r.mode?(t.openBlock(),t.createElementBlock("form",{key:1,onSubmit:n[1]||(n[1]=t.withModifiers((()=>{}),["prevent"]))},[t.createElementVNode("label",{for:o.id,class:"page-info__label"},[t.createElementVNode("span",null,t.toDisplayString(r.pageText),1),t.createElementVNode("input",{id:o.id,"aria-describedby":"change-page-hint","aria-controls":"vgb-table",class:"footer__navigation__page-info__current-entry",type:"text",onKeyup:n[0]||(n[0]=t.withKeys(t.withModifiers(((...e)=>i.changePage&&i.changePage(...e)),["stop"]),["enter"])),value:r.currentPage},null,40,ie),t.createElementVNode("span",null,t.toDisplayString(i.pageInfo),1)],8,oe),le],32)):(t.openBlock(),t.createElementBlock("div",se,t.toDisplayString(i.recordInfo),1))])}]]);const ue={class:"vgt-wrap__footer vgt-clearfix"},de={key:0,class:"footer__row-count vgt-pull-left"},he=["for"],fe=["id"],pe=["value"],ge=["value"],me={class:"footer__navigation vgt-pull-right"};var we=o({name:"VgtPagination",props:{styleClass:{default:"table table-bordered"},total:{default:null},perPage:{},rtl:{default:!1},perPageDropdownEnabled:{default:!0},customRowsPerPageDropdown:{default:()=>[]},paginateDropdownAllowAll:{default:!0},mode:{default:z},nextText:{default:"Next"},prevText:{default:"Prev"},rowsPerPageText:{default:"Rows per page:"},ofText:{default:"of"},pageText:{default:"page"},allText:{default:"All"},infoFn:{default:null}},data(){return{id:this.getId(),currentPage:1,prevPage:0,currentPerPage:10,rowsPerPageOptions:[]}},watch:{perPage:{handler(e,t){this.handlePerPage(),this.perPageChanged(t)},immediate:!0},customRowsPerPageDropdown:{handler(){this.handlePerPage()},deep:!0},total:{handler(e,t){-1===this.rowsPerPageOptions.indexOf(this.currentPerPage)&&(this.currentPerPage=e)}}},computed:{pagesCount(){const e=Math.floor(this.total/this.currentPerPage);return 0===this.total%this.currentPerPage?e:e+1},nextIsPossible(){return this.currentPage<this.pagesCount},prevIsPossible(){return this.currentPage>1}},methods:{getId:()=>`vgt-select-rpp-${Math.floor(Math.random()*Date.now())}`,changePage(e,t=!0){e>0&&this.total>this.currentPerPage*(e-1)&&(this.prevPage=this.currentPage,this.currentPage=e,this.pageChanged(t))},nextPage(){this.nextIsPossible&&(this.prevPage=this.currentPage,++this.currentPage,this.pageChanged())},previousPage(){this.prevIsPossible&&(this.prevPage=this.currentPage,--this.currentPage,this.pageChanged())},pageChanged(e=!0){const t={currentPage:this.currentPage,prevPage:this.prevPage};e||(t.noEmit=!0),this.$emit("page-changed",t)},perPageChanged(e){e&&this.$emit("per-page-changed",{currentPerPage:this.currentPerPage}),this.changePage(1,!1)},handlePerPage(){if(this.rowsPerPageOptions=null!==this.customRowsPerPageDropdown&&Array.isArray(this.customRowsPerPageDropdown)&&0!==this.customRowsPerPageDropdown.length?JSON.parse(JSON.stringify(this.customRowsPerPageDropdown)):JSON.parse(JSON.stringify(H)),this.perPage){this.currentPerPage=this.perPage;let e=!1;for(let t=0;t<this.rowsPerPageOptions.length;t++)this.rowsPerPageOptions[t]===this.perPage&&(e=!0);e||-1===this.perPage||this.rowsPerPageOptions.unshift(this.perPage)}else this.currentPerPage=10}},mounted(){},components:{"pagination-page-info":ce}},[["render",function(e,n,r,a,o,i){const l=t.resolveComponent("pagination-page-info");return t.openBlock(),t.createElementBlock("div",ue,[r.perPageDropdownEnabled?(t.openBlock(),t.createElementBlock("div",de,[t.createElementVNode("form",null,[t.createElementVNode("label",{for:o.id,class:"footer__row-count__label"},t.toDisplayString(r.rowsPerPageText)+":",9,he),t.withDirectives(t.createElementVNode("select",{id:o.id,autocomplete:"off",name:"perPageSelect",class:"footer__row-count__select","onUpdate:modelValue":n[0]||(n[0]=e=>o.currentPerPage=e),onChange:n[1]||(n[1]=(...e)=>i.perPageChanged&&i.perPageChanged(...e)),"aria-controls":"vgt-table"},[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(o.rowsPerPageOptions,((e,n)=>(t.openBlock(),t.createElementBlock("option",{key:n,value:e},t.toDisplayString(e),9,pe)))),128)),r.paginateDropdownAllowAll?(t.openBlock(),t.createElementBlock("option",{key:0,value:r.total},t.toDisplayString(r.allText),9,ge)):t.createCommentVNode("v-if",!0)],40,fe),[[t.vModelSelect,o.currentPerPage]])])])):t.createCommentVNode("v-if",!0),t.createElementVNode("div",me,[t.createVNode(l,{onPageChanged:i.changePage,"total-records":r.total,"last-page":i.pagesCount,"current-page":o.currentPage,"current-per-page":o.currentPerPage,"of-text":r.ofText,"page-text":r.pageText,"info-fn":r.infoFn,mode:r.mode},null,8,["onPageChanged","total-records","last-page","current-page","current-per-page","of-text","page-text","info-fn","mode"]),t.createElementVNode("button",{type:"button","aria-controls":"vgt-table",class:t.normalizeClass(["footer__navigation__page-btn",{disabled:!i.prevIsPossible}]),onClick:n[2]||(n[2]=t.withModifiers(((...e)=>i.previousPage&&i.previousPage(...e)),["prevent","stop"]))},[t.createElementVNode("span",{"aria-hidden":"true",class:t.normalizeClass(["chevron",{left:!r.rtl,right:r.rtl}])},null,2),t.createElementVNode("span",null,t.toDisplayString(r.prevText),1)],2),t.createElementVNode("button",{type:"button","aria-controls":"vgt-table",class:t.normalizeClass(["footer__navigation__page-btn",{disabled:!i.nextIsPossible}]),onClick:n[3]||(n[3]=t.withModifiers(((...e)=>i.nextPage&&i.nextPage(...e)),["prevent","stop"]))},[t.createElementVNode("span",null,t.toDisplayString(r.nextText),1),t.createElementVNode("span",{"aria-hidden":"true",class:t.normalizeClass(["chevron",{right:!r.rtl,left:r.rtl}])},null,2)],2)])])}]]);let ve={a:["a","à","á","â","ã","ä","å","æ","ā","ă","ą","ǎ","ǟ","ǡ","ǻ","ȁ","ȃ","ȧ","ɐ","ɑ","ɒ","ͣ","а","ӑ","ӓ","ᵃ","ᵄ","ᶏ","ḁ","ẚ","ạ","ả","ấ","ầ","ẩ","ẫ","ậ","ắ","ằ","ẳ","ẵ","ặ","ₐ","ⱥ","ａ"],b:["b","ƀ","ƃ","ɓ","ᖯ","ᵇ","ᵬ","ᶀ","ḃ","ḅ","ḇ","ｂ"],c:["c","ç","ć","ĉ","ċ","č","ƈ","ȼ","ɕ","ͨ","ᴄ","ᶜ","ḉ","ↄ","ｃ"],d:["d","ď","đ","Ƌ","ƌ","ȡ","ɖ","ɗ","ͩ","ᵈ","ᵭ","ᶁ","ᶑ","ḋ","ḍ","ḏ","ḑ","ḓ","ｄ"],e:["e","è","é","ê","ë","ē","ĕ","ė","ę","ě","ǝ","ȅ","ȇ","ȩ","ɇ","ɘ","ͤ","ᵉ","ᶒ","ḕ","ḗ","ḙ","ḛ","ḝ","ẹ","ẻ","ẽ","ế","ề","ể","ễ","ệ","ₑ","ｅ"],f:["f","ƒ","ᵮ","ᶂ","ᶠ","ḟ","ｆ"],g:["g","ĝ","ğ","ġ","ģ","ǥ","ǧ","ǵ","ɠ","ɡ","ᵍ","ᵷ","ᵹ","ᶃ","ᶢ","ḡ","ｇ"],h:["h","ĥ","ħ","ƕ","ȟ","ɥ","ɦ","ʮ","ʯ","ʰ","ʱ","ͪ","Һ","һ","ᑋ","ᶣ","ḣ","ḥ","ḧ","ḩ","ḫ","ⱨ","ｈ"],i:["i","ì","í","î","ï","ĩ","ī","ĭ","į","ǐ","ȉ","ȋ","ɨ","ͥ","ᴉ","ᵎ","ᵢ","ᶖ","ᶤ","ḭ","ḯ","ỉ","ị","ｉ"],j:["j","ĵ","ǰ","ɉ","ʝ","ʲ","ᶡ","ᶨ","ｊ"],k:["k","ķ","ƙ","ǩ","ʞ","ᵏ","ᶄ","ḱ","ḳ","ḵ","ⱪ","ｋ"],l:["l","ĺ","ļ","ľ","ŀ","ł","ƚ","ȴ","ɫ","ɬ","ɭ","ˡ","ᶅ","ᶩ","ᶪ","ḷ","ḹ","ḻ","ḽ","ℓ","ⱡ"],m:["m","ɯ","ɰ","ɱ","ͫ","ᴟ","ᵐ","ᵚ","ᵯ","ᶆ","ᶬ","ᶭ","ḿ","ṁ","ṃ","㎡","㎥","ｍ"],n:["n","ñ","ń","ņ","ň","ŉ","ƞ","ǹ","ȵ","ɲ","ɳ","ᵰ","ᶇ","ᶮ","ᶯ","ṅ","ṇ","ṉ","ṋ","ⁿ","ｎ"],o:["o","ò","ó","ô","õ","ö","ø","ō","ŏ","ő","ơ","ǒ","ǫ","ǭ","ǿ","ȍ","ȏ","ȫ","ȭ","ȯ","ȱ","ɵ","ͦ","о","ӧ","ө","ᴏ","ᴑ","ᴓ","ᴼ","ᵒ","ᶱ","ṍ","ṏ","ṑ","ṓ","ọ","ỏ","ố","ồ","ổ","ỗ","ộ","ớ","ờ","ở","ỡ","ợ","ₒ","ｏ","𐐬"],p:["p","ᵖ","ᵱ","ᵽ","ᶈ","ṕ","ṗ","ｐ"],q:["q","ɋ","ʠ","ᛩ","ｑ"],r:["r","ŕ","ŗ","ř","ȑ","ȓ","ɍ","ɹ","ɻ","ʳ","ʴ","ʵ","ͬ","ᵣ","ᵲ","ᶉ","ṙ","ṛ","ṝ","ṟ"],s:["s","ś","ŝ","ş","š","ș","ʂ","ᔆ","ᶊ","ṡ","ṣ","ṥ","ṧ","ṩ","ｓ"],t:["t","ţ","ť","ŧ","ƫ","ƭ","ț","ʇ","ͭ","ᵀ","ᵗ","ᵵ","ᶵ","ṫ","ṭ","ṯ","ṱ","ẗ","ｔ"],u:["u","ù","ú","û","ü","ũ","ū","ŭ","ů","ű","ų","ư","ǔ","ǖ","ǘ","ǚ","ǜ","ȕ","ȗ","ͧ","ߎ","ᵘ","ᵤ","ṳ","ṵ","ṷ","ṹ","ṻ","ụ","ủ","ứ","ừ","ử","ữ","ự","ｕ"],v:["v","ʋ","ͮ","ᵛ","ᵥ","ᶹ","ṽ","ṿ","ⱱ","ｖ","ⱴ"],w:["w","ŵ","ʷ","ᵂ","ẁ","ẃ","ẅ","ẇ","ẉ","ẘ","ⱳ","ｗ"],x:["x","̽","͓","ᶍ","ͯ","ẋ","ẍ","ₓ","ｘ"],y:["y","ý","ÿ","ŷ","ȳ","ɏ","ʸ","ẏ","ỳ","ỵ","ỷ","ỹ","ｙ"],z:["z","ź","ż","ž","ƶ","ȥ","ɀ","ʐ","ʑ","ᙆ","ᙇ","ᶻ","ᶼ","ᶽ","ẑ","ẓ","ẕ","ⱬ","ｚ"]};const ye=function(){let e={};for(let t in ve){let n=ve[t];for(let r in n){let a=n[r];a!==t&&(e[a]=t)}}return e}(),be=/[^a-z0-9\s,.-]/,ke=e=>{if(-1===e.search(be))return e;let t="",n=e.length;for(var r=0;r<n;r++){let n=e.charAt(r);t+=n in ye?ye[n]:n}return t},Ce=e=>e.replace(/[\\^$*+?.()|[\]{}]/g,"\\$&");var xe={format:e=>e,filterPredicate(e,t,n=!1,r=!1){if(null==e)return!1;const a=n?String(e).toLowerCase():ke(Ce(String(e)).toLowerCase()),o=n?t.toLowerCase():ke(Ce(t).toLowerCase());return r?a===o:a.indexOf(o)>-1},compare(e,t){function n(e){return null==e?"":ke(String(e).toLowerCase())}return(e=n(e))<(t=n(t))?-1:e>t?1:0}};function Pe(e){return Pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pe(e)}function Te(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function Se(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function Ee(e){Se(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===Pe(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}var Re={};function Oe(){return Re}function Be(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function De(e){if(Se(1,arguments),!function(e){return Se(1,arguments),e instanceof Date||"object"===Pe(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=Ee(e);return!isNaN(Number(t))}function Ne(e,t){return Se(2,arguments),function(e,t){Se(2,arguments);var n=Ee(e).getTime(),r=Te(t);return new Date(n+r)}(e,-Te(t))}function _e(e){Se(1,arguments);var t=Ee(e),n=t.getUTCDay(),r=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function Fe(e){Se(1,arguments);var t=Ee(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=_e(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=_e(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}var Me=6048e5;function Ae(e){Se(1,arguments);var t=Ee(e),n=_e(t).getTime()-function(e){Se(1,arguments);var t=Fe(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),_e(n)}(t).getTime();return Math.round(n/Me)+1}function Ie(e,t){var n,r,a,o,i,l,s,c;Se(1,arguments);var u=Oe(),d=Te(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.weekStartsOn)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:u.weekStartsOn)&&void 0!==r?r:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=Ee(e),f=h.getUTCDay(),p=(f<d?7:0)+f-d;return h.setUTCDate(h.getUTCDate()-p),h.setUTCHours(0,0,0,0),h}function Ve(e,t){var n,r,a,o,i,l,s,c;Se(1,arguments);var u=Ee(e),d=u.getUTCFullYear(),h=Oe(),f=Te(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:h.firstWeekContainsDate)&&void 0!==r?r:null===(s=h.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(d+1,0,f),p.setUTCHours(0,0,0,0);var g=Ie(p,t),m=new Date(0);m.setUTCFullYear(d,0,f),m.setUTCHours(0,0,0,0);var w=Ie(m,t);return u.getTime()>=g.getTime()?d+1:u.getTime()>=w.getTime()?d:d-1}var Ue=6048e5;function $e(e,t){Se(1,arguments);var n=Ee(e),r=Ie(n,t).getTime()-function(e,t){var n,r,a,o,i,l,s,c;Se(1,arguments);var u=Oe(),d=Te(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:u.firstWeekContainsDate)&&void 0!==r?r:null===(s=u.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),h=Ve(e,t),f=new Date(0);return f.setUTCFullYear(h,0,d),f.setUTCHours(0,0,0,0),Ie(f,t)}(n,t).getTime();return Math.round(r/Ue)+1}function je(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}var Le={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return je("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):je(n+1,2)},d:function(e,t){return je(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return je(e.getUTCHours()%12||12,t.length)},H:function(e,t){return je(e.getUTCHours(),t.length)},m:function(e,t){return je(e.getUTCMinutes(),t.length)},s:function(e,t){return je(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return je(Math.floor(r*Math.pow(10,n-3)),t.length)}},ze=Le,He="midnight",Ye="noon",qe="morning",We="afternoon",Ge="evening",Qe="night",Ke={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear();return n.ordinalNumber(r>0?r:1-r,{unit:"year"})}return ze.y(e,t)},Y:function(e,t,n,r){var a=Ve(e,r),o=a>0?a:1-a;return"YY"===t?je(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):je(o,t.length)},R:function(e,t){return je(Fe(e),t.length)},u:function(e,t){return je(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return je(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return je(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return ze.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return je(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=$e(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):je(a,t.length)},I:function(e,t,n){var r=Ae(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):je(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):ze.d(e,t)},D:function(e,t,n){var r=function(e){Se(1,arguments);var t=Ee(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime();return Math.floor((n-r)/864e5)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):je(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return je(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return je(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return je(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?Ye:0===a?He:a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?Ge:a>=12?We:a>=4?qe:Qe,t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return ze.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ze.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):je(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):je(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):ze.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ze.s(e,t)},S:function(e,t){return ze.S(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return Je(a);case"XXXX":case"XX":return Ze(a);default:return Ze(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Je(a);case"xxxx":case"xx":return Ze(a);default:return Ze(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Xe(a,":");default:return"GMT"+Ze(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Xe(a,":");default:return"GMT"+Ze(a,":")}},t:function(e,t,n,r){return je(Math.floor((r._originalDate||e).getTime()/1e3),t.length)},T:function(e,t,n,r){return je((r._originalDate||e).getTime(),t.length)}};function Xe(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+je(o,2)}function Je(e,t){return e%60==0?(e>0?"-":"+")+je(Math.abs(e)/60,2):Ze(e,t)}function Ze(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+je(Math.floor(a/60),2)+n+je(a%60,2)}var et=Ke,tt=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},nt=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},rt={p:nt,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return tt(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",tt(a,t)).replace("{{time}}",nt(o,t))}},at=rt,ot=["D","DD"],it=["YY","YYYY"];function lt(e){return-1!==ot.indexOf(e)}function st(e){return-1!==it.indexOf(e)}function ct(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ut={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}},dt=function(e,t,n){var r,a=ut[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r};function ht(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var ft={date:ht({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ht({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ht({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},pt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"},gt=function(e,t,n,r){return pt[e]};function mt(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,l=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[l]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}var wt={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:mt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:mt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:mt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:mt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:mt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},vt=wt;function yt(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=t.match(r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth]);if(!a)return null;var o,i=a[0],l=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(l)?function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n;return}(l,(function(e){return e.test(i)})):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n;return}(l,(function(e){return e.test(i)}));return o=e.valueCallback?e.valueCallback(s):s,{value:o=n.valueCallback?n.valueCallback(o):o,rest:t.slice(i.length)}}}var bt,kt={ordinalNumber:(bt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(bt.matchPattern);if(!n)return null;var r=n[0],a=e.match(bt.parsePattern);if(!a)return null;var o=bt.valueCallback?bt.valueCallback(a[0]):a[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:e.slice(r.length)}}),era:yt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:yt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:yt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:yt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:yt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},Ct={code:"en-US",formatDistance:dt,formatLong:ft,formatRelative:gt,localize:vt,match:kt,options:{weekStartsOn:0,firstWeekContainsDate:1}},xt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Pt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Tt=/^'([^]*?)'?$/,St=/''/g,Et=/[a-zA-Z]/;function Rt(e,t,n){var r,a,o,i,l,s,c,u,d,h,f,p,g,m,w,v,y,b;Se(2,arguments);var k=String(t),C=Oe(),x=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:C.locale)&&void 0!==r?r:Ct,P=Te(null!==(o=null!==(i=null!==(l=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==l?l:C.firstWeekContainsDate)&&void 0!==i?i:null===(d=C.locale)||void 0===d||null===(h=d.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==o?o:1);if(!(P>=1&&P<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=Te(null!==(f=null!==(p=null!==(g=null!==(m=null==n?void 0:n.weekStartsOn)&&void 0!==m?m:null==n||null===(w=n.locale)||void 0===w||null===(v=w.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==g?g:C.weekStartsOn)&&void 0!==p?p:null===(y=C.locale)||void 0===y||null===(b=y.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==f?f:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!x.localize)throw new RangeError("locale must contain localize property");if(!x.formatLong)throw new RangeError("locale must contain formatLong property");var S=Ee(e);if(!De(S))throw new RangeError("Invalid time value");var E=Ne(S,Be(S)),R={firstWeekContainsDate:P,weekStartsOn:T,locale:x,_originalDate:S};return k.match(Pt).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,at[t])(e,x.formatLong):e})).join("").match(xt).map((function(r){if("''"===r)return"'";var a=r[0];if("'"===a)return function(e){var t=e.match(Tt);if(!t)return e;return t[1].replace(St,"'")}(r);var o=et[a];if(o)return null!=n&&n.useAdditionalWeekYearTokens||!st(r)||ct(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!lt(r)||ct(r,t,String(e)),o(E,r,x.localize,R);if(a.match(Et))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("")}function Ot(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function Bt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Dt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Bt(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw o}}}}function Nt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _t(e,t){return _t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_t(e,t)}function Ft(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_t(e,t)}function Mt(e){return Mt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Mt(e)}function At(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(At=function(){return!!e})()}function It(e){var t=At();return function(){var n,r=Mt(e);if(t){var a=Mt(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return function(e,t){if(t&&("object"==Pe(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Nt(e)}(this,n)}}function Vt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ut(e){var t=function(e,t){if("object"!=Pe(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=Pe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==Pe(t)?t:t+""}function $t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Ut(r.key),r)}}function jt(e,t,n){return t&&$t(e.prototype,t),n&&$t(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function Lt(e,t,n){return(t=Ut(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var zt=function(){function e(){Vt(this,e),Lt(this,"priority",void 0),Lt(this,"subPriority",0)}return jt(e,[{key:"validate",value:function(e,t){return!0}}]),e}(),Ht=function(e){Ft(n,e);var t=It(n);function n(e,r,a,o,i){var l;return Vt(this,n),(l=t.call(this)).value=e,l.validateValue=r,l.setValue=a,l.priority=o,i&&(l.subPriority=i),l}return jt(n,[{key:"validate",value:function(e,t){return this.validateValue(e,this.value,t)}},{key:"set",value:function(e,t,n){return this.setValue(e,t,this.value,n)}}]),n}(zt),Yt=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",10),Lt(Nt(e),"subPriority",-1),e}return jt(n,[{key:"set",value:function(e,t){if(t.timestampIsSet)return e;var n=new Date(0);return n.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),n}}]),n}(zt),qt=function(){function e(){Vt(this,e),Lt(this,"incompatibleTokens",void 0),Lt(this,"priority",void 0),Lt(this,"subPriority",void 0)}return jt(e,[{key:"run",value:function(e,t,n,r){var a=this.parse(e,t,n,r);return a?{setter:new Ht(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}},{key:"validate",value:function(e,t,n){return!0}}]),e}(),Wt=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",140),Lt(Nt(e),"incompatibleTokens",["R","u","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"});case"GGGGG":return n.era(e,{width:"narrow"});default:return n.era(e,{width:"wide"})||n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"})}}},{key:"set",value:function(e,t,n){return t.era=n,e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e}}]),n}(qt),Gt=/^(1[0-2]|0?\d)/,Qt=/^(3[0-1]|[0-2]?\d)/,Kt=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Xt=/^(5[0-3]|[0-4]?\d)/,Jt=/^(2[0-3]|[0-1]?\d)/,Zt=/^(2[0-4]|[0-1]?\d)/,en=/^(1[0-1]|0?\d)/,tn=/^(1[0-2]|0?\d)/,nn=/^[0-5]?\d/,rn=/^[0-5]?\d/,an=/^\d/,on=/^\d{1,2}/,ln=/^\d{1,3}/,sn=/^\d{1,4}/,cn=/^-?\d+/,un=/^-?\d/,dn=/^-?\d{1,2}/,hn=/^-?\d{1,3}/,fn=/^-?\d{1,4}/,pn=/^([+-])(\d{2})(\d{2})?|Z/,gn=/^([+-])(\d{2})(\d{2})|Z/,mn=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,wn=/^([+-])(\d{2}):(\d{2})|Z/,vn=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function yn(e,t){return e?{value:t(e.value),rest:e.rest}:e}function bn(e,t){var n=t.match(e);return n?{value:parseInt(n[0],10),rest:t.slice(n[0].length)}:null}function kn(e,t){var n=t.match(e);return n?"Z"===n[0]?{value:0,rest:t.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:t.slice(n[0].length)}:null}function Cn(e){return bn(cn,e)}function xn(e,t){switch(e){case 1:return bn(an,t);case 2:return bn(on,t);case 3:return bn(ln,t);case 4:return bn(sn,t);default:return bn(new RegExp("^\\d{1,"+e+"}"),t)}}function Pn(e,t){switch(e){case 1:return bn(un,t);case 2:return bn(dn,t);case 3:return bn(hn,t);case 4:return bn(fn,t);default:return bn(new RegExp("^-?\\d{1,"+e+"}"),t)}}function Tn(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function Sn(e,t){var n,r=t>0,a=r?t:1-t;if(a<=50)n=e||100;else{var o=a+50;n=e+100*Math.floor(o/100)-(e>=o%100?100:0)}return r?n:1-n}function En(e){return e%400==0||e%4==0&&e%100!=0}var Rn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",130),Lt(Nt(e),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){var r=function(e){return{year:e,isTwoDigitYear:"yy"===t}};switch(t){case"y":return yn(xn(4,e),r);case"yo":return yn(n.ordinalNumber(e,{unit:"year"}),r);default:return yn(xn(t.length,e),r)}}},{key:"validate",value:function(e,t){return t.isTwoDigitYear||t.year>0}},{key:"set",value:function(e,t,n){var r=e.getUTCFullYear();if(n.isTwoDigitYear){var a=Sn(n.year,r);return e.setUTCFullYear(a,0,1),e.setUTCHours(0,0,0,0),e}return e.setUTCFullYear("era"in t&&1!==t.era?1-n.year:n.year,0,1),e.setUTCHours(0,0,0,0),e}}]),n}(qt),On=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",130),Lt(Nt(e),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){var r=function(e){return{year:e,isTwoDigitYear:"YY"===t}};switch(t){case"Y":return yn(xn(4,e),r);case"Yo":return yn(n.ordinalNumber(e,{unit:"year"}),r);default:return yn(xn(t.length,e),r)}}},{key:"validate",value:function(e,t){return t.isTwoDigitYear||t.year>0}},{key:"set",value:function(e,t,n,r){var a=Ve(e,r);if(n.isTwoDigitYear){var o=Sn(n.year,a);return e.setUTCFullYear(o,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),Ie(e,r)}return e.setUTCFullYear("era"in t&&1!==t.era?1-n.year:n.year,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),Ie(e,r)}}]),n}(qt),Bn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",130),Lt(Nt(e),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t){return Pn("R"===t?4:t.length,e)}},{key:"set",value:function(e,t,n){var r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),_e(r)}}]),n}(qt),Dn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",130),Lt(Nt(e),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t){return Pn("u"===t?4:t.length,e)}},{key:"set",value:function(e,t,n){return e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e}}]),n}(qt),Nn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",120),Lt(Nt(e),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"Q":case"QQ":return xn(t.length,e);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});default:return n.quarter(e,{width:"wide",context:"formatting"})||n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,t){return t>=1&&t<=4}},{key:"set",value:function(e,t,n){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e}}]),n}(qt),_n=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",120),Lt(Nt(e),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"q":case"qq":return xn(t.length,e);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});default:return n.quarter(e,{width:"wide",context:"standalone"})||n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,t){return t>=1&&t<=4}},{key:"set",value:function(e,t,n){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e}}]),n}(qt),Fn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),Lt(Nt(e),"priority",110),e}return jt(n,[{key:"parse",value:function(e,t,n){var r=function(e){return e-1};switch(t){case"M":return yn(bn(Gt,e),r);case"MM":return yn(xn(2,e),r);case"Mo":return yn(n.ordinalNumber(e,{unit:"month"}),r);case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});default:return n.month(e,{width:"wide",context:"formatting"})||n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=11}},{key:"set",value:function(e,t,n){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e}}]),n}(qt),Mn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",110),Lt(Nt(e),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){var r=function(e){return e-1};switch(t){case"L":return yn(bn(Gt,e),r);case"LL":return yn(xn(2,e),r);case"Lo":return yn(n.ordinalNumber(e,{unit:"month"}),r);case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});default:return n.month(e,{width:"wide",context:"standalone"})||n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=11}},{key:"set",value:function(e,t,n){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e}}]),n}(qt);var An=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",100),Lt(Nt(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"w":return bn(Xt,e);case"wo":return n.ordinalNumber(e,{unit:"week"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return t>=1&&t<=53}},{key:"set",value:function(e,t,n,r){return Ie(function(e,t,n){Se(2,arguments);var r=Ee(e),a=Te(t),o=$e(r,n)-a;return r.setUTCDate(r.getUTCDate()-7*o),r}(e,n,r),r)}}]),n}(qt);var In=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",100),Lt(Nt(e),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"I":return bn(Xt,e);case"Io":return n.ordinalNumber(e,{unit:"week"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return t>=1&&t<=53}},{key:"set",value:function(e,t,n){return _e(function(e,t){Se(2,arguments);var n=Ee(e),r=Te(t),a=Ae(n)-r;return n.setUTCDate(n.getUTCDate()-7*a),n}(e,n))}}]),n}(qt),Vn=[31,28,31,30,31,30,31,31,30,31,30,31],Un=[31,29,31,30,31,30,31,31,30,31,30,31],$n=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",90),Lt(Nt(e),"subPriority",1),Lt(Nt(e),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"d":return bn(Qt,e);case"do":return n.ordinalNumber(e,{unit:"date"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){var n=En(e.getUTCFullYear()),r=e.getUTCMonth();return n?t>=1&&t<=Un[r]:t>=1&&t<=Vn[r]}},{key:"set",value:function(e,t,n){return e.setUTCDate(n),e.setUTCHours(0,0,0,0),e}}]),n}(qt),jn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",90),Lt(Nt(e),"subpriority",1),Lt(Nt(e),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"D":case"DD":return bn(Kt,e);case"Do":return n.ordinalNumber(e,{unit:"date"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return En(e.getUTCFullYear())?t>=1&&t<=366:t>=1&&t<=365}},{key:"set",value:function(e,t,n){return e.setUTCMonth(0,n),e.setUTCHours(0,0,0,0),e}}]),n}(qt);function Ln(e,t,n){var r,a,o,i,l,s,c,u;Se(2,arguments);var d=Oe(),h=Te(null!==(r=null!==(a=null!==(o=null!==(i=null==n?void 0:n.weekStartsOn)&&void 0!==i?i:null==n||null===(l=n.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==a?a:null===(c=d.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==r?r:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=Ee(e),p=Te(t),g=((p%7+7)%7<h?7:0)+p-f.getUTCDay();return f.setUTCDate(f.getUTCDate()+g),f}var zn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",90),Lt(Nt(e),"incompatibleTokens",["D","i","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=6}},{key:"set",value:function(e,t,n,r){return(e=Ln(e,n,r)).setUTCHours(0,0,0,0),e}}]),n}(qt),Hn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",90),Lt(Nt(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n,r){var a=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"e":case"ee":return yn(xn(t.length,e),a);case"eo":return yn(n.ordinalNumber(e,{unit:"day"}),a);case"eee":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeeee":return n.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=6}},{key:"set",value:function(e,t,n,r){return(e=Ln(e,n,r)).setUTCHours(0,0,0,0),e}}]),n}(qt),Yn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",90),Lt(Nt(e),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n,r){var a=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"c":case"cc":return yn(xn(t.length,e),a);case"co":return yn(n.ordinalNumber(e,{unit:"day"}),a);case"ccc":return n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"ccccc":return n.day(e,{width:"narrow",context:"standalone"});case"cccccc":return n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});default:return n.day(e,{width:"wide",context:"standalone"})||n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(e,t){return t>=0&&t<=6}},{key:"set",value:function(e,t,n,r){return(e=Ln(e,n,r)).setUTCHours(0,0,0,0),e}}]),n}(qt);var qn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",90),Lt(Nt(e),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){var r=function(e){return 0===e?7:e};switch(t){case"i":case"ii":return xn(t.length,e);case"io":return n.ordinalNumber(e,{unit:"day"});case"iii":return yn(n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r);case"iiiii":return yn(n.day(e,{width:"narrow",context:"formatting"}),r);case"iiiiii":return yn(n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r);default:return yn(n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r)}}},{key:"validate",value:function(e,t){return t>=1&&t<=7}},{key:"set",value:function(e,t,n){return e=function(e,t){Se(2,arguments);var n=Te(t);n%7==0&&(n-=7);var r=Ee(e),a=((n%7+7)%7<1?7:0)+n-r.getUTCDay();return r.setUTCDate(r.getUTCDate()+a),r}(e,n),e.setUTCHours(0,0,0,0),e}}]),n}(qt),Wn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",80),Lt(Nt(e),"incompatibleTokens",["b","B","H","k","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,t,n){return e.setUTCHours(Tn(n),0,0,0),e}}]),n}(qt),Gn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",80),Lt(Nt(e),"incompatibleTokens",["a","B","H","k","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"b":case"bb":case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,t,n){return e.setUTCHours(Tn(n),0,0,0),e}}]),n}(qt),Qn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",80),Lt(Nt(e),"incompatibleTokens",["a","b","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(e,t,n){return e.setUTCHours(Tn(n),0,0,0),e}}]),n}(qt),Kn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",70),Lt(Nt(e),"incompatibleTokens",["H","K","k","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"h":return bn(tn,e);case"ho":return n.ordinalNumber(e,{unit:"hour"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return t>=1&&t<=12}},{key:"set",value:function(e,t,n){var r=e.getUTCHours()>=12;return e.setUTCHours(r&&n<12?n+12:r||12!==n?n:0,0,0,0),e}}]),n}(qt),Xn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",70),Lt(Nt(e),"incompatibleTokens",["a","b","h","K","k","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"H":return bn(Jt,e);case"Ho":return n.ordinalNumber(e,{unit:"hour"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return t>=0&&t<=23}},{key:"set",value:function(e,t,n){return e.setUTCHours(n,0,0,0),e}}]),n}(qt),Jn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",70),Lt(Nt(e),"incompatibleTokens",["h","H","k","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"K":return bn(en,e);case"Ko":return n.ordinalNumber(e,{unit:"hour"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return t>=0&&t<=11}},{key:"set",value:function(e,t,n){var r=e.getUTCHours()>=12;return e.setUTCHours(r&&n<12?n+12:n,0,0,0),e}}]),n}(qt),Zn=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",70),Lt(Nt(e),"incompatibleTokens",["a","b","h","H","K","t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"k":return bn(Zt,e);case"ko":return n.ordinalNumber(e,{unit:"hour"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return t>=1&&t<=24}},{key:"set",value:function(e,t,n){return e.setUTCHours(n<=24?n%24:n,0,0,0),e}}]),n}(qt),er=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",60),Lt(Nt(e),"incompatibleTokens",["t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"m":return bn(nn,e);case"mo":return n.ordinalNumber(e,{unit:"minute"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return t>=0&&t<=59}},{key:"set",value:function(e,t,n){return e.setUTCMinutes(n,0,0),e}}]),n}(qt),tr=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",50),Lt(Nt(e),"incompatibleTokens",["t","T"]),e}return jt(n,[{key:"parse",value:function(e,t,n){switch(t){case"s":return bn(rn,e);case"so":return n.ordinalNumber(e,{unit:"second"});default:return xn(t.length,e)}}},{key:"validate",value:function(e,t){return t>=0&&t<=59}},{key:"set",value:function(e,t,n){return e.setUTCSeconds(n,0),e}}]),n}(qt),nr=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",30),Lt(Nt(e),"incompatibleTokens",["t","T"]),e}return jt(n,[{key:"parse",value:function(e,t){return yn(xn(t.length,e),(function(e){return Math.floor(e*Math.pow(10,3-t.length))}))}},{key:"set",value:function(e,t,n){return e.setUTCMilliseconds(n),e}}]),n}(qt),rr=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",10),Lt(Nt(e),"incompatibleTokens",["t","T","x"]),e}return jt(n,[{key:"parse",value:function(e,t){switch(t){case"X":return kn(pn,e);case"XX":return kn(gn,e);case"XXXX":return kn(mn,e);case"XXXXX":return kn(vn,e);default:return kn(wn,e)}}},{key:"set",value:function(e,t,n){return t.timestampIsSet?e:new Date(e.getTime()-n)}}]),n}(qt),ar=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",10),Lt(Nt(e),"incompatibleTokens",["t","T","X"]),e}return jt(n,[{key:"parse",value:function(e,t){switch(t){case"x":return kn(pn,e);case"xx":return kn(gn,e);case"xxxx":return kn(mn,e);case"xxxxx":return kn(vn,e);default:return kn(wn,e)}}},{key:"set",value:function(e,t,n){return t.timestampIsSet?e:new Date(e.getTime()-n)}}]),n}(qt),or=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",40),Lt(Nt(e),"incompatibleTokens","*"),e}return jt(n,[{key:"parse",value:function(e){return Cn(e)}},{key:"set",value:function(e,t,n){return[new Date(1e3*n),{timestampIsSet:!0}]}}]),n}(qt),ir=function(e){Ft(n,e);var t=It(n);function n(){var e;Vt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Lt(Nt(e=t.call.apply(t,[this].concat(a))),"priority",20),Lt(Nt(e),"incompatibleTokens","*"),e}return jt(n,[{key:"parse",value:function(e){return Cn(e)}},{key:"set",value:function(e,t,n){return[new Date(n),{timestampIsSet:!0}]}}]),n}(qt),lr={G:new Wt,y:new Rn,Y:new On,R:new Bn,u:new Dn,Q:new Nn,q:new _n,M:new Fn,L:new Mn,w:new An,I:new In,d:new $n,D:new jn,E:new zn,e:new Hn,c:new Yn,i:new qn,a:new Wn,b:new Gn,B:new Qn,h:new Kn,H:new Xn,K:new Jn,k:new Zn,m:new er,s:new tr,S:new nr,X:new rr,x:new ar,t:new or,T:new ir},sr=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,cr=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ur=/^'([^]*?)'?$/,dr=/''/g,hr=/\S/,fr=/[a-zA-Z]/;function pr(e,t,n,r){var a,o,i,l,s,c,u,d,h,f,p,g,m,w,v,y,b,k;Se(3,arguments);var C=String(e),x=String(t),P=Oe(),T=null!==(a=null!==(o=null==r?void 0:r.locale)&&void 0!==o?o:P.locale)&&void 0!==a?a:Ct;if(!T.match)throw new RangeError("locale must contain match property");var S=Te(null!==(i=null!==(l=null!==(s=null!==(c=null==r?void 0:r.firstWeekContainsDate)&&void 0!==c?c:null==r||null===(u=r.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:P.firstWeekContainsDate)&&void 0!==l?l:null===(h=P.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==i?i:1);if(!(S>=1&&S<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=Te(null!==(p=null!==(g=null!==(m=null!==(w=null==r?void 0:r.weekStartsOn)&&void 0!==w?w:null==r||null===(v=r.locale)||void 0===v||null===(y=v.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==m?m:P.weekStartsOn)&&void 0!==g?g:null===(b=P.locale)||void 0===b||null===(k=b.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==p?p:0);if(!(E>=0&&E<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===x)return""===C?Ee(n):new Date(NaN);var R,O={firstWeekContainsDate:S,weekStartsOn:E,locale:T},B=[new Yt],D=x.match(cr).map((function(e){var t=e[0];return t in at?(0,at[t])(e,T.formatLong):e})).join("").match(sr),N=[],_=Dt(D);try{var F=function(){var t=R.value;null!=r&&r.useAdditionalWeekYearTokens||!st(t)||ct(t,x,e),null!=r&&r.useAdditionalDayOfYearTokens||!lt(t)||ct(t,x,e);var n=t[0],a=lr[n];if(a){var o=a.incompatibleTokens;if(Array.isArray(o)){var i=N.find((function(e){return o.includes(e.token)||e.token===n}));if(i)throw new RangeError("The format string mustn't contain `".concat(i.fullToken,"` and `").concat(t,"` at the same time"))}else if("*"===a.incompatibleTokens&&N.length>0)throw new RangeError("The format string mustn't contain `".concat(t,"` and any other token at the same time"));N.push({token:n,fullToken:t});var l=a.run(C,t,T.match,O);if(!l)return{v:new Date(NaN)};B.push(l.setter),C=l.rest}else{if(n.match(fr))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");if("''"===t?t="'":"'"===n&&(t=t.match(ur)[1].replace(dr,"'")),0!==C.indexOf(t))return{v:new Date(NaN)};C=C.slice(t.length)}};for(_.s();!(R=_.n()).done;){var M=F();if("object"===Pe(M))return M.v}}catch(e){_.e(e)}finally{_.f()}if(C.length>0&&hr.test(C))return new Date(NaN);var A=B.map((function(e){return e.priority})).sort((function(e,t){return t-e})).filter((function(e,t,n){return n.indexOf(e)===t})).map((function(e){return B.filter((function(t){return t.priority===e})).sort((function(e,t){return t.subPriority-e.subPriority}))})).map((function(e){return e[0]})),I=Ee(n);if(isNaN(I.getTime()))return new Date(NaN);var V,U=Ne(I,Be(I)),$={},j=Dt(A);try{for(j.s();!(V=j.n()).done;){var L=V.value;if(!L.validate(U,O))return new Date(NaN);var z=L.set(U,$,O);Array.isArray(z)?(U=z[0],Ot($,z[1])):U=z}}catch(e){j.e(e)}finally{j.f()}return U}const gr=Object.assign({},xe);gr.isRight=!0,gr.compare=function(e,t,n){function r(e){if(n&&n.dateInputFormat)return pr(`${e}`,`${n.dateInputFormat}`,new Date);if("string"==typeof e)try{return Date.parse(e)}catch(t){return e}return e}return e=r(e),t=r(t),De(e)?De(t)?function(e,t){Se(2,arguments);var n=Ee(e),r=Ee(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}(e,t):1:-1},gr.format=function(e,t){if(null==e)return"";const n=pr(e,t.dateInputFormat,new Date);return De(n)?Rt(n,t.dateOutputFormat):(console.error(`Not a valid date: "${e}"`),null)};var mr=Object.freeze({__proto__:null,default:gr});const wr=Object.assign({},xe);wr.isRight=!0,wr.filterPredicate=function(e,t){return 0===wr.compare(e,t)},wr.compare=function(e,t){function n(e){return null==e?-1/0:e.indexOf(".")>=0?parseFloat(e):parseInt(e,10)}return(e="number"==typeof e?e:n(e))<(t="number"==typeof t?t:n(t))?-1:e>t?1:0};var vr=Object.freeze({__proto__:null,default:wr});const yr=Object.assign({},wr);yr.format=function(e){return null==e?"":parseFloat(Math.round(100*e)/100).toFixed(2)};var br=Object.freeze({__proto__:null,default:yr});const kr=Object.assign({},wr);kr.format=function(e){return null==e?"":`${parseFloat(100*e).toFixed(2)}%`};var Cr=Object.freeze({__proto__:null,default:kr});const xr=Object.assign({},xe);xr.isRight=!0,xr.filterPredicate=function(e,t){return 0===xr.compare(e,t)},xr.compare=function(e,t){function n(e){return"boolean"==typeof e?e?1:0:"string"==typeof e?"true"===e?1:0:-1/0}return(e=n(e))<(t=n(t))?-1:e>t?1:0};const Pr={},Tr={date:mr,decimal:br,number:vr,percentage:Cr,boolean:Object.freeze({__proto__:null,default:xr})};Object.keys(Tr).forEach((e=>{const t=e.replace(/^\.\//,"").replace(/\.js/,"");Pr[t]=Tr[e].default}));const Sr={name:"vue-good-table",props:{isLoading:{default:null,type:Boolean},maxHeight:{default:null,type:String},fixedHeader:Boolean,theme:{default:""},mode:{default:"local"},totalRows:{},styleClass:{default:"vgt-table bordered"},columns:{},rows:{},lineNumbers:Boolean,responsive:{default:!0,type:Boolean},rtl:Boolean,rowStyleClass:{default:null,type:[Function,String]},compactMode:Boolean,enableRowExpand:{default:!1,type:Boolean},expandRowsOptions:{default:()=>({enabled:!1})},groupOptions:{default:()=>({enabled:!1,collapsable:!1,rowKey:null})},selectOptions:{default:()=>({enabled:!1,selectionInfoClass:"",selectionText:"rows selected",clearSelectionText:"clear",disableSelectInfo:!1,selectAllByGroup:!1})},sortOptions:{default:()=>({enabled:!0,multipleColumns:!0,initialSortBy:{}})},paginationOptions:{default:()=>({enabled:!1,position:"bottom",perPage:10,perPageDropdown:null,perPageDropdownEnabled:!0,dropdownAllowAll:!0,mode:"records",infoFn:null})},searchOptions:{default:()=>({enabled:!1,trigger:null,externalQuery:null,searchFn:null,placeholder:"Search Table"})},expandedRowClasses:{default:"",type:String},expandedRowDetailClasses:{default:"",type:String}},data:()=>({tableLoading:!1,nextText:"Next",prevText:"Previous",rowsPerPageText:"Rows per page",ofText:"of",allText:"All",pageText:"page",selectable:!1,selectOnCheckboxOnly:!1,selectAllByPage:!0,disableSelectInfo:!1,selectionInfoClass:"",selectionText:"rows selected",clearSelectionText:"clear",maintainExpanded:!0,expandedRowKeys:new Set,sortable:!0,defaultSortBy:null,multipleColumnSort:!0,searchEnabled:!1,searchTrigger:null,externalSearchQuery:null,searchFn:null,searchPlaceholder:"Search Table",searchSkipDiacritics:!1,perPage:null,paginate:!1,paginateOnTop:!1,paginateOnBottom:!0,customRowsPerPageDropdown:[],paginateDropdownAllowAll:!0,paginationMode:"records",paginationInfoFn:null,currentPage:1,currentPerPage:10,sorts:[],globalSearchTerm:"",filteredRows:[],columnFilters:{},forceSearch:!1,sortChanged:!1,dataTypes:Pr||{},expandedRowIndex:null}),emits:["select-all","selected-rows-change","search","per-page-change","page-change","update:isLoading","sort-change","row-click","row-dblclick","row-aux-click","cell-click","row-mouseenter","row-mouseleave","column-filter"],watch:{rows:{handler(){this.$emit("update:isLoading",!1),this.filterRows(this.columnFilters,!1)},deep:!0,immediate:!0},selectOptions:{handler(){this.initializeSelect()},deep:!0,immediate:!0},paginationOptions:{handler(e,t){a(e,t)||this.initializePagination()},deep:!0,immediate:!0},expandRowsOptions:{handler(e,t){this.initializeExpandRows()},deep:!0,immediate:!0},searchOptions:{handler(){void 0!==this.searchOptions.externalQuery&&this.searchOptions.externalQuery!==this.searchTerm&&(this.externalSearchQuery=this.searchOptions.externalQuery,this.handleSearch()),this.initializeSearch()},deep:!0,immediate:!0},sortOptions:{handler(e,t){a(e,t)||this.initializeSort()},deep:!0},selectedRows(e,t){a(e,t)||this.$emit("selected-rows-change",{selectedRows:this.selectedRows})}},computed:{tableStyles(){return this.compactMode?this.tableStyleClasses+"vgt-compact":this.tableStyleClasses},hasFooterSlot(){return!!this.$slots["table-actions-bottom"]},wrapperStyles(){return{overflow:"scroll-y",maxHeight:this.maxHeight?this.maxHeight:"auto"}},rowKeyField(){return this.groupOptions.rowKey||"vgt_header_id"},hasHeaderRowTemplate(){return!!this.$slots["table-header-row"]},showEmptySlot(){return!this.paginated.length||"no groups"===this.paginated[0].label&&!this.paginated[0].children.length},allSelected(){return this.selectedRowCount>0&&(this.selectAllByPage&&this.selectedPageRowsCount===this.totalPageRowCount||!this.selectAllByPage&&this.selectedRowCount===this.totalRowCount)},allSelectedIndeterminate(){return!this.allSelected&&(this.selectAllByPage&&this.selectedPageRowsCount>0||!this.selectAllByPage&&this.selectedRowCount>0)},selectionInfo(){return`${this.selectedRowCount} ${this.selectionText}`},selectedRowCount(){return this.selectedRows.length},selectedPageRowsCount(){return this.selectedPageRows.length},selectedPageRows(){const e=[];return this.paginated.forEach((t=>{t.children.forEach((t=>{t.vgtSelected&&e.push(t)}))})),e},selectedRows(){const e=[];return this.processedRows.forEach((t=>{t.children.forEach((t=>{t.vgtSelected&&e.push(t)}))})),e.sort(((e,t)=>e.originalIndex-t.originalIndex))},fullColspan(){let e=0;for(let t=0;t<this.columns.length;t+=1)this.columns[t].hidden||(e+=1);return this.lineNumbers&&e++,this.selectable&&e++,this.expandRowsEnabled&&e++,e},groupHeaderOnTop(){return!(this.groupOptions&&this.groupOptions.enabled&&this.groupOptions.headerPosition&&"bottom"===this.groupOptions.headerPosition)&&!(!this.groupOptions||!this.groupOptions.enabled)},groupHeaderOnBottom(){return!!(this.groupOptions&&this.groupOptions.enabled&&this.groupOptions.headerPosition&&"bottom"===this.groupOptions.headerPosition)},totalRowCount(){return this.processedRows.reduce(((e,t)=>e+(t.children?t.children.length:0)),0)},totalPageRowCount(){return this.paginated.reduce(((e,t)=>e+(t.children?t.children.length:0)),0)},wrapStyleClasses(){let e="vgt-wrap";return this.rtl&&(e+=" rtl"),e+=` ${this.theme}`,e},tableStyleClasses(){let e=this.styleClass;return e+=` ${this.theme}`,e},searchTerm(){return null!=this.externalSearchQuery?this.externalSearchQuery:this.globalSearchTerm},globalSearchAllowed(){return!(!this.searchEnabled||!this.globalSearchTerm||"enter"===this.searchTrigger)||(null!=this.externalSearchQuery&&"enter"!==this.searchTrigger||!!this.forceSearch&&(this.forceSearch=!1,!0))},processedRows(){let e=this.filteredRows;if("remote"===this.mode)return e;if(this.globalSearchAllowed){const t=[];this.filteredRows.forEach((e=>{t.push(...e.children)}));const n=[];t.forEach((e=>{for(let t=0;t<this.columns.length;t+=1){const r=this.columns[t];if(!r.globalSearchDisabled)if(this.searchFn){if(this.searchFn(e,r,this.collectFormatted(e,r),this.searchTerm)){n.push(e);break}}else{if(xe.filterPredicate(this.collectFormatted(e,r),this.searchTerm,this.searchSkipDiacritics)){n.push(e);break}}}})),this.$emit("search",{searchTerm:this.searchTerm,rowCount:n.length}),e=[],this.filteredRows.forEach((t=>{const r=t.vgt_header_id,a=n.filter((e=>e.vgt_id===r));if(a.length){const n=JSON.parse(JSON.stringify(t));n.children=a,e.push(n)}}))}return this.sorts.length&&e.forEach((e=>{e.children.sort(((e,t)=>{let n;for(let r=0;r<this.sorts.length;r+=1){const a=this.sorts[r];if(a.type===L)n=n||e.originalIndex-t.originalIndex;else{const r=this.getColumnForField(a.field),o=this.collect(e,a.field),i=this.collect(t,a.field),{sortFn:l}=r;n=l&&"function"==typeof l?n||l(o,i,r,e,t)*(a.type===j?-1:1):n||r.typeDef.compare(o,i,r)*(a.type===j?-1:1)}}return n}))})),"enter"===this.searchTrigger&&(this.filteredRows=e),e},paginated(){if(!this.processedRows.length)return[];if("remote"===this.mode)return this.processedRows;let e=[];if(this.processedRows.forEach((t=>{this.groupOptions.enabled&&e.push(t),e.push(...t.children)})),this.paginate){let t=(this.currentPage-1)*this.currentPerPage;(t>=e.length||-1===this.currentPerPage)&&(this.currentPage=1,t=0);let n=e.length+1;-1!==this.currentPerPage&&(n=this.currentPage*this.currentPerPage),e=e.slice(t,n)}const t=[];return e.forEach((e=>{if(void 0!==e.vgt_header_id){this.handleExpanded(e);const n=JSON.parse(JSON.stringify(e));n.children=[],t.push(n)}else{let n=t.find((t=>t.vgt_header_id===e.vgt_id));n||(n=this.processedRows.find((t=>t.vgt_header_id===e.vgt_id)),n&&(n=JSON.parse(JSON.stringify(n)),n.children=[],t.push(n))),n.children.push(e)}})),t},originalRows(){const e=JSON.parse(JSON.stringify(this.rows));let t=[];t=this.handleGrouped(this.groupOptions.enabled?e:[{label:"no groups",children:e}]);let n=0;return t.forEach((e=>{e.children.forEach((e=>{e.originalIndex=n++}))})),t},typedColumns(){const e=this.columns;for(let t=0;t<this.columns.length;t++){const n=e[t];n.typeDef=this.dataTypes[n.type]||xe}return e},hasRowClickListener(){return this.$attrs&&this.$attrs["row-click"]}},methods:{handleExpanded(e){e.vgtIsExpanded=!(!this.maintainExpanded||!this.expandedRowKeys.has(e[this.rowKeyField]))},toggleExpand(e){const t=this.filteredRows.find((t=>t[this.rowKeyField]===e));t&&(t.vgtIsExpanded=!t.vgtIsExpanded),this.maintainExpanded&&t.vgtIsExpanded?this.expandedRowKeys.add(t[this.rowKeyField]):this.expandedRowKeys.delete(t[this.rowKeyField])},expandAll(){this.filteredRows.forEach((e=>{e.vgtIsExpanded=!0,this.maintainExpanded&&this.expandedRowKeys.add(e[this.rowKeyField])}))},collapseAll(){this.filteredRows.forEach((e=>{e.vgtIsExpanded=!1,this.expandedRowKeys.clear()}))},getColumnForField(e){for(let t=0;t<this.typedColumns.length;t+=1)if(this.typedColumns[t].field===e)return this.typedColumns[t]},handleSearch(){this.resetTable(),"remote"===this.mode&&this.$emit("search",{searchTerm:this.searchTerm})},reset(){this.initializeSort(),this.changePage(1),this.$refs["table-header-primary"].reset(!0),this.$refs["table-header-secondary"]&&this.$refs["table-header-secondary"].reset(!0)},emitSelectedRows(){this.$emit("select-all",{selected:this.selectedRowCount===this.totalRowCount,selectedRows:this.selectedRows})},unselectAllInternal(e){(this.selectAllByPage&&!e?this.paginated:this.filteredRows).forEach(((e,t)=>{e.children.forEach(((e,t)=>{e.vgtSelected=!1}))})),this.emitSelectedRows()},toggleSelectAll(){if(this.allSelected)return void this.unselectAllInternal();(this.selectAllByPage?this.paginated:this.filteredRows).forEach((e=>{e.children.forEach((e=>{e.vgtSelected=!0}))})),this.emitSelectedRows()},toggleExpandRowsAll(){for(let e of this.rows)e.expanded=!!e.expandedRow&&!e.expanded;this.$emit("toggle-expand-rows-all",{})},toggleSelectGroup(e,t){t.children.forEach((t=>{t.vgtSelected=e}))},changePage(e){const t=this.paginate;let{paginationBottom:n,paginationTop:r}=this.$refs;t&&(this.paginateOnTop&&r&&(r.currentPage=e),this.paginateOnBottom&&n&&(n.currentPage=e),this.currentPage=e)},pageChangedEvent(){return{currentPage:this.currentPage,currentPerPage:this.currentPerPage,total:Math.floor(this.totalRowCount/this.currentPerPage)}},pageChanged(e){if(this.currentPage=e.currentPage,!e.noEmit){const t=this.pageChangedEvent();t.prevPage=e.prevPage,this.$emit("page-change",t),"remote"===this.mode&&this.$emit("update:isLoading",!0)}},perPageChanged(e){this.currentPerPage=e.currentPerPage;let t=this.paginationOptions.position;!this.$refs.paginationTop||"top"!==t&&"both"!==t||(this.$refs.paginationTop.currentPerPage=this.currentPerPage),!this.$refs.paginationBottom||"bottom"!==t&&"both"!==t||(this.$refs.paginationBottom.currentPerPage=this.currentPerPage);const n=this.pageChangedEvent();this.$emit("per-page-change",n),"remote"===this.mode&&this.$emit("update:isLoading",!0)},changeSort(e){this.sorts=e,this.$emit("sort-change",e),this.changePage(1),"remote"!==this.mode?this.sortChanged=!0:this.$emit("update:isLoading",!0)},toggleRowExpand(e,t){this.expandedRowIndex=this.expandedRowIndex===t?null:t},onCheckboxClicked(e,t,n){this.enableRowExpand&&this.toggleRowExpand(e,t),e.vgtSelected=!e.vgtSelected,this.$emit("row-click",{row:e,pageIndex:t,selected:!!e.vgtSelected,event:n})},toggleExpandRow(e){e.expanded=!e.expanded},onRowDoubleClicked(e,t,n){this.$emit("row-dblclick",{row:e,pageIndex:t,selected:!!e.vgtSelected,event:n})},onRowClicked(e,t,n){this.enableRowExpand&&this.toggleRowExpand(e,t),this.selectable&&!this.selectOnCheckboxOnly&&(e.vgtSelected=!e.vgtSelected),this.$emit("row-click",{row:e,pageIndex:t,selected:!!e.vgtSelected,event:n})},onRowAuxClicked(e,t,n){this.$emit("row-aux-click",{row:e,pageIndex:t,selected:!!e.vgtSelected,event:n})},onCellClicked(e,t,n,r){this.$emit("cell-click",{row:e,column:t,rowIndex:n,event:r})},onMouseenter(e,t){this.$emit("row-mouseenter",{row:e,pageIndex:t})},onMouseleave(e,t){this.$emit("row-mouseleave",{row:e,pageIndex:t})},searchTableOnEnter(){"enter"===this.searchTrigger&&(this.handleSearch(),this.filteredRows=JSON.parse(JSON.stringify(this.originalRows)),this.forceSearch=!0,this.sortChanged=!0)},searchTableOnKeyUp(){"enter"!==this.searchTrigger&&this.handleSearch()},resetTable(){this.unselectAllInternal(!0),this.changePage(1)},collect:(e,t)=>"function"==typeof t?t(e):"string"==typeof t?function(e,t){let n=e;const r=t.split(".");for(let e=0;e<r.length;e++){if(null==n)return;n=n[r[e]]}return n}(e,t):void 0,collectFormatted(e,t,n=!1){let r;if(r=this.collect(e,n&&t.headerField?t.headerField:t.field),void 0===r)return"";if(t.formatFn&&"function"==typeof t.formatFn)return t.formatFn(r,e);let a=t.typeDef;a||(a=this.dataTypes[t.type]||xe);let o=a.format(r,t);return!this.compactMode||""!=o&&null!=o?o:"-"},formattedRow(e,t=!1){const n={};for(let r=0;r<this.typedColumns.length;r++){const a=this.typedColumns[r];a.field&&(n[a.field]=this.collectFormatted(e,a,t))}return n},getClasses(e,t,n){const{typeDef:r,[`${t}Class`]:a}=this.typedColumns[e];let{isRight:o}=r;this.rtl&&(o=!0);const i={"vgt-right-align":o,"vgt-left-align":!o};return"function"==typeof a?i[a(n)]=!0:"string"==typeof a&&(i[a]=!0),i},filterRows(e,t=!0){this.columnFilters=e;let n=JSON.parse(JSON.stringify(this.originalRows)),r=!1;if(this.columnFilters&&Object.keys(this.columnFilters).length){if(("remote"!==this.mode||t)&&this.changePage(1),t&&this.$emit("column-filter",{columnFilters:this.columnFilters}),"remote"===this.mode)return void(t?this.$emit("update:isLoading",!0):this.filteredRows=n);const e=e=>"function"==typeof e&&e.name?e.name:e;for(let t=0;t<this.typedColumns.length;t++){const a=this.typedColumns[t];this.columnFilters[e(a.field)]&&(r=!0,n.forEach((t=>{const n=t.children.filter((t=>{if(a.filterOptions&&"function"==typeof a.filterOptions.filterFn)return a.filterOptions.filterFn(this.collect(t,a.field),this.columnFilters[e(a.field)]);const{typeDef:n}=a;return n.filterPredicate(this.collect(t,a.field),this.columnFilters[e(a.field)],!1,a.filterOptions&&"object"==typeof a.filterOptions.filterDropdownItems)}));t.children=n})))}}this.filteredRows=r?n.filter((e=>e.children&&e.children.length)):n},getCurrentIndex(e){let t=0,n=!1;for(let r=0;r<this.paginated.length;r+=1){const a=this.paginated[r],{children:o}=a;if(o&&o.length)for(let r=0;r<o.length;r+=1){if(o[r].originalIndex===e){n=!0;break}t+=1}if(n)break}return(this.currentPage-1)*this.currentPerPage+t+1},getRowStyleClass(e){let t,n="";return this.hasRowClickListener&&(n+="clickable"),t="function"==typeof this.rowStyleClass?this.rowStyleClass(e):this.rowStyleClass,t&&(n+=` ${t}`),this.expandedRowIndex===e.originalIndex&&(n+=` ${this.expandedRowClasses}`),n},handleGrouped(e){return e.forEach(((e,t)=>{e.vgt_header_id=t,this.groupOptions.maintainExpanded&&this.expandedRowKeys.has(e[this.groupOptions.rowKey])&&(e.vgtIsExpanded=!0),e.children.forEach((e=>{e.vgt_id=t}))})),e},initializePagination(){const{enabled:e,perPage:t,position:n,perPageDropdown:r,perPageDropdownEnabled:a,dropdownAllowAll:o,nextLabel:i,prevLabel:l,rowsPerPageLabel:s,ofLabel:c,pageLabel:u,allLabel:d,setCurrentPage:h,mode:f,infoFn:p}=this.paginationOptions;"boolean"==typeof e&&(this.paginate=e),"number"==typeof t&&(this.perPage=t),"top"===n?(this.paginateOnTop=!0,this.paginateOnBottom=!1):"both"===n&&(this.paginateOnTop=!0,this.paginateOnBottom=!0),Array.isArray(r)&&r.length&&(this.customRowsPerPageDropdown=r,this.perPage||([this.perPage]=r)),"boolean"==typeof a&&(this.perPageDropdownEnabled=a),"boolean"==typeof o&&(this.paginateDropdownAllowAll=o),"string"==typeof f&&(this.paginationMode=f),"string"==typeof i&&(this.nextText=i),"string"==typeof l&&(this.prevText=l),"string"==typeof s&&(this.rowsPerPageText=s),"string"==typeof c&&(this.ofText=c),"string"==typeof u&&(this.pageText=u),"string"==typeof d&&(this.allText=d),"number"==typeof h&&setTimeout((()=>{this.changePage(h)}),500),"function"==typeof p&&(this.paginationInfoFn=p)},initializeExpandRows(){const{enabled:e}=this.expandRowsOptions;"boolean"==typeof e&&(this.expandRowsEnabled=e)},initializeSearch(){const{enabled:e,trigger:t,externalQuery:n,searchFn:r,placeholder:a,skipDiacritics:o}=this.searchOptions;"boolean"==typeof e&&(this.searchEnabled=e),"enter"===t&&(this.searchTrigger=t),"string"==typeof n&&(this.externalSearchQuery=n),"function"==typeof r&&(this.searchFn=r),"string"==typeof a&&(this.searchPlaceholder=a),"boolean"==typeof o&&(this.searchSkipDiacritics=o)},initializeSort(){const{enabled:e,initialSortBy:t,multipleColumns:n}=this.sortOptions,r=JSON.parse(JSON.stringify(t||{}));if("boolean"==typeof e&&(this.sortable=e),"boolean"==typeof n&&(this.multipleColumnSort=n),"object"==typeof r){const e=this.fixedHeader?this.$refs["table-header-secondary"]:this.$refs["table-header-primary"];if(Array.isArray(r))e.setInitialSort(r);else{Object.prototype.hasOwnProperty.call(r,"field")&&e.setInitialSort([r])}}},initializeSelect(){const{enabled:e,selectionInfoClass:t,selectionText:n,clearSelectionText:r,selectOnCheckboxOnly:a,selectAllByPage:o,disableSelectInfo:i,selectAllByGroup:l}=this.selectOptions;"boolean"==typeof e&&(this.selectable=e),"boolean"==typeof a&&(this.selectOnCheckboxOnly=a),"boolean"==typeof o&&(this.selectAllByPage=o),"boolean"==typeof l&&(this.selectAllByGroup=l),"boolean"==typeof i&&(this.disableSelectInfo=i),"string"==typeof t&&(this.selectionInfoClass=t),"string"==typeof n&&(this.selectionText=n),"string"==typeof r&&(this.clearSelectionText=r)}},mounted(){this.perPage&&(this.currentPerPage=this.perPage),this.initializeSort()},components:{"vgt-pagination":we,"vgt-global-search":f,"vgt-header-row":T,"vgt-table-header":te}},Er={key:0,class:"vgt-loading vgt-center-align"},Rr=t.createElementVNode("span",{class:"vgt-loading__content"}," Loading... ",-1),Or={class:"vgt-selection-info-row__actions vgt-pull-right"},Br={class:"vgt-fixed-header"},Dr=["id"],Nr=["id"],_r=["onMouseenter","onMouseleave","onDblclick","onClick","onAuxclick"],Fr={key:0,class:"line-numbers"},Mr=["onClick"],Ar=["disabled","checked"],Ir=["onClick","data-label"],Vr={key:0},Ur=["innerHTML"],$r=["colspan"],jr=["colspan"],Lr={key:0},zr=["colspan"],Hr=t.createElementVNode("div",{class:"vgt-center-align vgt-text-disabled"}," No data for table ",-1),Yr={key:2,class:"vgt-wrap__actions-footer"};var qr=o(Sr,[["render",function(e,n,r,a,o,i){const l=t.resolveComponent("vgt-pagination"),s=t.resolveComponent("vgt-global-search"),c=t.resolveComponent("vgt-table-header"),u=t.resolveComponent("vgt-header-row");return t.openBlock(),t.createElementBlock("div",{class:t.normalizeClass(i.wrapStyleClasses)},[r.isLoading?(t.openBlock(),t.createElementBlock("div",Er,[t.renderSlot(e.$slots,"loadingContent",{},(()=>[Rr]))])):t.createCommentVNode("v-if",!0),t.createElementVNode("div",{class:t.normalizeClass(["vgt-inner-wrap",{"is-loading":r.isLoading}])},[e.paginate&&e.paginateOnTop?t.renderSlot(e.$slots,"pagination-top",{key:0,pageChanged:i.pageChanged,perPageChanged:i.perPageChanged,total:r.totalRows||i.totalRowCount},(()=>[t.createVNode(l,{ref:"paginationTop",onPageChanged:i.pageChanged,onPerPageChanged:i.perPageChanged,perPage:e.perPage,rtl:r.rtl,total:r.totalRows||i.totalRowCount,mode:e.paginationMode,nextText:e.nextText,prevText:e.prevText,rowsPerPageText:e.rowsPerPageText,perPageDropdownEnabled:r.paginationOptions.perPageDropdownEnabled,customRowsPerPageDropdown:e.customRowsPerPageDropdown,paginateDropdownAllowAll:e.paginateDropdownAllowAll,ofText:e.ofText,pageText:e.pageText,allText:e.allText,"info-fn":e.paginationInfoFn},null,8,["onPageChanged","onPerPageChanged","perPage","rtl","total","mode","nextText","prevText","rowsPerPageText","perPageDropdownEnabled","customRowsPerPageDropdown","paginateDropdownAllowAll","ofText","pageText","allText","info-fn"])])):t.createCommentVNode("v-if",!0),t.createVNode(s,{onKeyup:i.searchTableOnKeyUp,onEnter:i.searchTableOnEnter,value:e.globalSearchTerm,onInput:n[0]||(n[0]=t=>e.globalSearchTerm=t),"search-enabled":e.searchEnabled&&null==e.externalSearchQuery,"global-search-placeholder":e.searchPlaceholder},t.createSlots({_:2},[e.$slots["table-actions"]?{name:"internal-table-actions",fn:t.withCtx((()=>[t.renderSlot(e.$slots,"table-actions")])),key:"0"}:void 0]),1032,["onKeyup","onEnter","value","search-enabled","global-search-placeholder"]),e.disableSelectInfo?t.createCommentVNode("v-if",!0):(t.openBlock(),t.createElementBlock("div",{key:1,class:t.normalizeClass(["vgt-selection-info-row clearfix",e.selectionInfoClass])},[t.createTextVNode(t.toDisplayString(i.selectionInfo)+" ",1),e.clearSelectionText?(t.openBlock(),t.createElementBlock("a",{key:0,href:"",onClick:n[1]||(n[1]=t.withModifiers((e=>i.unselectAllInternal(!0)),["prevent"]))},t.toDisplayString(e.clearSelectionText),1)):t.createCommentVNode("v-if",!0),t.createElementVNode("div",Or,[t.renderSlot(e.$slots,"selected-row-actions")])],2)),t.createElementVNode("div",Br,[r.fixedHeader?(t.openBlock(),t.createElementBlock("table",{key:0,id:"vgt-table",class:t.normalizeClass(i.tableStyleClasses)},[t.createElementVNode("colgroup",null,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((e,n)=>(t.openBlock(),t.createElementBlock("col",{key:n,id:`col-${n}`},null,8,Dr)))),128))]),t.createCommentVNode(" Table header "),t.createVNode(c,{ref:"table-header-secondary",onToggleSelectAll:i.toggleSelectAll,onToggleExpandRowsAll:i.toggleExpandRowsAll,onSortChange:i.changeSort,onFilterChanged:i.filterRows,columns:r.columns,"line-numbers":r.lineNumbers,selectable:e.selectable,"all-selected":i.allSelected,"all-selected-indeterminate":i.allSelectedIndeterminate,mode:r.mode,sortable:e.sortable,"multiple-column-sort":e.multipleColumnSort,"typed-columns":i.typedColumns,getClasses:i.getClasses,searchEnabled:e.searchEnabled,paginated:i.paginated,"table-ref":e.$refs.table},{"table-column":t.withCtx((n=>[t.renderSlot(e.$slots,"table-column",{column:n.column},(()=>[t.createElementVNode("span",null,t.toDisplayString(n.column.label),1)]))])),"column-filter":t.withCtx((n=>[t.renderSlot(e.$slots,"column-filter",{column:n.column,updateFilters:n.updateFilters})])),_:3},8,["onToggleSelectAll","onToggleExpandRowsAll","onSortChange","onFilterChanged","columns","line-numbers","selectable","all-selected","all-selected-indeterminate","mode","sortable","multiple-column-sort","typed-columns","getClasses","searchEnabled","paginated","table-ref"])],2)):t.createCommentVNode("v-if",!0)]),t.createElementVNode("div",{class:t.normalizeClass({"vgt-responsive":r.responsive}),style:t.normalizeStyle(i.wrapperStyles)},[t.createElementVNode("table",{id:"vgt-table",ref:"table",class:t.normalizeClass(i.tableStyles)},[t.createElementVNode("colgroup",null,[(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((e,n)=>(t.openBlock(),t.createElementBlock("col",{key:n,id:`col-${n}`},null,8,Nr)))),128))]),t.createCommentVNode(" Table header "),t.createVNode(c,{ref:"table-header-primary",onToggleSelectAll:i.toggleSelectAll,onToggleExpandRowsAll:i.toggleExpandRowsAll,onSortChange:i.changeSort,onFilterChanged:i.filterRows,columns:r.columns,"line-numbers":r.lineNumbers,selectable:e.selectable,"all-selected":i.allSelected,"all-selected-indeterminate":i.allSelectedIndeterminate,mode:r.mode,sortable:e.sortable,"multiple-column-sort":e.multipleColumnSort,"typed-columns":i.typedColumns,getClasses:i.getClasses,searchEnabled:e.searchEnabled},{"table-column":t.withCtx((n=>[t.renderSlot(e.$slots,"table-column",{column:n.column},(()=>[t.createElementVNode("span",null,t.toDisplayString(n.column.label),1)]))])),"column-filter":t.withCtx((n=>[t.renderSlot(e.$slots,"column-filter",{column:n.column,updateFilters:n.updateFilters})])),_:3},8,["onToggleSelectAll","onToggleExpandRowsAll","onSortChange","onFilterChanged","columns","line-numbers","selectable","all-selected","all-selected-indeterminate","mode","sortable","multiple-column-sort","typed-columns","getClasses","searchEnabled"]),t.createCommentVNode(" Table body starts here "),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(i.paginated,((n,a)=>(t.openBlock(),t.createElementBlock("tbody",{key:a},[t.createCommentVNode(" if group row header is at the top "),i.groupHeaderOnTop?(t.openBlock(),t.createBlock(u,{key:0,onVgtExpand:e=>i.toggleExpand(n[i.rowKeyField]),"header-row":n,columns:r.columns,"line-numbers":r.lineNumbers,selectable:e.selectable,"select-all-by-group":e.selectAllByGroup,collapsable:r.groupOptions.collapsable,"collect-formatted":i.collectFormatted,"formatted-row":i.formattedRow,class:t.normalizeClass(i.getRowStyleClass(n)),"get-classes":i.getClasses,"full-colspan":i.fullColspan,groupIndex:a,onSelectGroupChange:e=>i.toggleSelectGroup(e,n)},t.createSlots({_:2},[i.hasHeaderRowTemplate?{name:"table-header-row",fn:t.withCtx((n=>[t.renderSlot(e.$slots,"table-header-row",{column:n.column,formattedRow:n.formattedRow,row:n.row})])),key:"0"}:void 0]),1032,["onVgtExpand","header-row","columns","line-numbers","selectable","select-all-by-group","collapsable","collect-formatted","formatted-row","class","get-classes","full-colspan","groupIndex","onSelectGroupChange"])):t.createCommentVNode("v-if",!0),t.createCommentVNode(" normal rows here. we loop over all rows "),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(n.children,((a,o)=>(t.openBlock(),t.createElementBlock(t.Fragment,null,[!r.groupOptions.collapsable||n.vgtIsExpanded?(t.openBlock(),t.createElementBlock("tr",{key:a.originalIndex,class:t.normalizeClass(i.getRowStyleClass(a)),onMouseenter:e=>i.onMouseenter(a,o),onMouseleave:e=>i.onMouseleave(a,o),onDblclick:e=>i.onRowDoubleClicked(a,o,e),onClick:e=>i.onRowClicked(a,o,e),onAuxclick:e=>i.onRowAuxClicked(a,o,e)},[r.lineNumbers?(t.openBlock(),t.createElementBlock("th",Fr,t.toDisplayString(i.getCurrentIndex(a.originalIndex)),1)):t.createCommentVNode("v-if",!0),e.selectable?(t.openBlock(),t.createElementBlock("th",{key:1,onClick:t.withModifiers((e=>i.onCheckboxClicked(a,o,e)),["stop"]),class:"vgt-checkbox-col"},[t.createElementVNode("input",{type:"checkbox",disabled:a.vgtDisabled,checked:a.vgtSelected},null,8,Ar)],8,Mr)):t.createCommentVNode("v-if",!0),(t.openBlock(!0),t.createElementBlock(t.Fragment,null,t.renderList(r.columns,((n,l)=>(t.openBlock(),t.createElementBlock(t.Fragment,null,[!n.hidden&&n.field?(t.openBlock(),t.createElementBlock("td",{key:l,onClick:e=>i.onCellClicked(a,n,o,e),class:t.normalizeClass(i.getClasses(l,"td",a)),"data-label":r.compactMode?n.label:void 0},[t.renderSlot(e.$slots,"table-row",{row:a,column:n,formattedRow:i.formattedRow(a),index:o,expandedRow:e.expandedRowIndex===o},(()=>[n.html?(t.openBlock(),t.createElementBlock("span",{key:1,innerHTML:i.collect(a,n.field)},null,8,Ur)):(t.openBlock(),t.createElementBlock("span",Vr,t.toDisplayString(i.collectFormatted(a,n)),1))]))],10,Ir)):t.createCommentVNode("v-if",!0)],64)))),256))],42,_r)):t.createCommentVNode("v-if",!0),e.expandedRowIndex===o?(t.openBlock(),t.createElementBlock("tr",{class:t.normalizeClass(r.expandedRowDetailClasses),key:a.originalIndex},[t.createElementVNode("td",{colspan:i.fullColspan},[t.renderSlot(e.$slots,"row-details",{row:a,formattedRow:i.formattedRow(a),index:o})],8,$r)],2)):t.createCommentVNode("v-if",!0),a.expanded?(t.openBlock(),t.createElementBlock("tr",{key:a.originalIndex},[t.createElementVNode("td",{colspan:i.fullColspan},t.toDisplayString(a.expandedRow),9,jr)])):t.createCommentVNode("v-if",!0)],64)))),256)),t.createCommentVNode(" if group row header is at the bottom "),i.groupHeaderOnBottom?(t.openBlock(),t.createBlock(u,{key:1,"header-row":n,columns:r.columns,"line-numbers":r.lineNumbers,selectable:e.selectable,"select-all-by-group":e.selectAllByGroup,"collect-formatted":i.collectFormatted,"formatted-row":i.formattedRow,"get-classes":i.getClasses,"full-colspan":i.fullColspan,groupIndex:e.index,onSelectGroupChange:e=>i.toggleSelectGroup(e,n)},t.createSlots({_:2},[i.hasHeaderRowTemplate?{name:"table-header-row",fn:t.withCtx((n=>[t.renderSlot(e.$slots,"table-header-row",{column:n.column,formattedRow:n.formattedRow,row:n.row})])),key:"0"}:void 0]),1032,["header-row","columns","line-numbers","selectable","select-all-by-group","collect-formatted","formatted-row","get-classes","full-colspan","groupIndex","onSelectGroupChange"])):t.createCommentVNode("v-if",!0)])))),128)),i.showEmptySlot?(t.openBlock(),t.createElementBlock("tbody",Lr,[t.createElementVNode("tr",null,[t.createElementVNode("td",{colspan:i.fullColspan},[t.renderSlot(e.$slots,"emptystate",{},(()=>[Hr]))],8,zr)])])):t.createCommentVNode("v-if",!0)],2)],6),i.hasFooterSlot?(t.openBlock(),t.createElementBlock("div",Yr,[t.renderSlot(e.$slots,"table-actions-bottom")])):t.createCommentVNode("v-if",!0),e.paginate&&e.paginateOnBottom?t.renderSlot(e.$slots,"pagination-bottom",{key:3,pageChanged:i.pageChanged,perPageChanged:i.perPageChanged,total:r.totalRows||i.totalRowCount},(()=>[t.createVNode(l,{ref:"paginationBottom",onPageChanged:i.pageChanged,onPerPageChanged:i.perPageChanged,perPage:e.perPage,rtl:r.rtl,total:r.totalRows||i.totalRowCount,mode:e.paginationMode,nextText:e.nextText,prevText:e.prevText,rowsPerPageText:e.rowsPerPageText,perPageDropdownEnabled:r.paginationOptions.perPageDropdownEnabled,customRowsPerPageDropdown:e.customRowsPerPageDropdown,paginateDropdownAllowAll:e.paginateDropdownAllowAll,ofText:e.ofText,pageText:e.pageText,allText:e.allText,"info-fn":e.paginationInfoFn},null,8,["onPageChanged","onPerPageChanged","perPage","rtl","total","mode","nextText","prevText","rowsPerPageText","perPageDropdownEnabled","customRowsPerPageDropdown","paginateDropdownAllowAll","ofText","pageText","allText","info-fn"])])):t.createCommentVNode("v-if",!0)],2)],2)}]]),Wr={install:(e,t)=>{e.component("VueGoodTable",qr)}};return e.VueGoodTable=qr,e.default=Wr,Object.defineProperty(e,"__esModule",{value:!0}),e}({},vue);
diff --git a/node_modules/vue-good-table-next/dist/vue-good-table.cjs.js b/node_modules/vue-good-table-next/dist/vue-good-table.cjs.js
index cf2613b..447ba83 100644
--- a/node_modules/vue-good-table-next/dist/vue-good-table.cjs.js
+++ b/node_modules/vue-good-table-next/dist/vue-good-table.cjs.js
@@ -1,5 +1,5 @@
 /*!
-  * vue-good-table-next v0.2.0
+  * vue-good-table-next v0.2.1
   * (c) 2021-present Boris Flesch <boris@singlequote.net>
   * (c) 2017-2021 xaksis <shay@crayonbits.com>
   * @license MIT
@@ -10,19 +10,6 @@ Object.defineProperty(exports, '__esModule', { value: true });
 
 var vue = require('vue');
 
-const DEFAULT_SORT_TYPE = 'asc';
-const SORT_TYPES = {
-  Ascending: 'asc',
-  Descending: 'desc',
-  None: 'none',
-};
-
-const PAGINATION_MODES = {
-  Pages: 'pages',
-  Records: 'records',
-};
-const DEFAULT_ROWS_PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];
-
 var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
 
 var lodash_isequal = {exports: {}};
@@ -1880,2575 +1867,2087 @@ module.exports = isEqual;
 
 var isEqual = lodash_isequal.exports;
 
-// all diacritics
-let diacritics = {
-  a: [
-    "a",
-    "à",
-    "á",
-    "â",
-    "ã",
-    "ä",
-    "å",
-    "æ",
-    "ā",
-    "ă",
-    "ą",
-    "ǎ",
-    "ǟ",
-    "ǡ",
-    "ǻ",
-    "ȁ",
-    "ȃ",
-    "ȧ",
-    "ɐ",
-    "ɑ",
-    "ɒ",
-    "ͣ",
-    "а",
-    "ӑ",
-    "ӓ",
-    "ᵃ",
-    "ᵄ",
-    "ᶏ",
-    "ḁ",
-    "ẚ",
-    "ạ",
-    "ả",
-    "ấ",
-    "ầ",
-    "ẩ",
-    "ẫ",
-    "ậ",
-    "ắ",
-    "ằ",
-    "ẳ",
-    "ẵ",
-    "ặ",
-    "ₐ",
-    "ⱥ",
-    "ａ",
+var _export_sfc = (sfc, props) => {
+  const target = sfc.__vccOpts || sfc;
+  for (const [key, val] of props) {
+    target[key] = val;
+  }
+  return target;
+};
+
+const _sfc_main$6 = {
+  name: 'VgtGlobalSearch',
+  props: [
+    'value',
+    'searchEnabled',
+    'globalSearchPlaceholder',
   ],
-  b: ["b", "ƀ", "ƃ", "ɓ", "ᖯ", "ᵇ", "ᵬ", "ᶀ", "ḃ", "ḅ", "ḇ", "ｂ"],
-  c: ["c", "ç", "ć", "ĉ", "ċ", "č", "ƈ", "ȼ", "ɕ", "ͨ", "ᴄ", "ᶜ", "ḉ", "ↄ", "ｃ"],
-  d: [
-    "d",
-    "ď",
-    "đ",
-    "Ƌ",
-    "ƌ",
-    "ȡ",
-    "ɖ",
-    "ɗ",
-    "ͩ",
-    "ᵈ",
-    "ᵭ",
-    "ᶁ",
-    "ᶑ",
-    "ḋ",
-    "ḍ",
-    "ḏ",
-    "ḑ",
-    "ḓ",
-    "ｄ",
+  emits: [
+    'input',
+    'keyup',
+    'enter',
   ],
-  e: [
-    "e",
-    "è",
-    "é",
-    "ê",
-    "ë",
-    "ē",
-    "ĕ",
-    "ė",
-    "ę",
-    "ě",
-    "ǝ",
-    "ȅ",
-    "ȇ",
-    "ȩ",
-    "ɇ",
-    "ɘ",
-    "ͤ",
-    "ᵉ",
-    "ᶒ",
-    "ḕ",
-    "ḗ",
-    "ḙ",
-    "ḛ",
-    "ḝ",
-    "ẹ",
-    "ẻ",
-    "ẽ",
-    "ế",
-    "ề",
-    "ể",
-    "ễ",
-    "ệ",
-    "ₑ",
-    "ｅ",
+  data() {
+    return {
+      globalSearchTerm: null,
+      id: this.getId(),
+    };
+  },
+  computed: {
+    showControlBar() {
+      if (this.searchEnabled) return true;
+      if (this.$slots && this.$slots['internal-table-actions']) return true;
+      return false;
+    },
+  },
+  methods: {
+    updateValue(value) {
+      this.$emit('input', value);
+      this.$emit('keyup', value);
+    },
+    entered(value) {
+      this.$emit('enter', value);
+    },
+    getId() {
+      return `vgt-search-${Math.floor(Math.random() * Date.now())}`;
+    },
+  },
+};
+
+const _hoisted_1$6 = {
+  key: 0,
+  class: "vgt-global-search vgt-clearfix"
+};
+const _hoisted_2$6 = { class: "vgt-global-search__input vgt-pull-left" };
+const _hoisted_3$6 = ["for"];
+const _hoisted_4$6 = /*#__PURE__*/vue.createElementVNode("span", {
+  "aria-hidden": "true",
+  class: "input__icon"
+}, [
+  /*#__PURE__*/vue.createElementVNode("div", { class: "magnifying-glass" })
+], -1 /* HOISTED */);
+const _hoisted_5$6 = /*#__PURE__*/vue.createElementVNode("span", { class: "sr-only" }, "Search", -1 /* HOISTED */);
+const _hoisted_6$6 = [
+  _hoisted_4$6,
+  _hoisted_5$6
+];
+const _hoisted_7$5 = ["id", "placeholder", "value"];
+const _hoisted_8$3 = { class: "vgt-global-search__actions vgt-pull-right" };
+
+function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
+  return ($options.showControlBar)
+    ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$6, [
+        vue.createElementVNode("div", _hoisted_2$6, [
+          ($props.searchEnabled)
+            ? (vue.openBlock(), vue.createElementBlock("form", {
+                key: 0,
+                onSubmit: _cache[2] || (_cache[2] = vue.withModifiers(() => {}, ["prevent"])),
+                role: "search"
+              }, [
+                vue.createElementVNode("label", { for: $data.id }, [..._hoisted_6$6], 8 /* PROPS */, _hoisted_3$6),
+                vue.createElementVNode("input", {
+                  id: $data.id,
+                  type: "text",
+                  class: "vgt-input vgt-pull-left",
+                  placeholder: $props.globalSearchPlaceholder,
+                  value: $props.value,
+                  onInput: _cache[0] || (_cache[0] = $event => ($options.updateValue($event.target.value))),
+                  onKeyup: _cache[1] || (_cache[1] = vue.withKeys($event => ($options.entered($event.target.value)), ["enter"]))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$5)
+              ], 32 /* NEED_HYDRATION */))
+            : vue.createCommentVNode("v-if", true)
+        ]),
+        vue.createElementVNode("div", _hoisted_8$3, [
+          vue.renderSlot(_ctx.$slots, "internal-table-actions")
+        ])
+      ]))
+    : vue.createCommentVNode("v-if", true)
+}
+var VgtGlobalSearch = /*#__PURE__*/_export_sfc(_sfc_main$6, [['render',_sfc_render$6]]);
+
+const _sfc_main$5 = {
+  name: 'VgtHeaderRow',
+  props: {
+    headerRow: {
+      type: Object,
+    },
+    columns: {
+      type: Array,
+    },
+    lineNumbers: {
+      type: Boolean,
+    },
+    selectable: {
+      type: Boolean,
+    },
+    selectAllByGroup: {
+      type: Boolean
+    },
+    collapsable: {
+      type: [Boolean, Number],
+      default: false,
+    },
+    collectFormatted: {
+      type: Function,
+    },
+    formattedRow: {
+      type: Function,
+    },
+    getClasses: {
+      type: Function,
+    },
+    fullColspan: {
+      type: Number,
+    },
+    groupIndex: {
+      type: Number
+    },
+  },
+  emits: [
+    'vgtExpand',
+    'select-group-change',
   ],
-  f: ["f", "ƒ", "ᵮ", "ᶂ", "ᶠ", "ḟ", "ｆ"],
-  g: ["g", "ĝ", "ğ", "ġ", "ģ", "ǥ", "ǧ", "ǵ", "ɠ", "ɡ", "ᵍ", "ᵷ", "ᵹ", "ᶃ", "ᶢ", "ḡ", "ｇ"],
-  h: [
-    "h",
-    "ĥ",
-    "ħ",
-    "ƕ",
-    "ȟ",
-    "ɥ",
-    "ɦ",
-    "ʮ",
-    "ʯ",
-    "ʰ",
-    "ʱ",
-    "ͪ",
-    "Һ",
-    "һ",
-    "ᑋ",
-    "ᶣ",
-    "ḣ",
-    "ḥ",
-    "ḧ",
-    "ḩ",
-    "ḫ",
-    "ⱨ",
-    "ｈ",
-  ],
-  i: [
-    "i",
-    "ì",
-    "í",
-    "î",
-    "ï",
-    "ĩ",
-    "ī",
-    "ĭ",
-    "į",
-    "ǐ",
-    "ȉ",
-    "ȋ",
-    "ɨ",
-    "ͥ",
-    "ᴉ",
-    "ᵎ",
-    "ᵢ",
-    "ᶖ",
-    "ᶤ",
-    "ḭ",
-    "ḯ",
-    "ỉ",
-    "ị",
-    "ｉ",
-  ],
-  j: ["j", "ĵ", "ǰ", "ɉ", "ʝ", "ʲ", "ᶡ", "ᶨ", "ｊ"],
-  k: ["k", "ķ", "ƙ", "ǩ", "ʞ", "ᵏ", "ᶄ", "ḱ", "ḳ", "ḵ", "ⱪ", "ｋ"],
-  l: [
-    "l",
-    "ĺ",
-    "ļ",
-    "ľ",
-    "ŀ",
-    "ł",
-    "ƚ",
-    "ȴ",
-    "ɫ",
-    "ɬ",
-    "ɭ",
-    "ˡ",
-    "ᶅ",
-    "ᶩ",
-    "ᶪ",
-    "ḷ",
-    "ḹ",
-    "ḻ",
-    "ḽ",
-    "ℓ",
-    "ⱡ",
-  ],
-  m: ["m", "ɯ", "ɰ", "ɱ", "ͫ", "ᴟ", "ᵐ", "ᵚ", "ᵯ", "ᶆ", "ᶬ", "ᶭ", "ḿ", "ṁ", "ṃ", "㎡", "㎥", "ｍ"],
-  n: [
-    "n",
-    "ñ",
-    "ń",
-    "ņ",
-    "ň",
-    "ŉ",
-    "ƞ",
-    "ǹ",
-    "ȵ",
-    "ɲ",
-    "ɳ",
-    "ᵰ",
-    "ᶇ",
-    "ᶮ",
-    "ᶯ",
-    "ṅ",
-    "ṇ",
-    "ṉ",
-    "ṋ",
-    "ⁿ",
-    "ｎ",
+  data() {
+    return {
+    };
+  },
+  computed: {
+    allSelected() {
+      const { headerRow } = this;
+      return headerRow.children.filter((row) => row.vgtSelected).length === headerRow.children.length;
+    }
+  },
+  methods: {
+    columnCollapsable(currentIndex) {
+      if (this.collapsable === true) {
+        return currentIndex === 0;
+      }
+      return currentIndex === this.collapsable;
+    },
+    toggleSelectGroup(event) {
+      this.$emit('select-group-change', {
+        groupIndex: this.groupIndex, checked: event.target.checked
+      });
+    }
+  },
+
+  mounted() {
+  },
+  components: {
+  },
+};
+
+const _hoisted_1$5 = ["colspan"];
+const _hoisted_2$5 = ["checked"];
+const _hoisted_3$5 = ["innerHTML"];
+const _hoisted_4$5 = { key: 1 };
+const _hoisted_5$5 = {
+  key: 1,
+  class: "vgt-row-header"
+};
+const _hoisted_6$5 = {
+  key: 2,
+  class: "vgt-row-header"
+};
+const _hoisted_7$4 = ["checked"];
+const _hoisted_8$2 = ["onClick"];
+const _hoisted_9$2 = { key: 0 };
+const _hoisted_10$2 = ["innerHTML"];
+
+function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
+  return (vue.openBlock(), vue.createElementBlock("tr", null, [
+    ($props.headerRow.mode === 'span')
+      ? (vue.openBlock(), vue.createElementBlock("th", {
+          key: 0,
+          class: "vgt-left-align vgt-row-header",
+          colspan: $props.fullColspan
+        }, [
+          ($props.selectAllByGroup)
+            ? vue.renderSlot(_ctx.$slots, "table-header-group-select", {
+                key: 0,
+                columns: $props.columns,
+                row: $props.headerRow
+              }, () => [
+                vue.createElementVNode("input", {
+                  type: "checkbox",
+                  checked: $options.allSelected,
+                  onChange: _cache[0] || (_cache[0] = $event => ($options.toggleSelectGroup($event)))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2$5)
+              ])
+            : vue.createCommentVNode("v-if", true),
+          vue.createElementVNode("span", {
+            onClick: _cache[1] || (_cache[1] = $event => ($props.collapsable ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {}))
+          }, [
+            ($props.collapsable)
+              ? (vue.openBlock(), vue.createElementBlock("span", {
+                  key: 0,
+                  class: vue.normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
+                }, null, 2 /* CLASS */))
+              : vue.createCommentVNode("v-if", true),
+            vue.renderSlot(_ctx.$slots, "table-header-row", { row: $props.headerRow }, () => [
+              ($props.headerRow.html)
+                ? (vue.openBlock(), vue.createElementBlock("span", {
+                    key: 0,
+                    innerHTML: $props.headerRow.label
+                  }, null, 8 /* PROPS */, _hoisted_3$5))
+                : (vue.openBlock(), vue.createElementBlock("span", _hoisted_4$5, vue.toDisplayString($props.headerRow.label), 1 /* TEXT */))
+            ])
+          ])
+        ], 8 /* PROPS */, _hoisted_1$5))
+      : vue.createCommentVNode("v-if", true),
+    vue.createCommentVNode(" if the mode is not span, we display every column "),
+    ($props.headerRow.mode !== 'span' && $props.lineNumbers)
+      ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_5$5))
+      : vue.createCommentVNode("v-if", true),
+    ($props.headerRow.mode !== 'span' && $props.selectable)
+      ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_6$5, [
+          ($props.selectAllByGroup)
+            ? vue.renderSlot(_ctx.$slots, "table-header-group-select", {
+                key: 0,
+                columns: $props.columns,
+                row: $props.headerRow
+              }, () => [
+                vue.createElementVNode("input", {
+                  type: "checkbox",
+                  checked: $options.allSelected,
+                  onChange: _cache[2] || (_cache[2] = $event => ($options.toggleSelectGroup($event)))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$4)
+              ])
+            : vue.createCommentVNode("v-if", true)
+        ]))
+      : vue.createCommentVNode("v-if", true),
+    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, i) => {
+      return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: i }, [
+        ($props.headerRow.mode !== 'span' && !column.hidden)
+          ? (vue.openBlock(), vue.createElementBlock("th", {
+              key: 0,
+              class: vue.normalizeClass(["vgt-row-header", $props.getClasses(i, 'td')]),
+              onClick: $event => ($options.columnCollapsable(i) ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {})
+            }, [
+              ($options.columnCollapsable(i))
+                ? (vue.openBlock(), vue.createElementBlock("span", {
+                    key: 0,
+                    class: vue.normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
+                  }, null, 2 /* CLASS */))
+                : vue.createCommentVNode("v-if", true),
+              vue.renderSlot(_ctx.$slots, "table-header-row", {
+                row: $props.headerRow,
+                column: column,
+                formattedRow: $props.formattedRow($props.headerRow, true)
+              }, () => [
+                (!column.html)
+                  ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_9$2, vue.toDisplayString($props.collectFormatted($props.headerRow, column, true)), 1 /* TEXT */))
+                  : vue.createCommentVNode("v-if", true),
+                (column.html)
+                  ? (vue.openBlock(), vue.createElementBlock("span", {
+                      key: 1,
+                      innerHTML: $props.collectFormatted($props.headerRow, column, true)
+                    }, null, 8 /* PROPS */, _hoisted_10$2))
+                  : vue.createCommentVNode("v-if", true)
+              ])
+            ], 10 /* CLASS, PROPS */, _hoisted_8$2))
+          : vue.createCommentVNode("v-if", true)
+      ], 64 /* STABLE_FRAGMENT */))
+    }), 128 /* KEYED_FRAGMENT */))
+  ]))
+}
+var VgtHeaderRow = /*#__PURE__*/_export_sfc(_sfc_main$5, [['render',_sfc_render$5]]);
+
+const _sfc_main$4 = {
+  name: 'VgtFilterRow',
+  props: [
+    'lineNumbers',
+    'columns',
+    'expandRowsEnabled',
+    'typedColumns',
+    'globalSearchEnabled',
+    'selectable',
+    'mode',
   ],
-  o: [
-    "o",
-    "ò",
-    "ó",
-    "ô",
-    "õ",
-    "ö",
-    "ø",
-    "ō",
-    "ŏ",
-    "ő",
-    "ơ",
-    "ǒ",
-    "ǫ",
-    "ǭ",
-    "ǿ",
-    "ȍ",
-    "ȏ",
-    "ȫ",
-    "ȭ",
-    "ȯ",
-    "ȱ",
-    "ɵ",
-    "ͦ",
-    "о",
-    "ӧ",
-    "ө",
-    "ᴏ",
-    "ᴑ",
-    "ᴓ",
-    "ᴼ",
-    "ᵒ",
-    "ᶱ",
-    "ṍ",
-    "ṏ",
-    "ṑ",
-    "ṓ",
-    "ọ",
-    "ỏ",
-    "ố",
-    "ồ",
-    "ổ",
-    "ỗ",
-    "ộ",
-    "ớ",
-    "ờ",
-    "ở",
-    "ỡ",
-    "ợ",
-    "ₒ",
-    "ｏ",
-    "𐐬",
-  ],
-  p: ["p", "ᵖ", "ᵱ", "ᵽ", "ᶈ", "ṕ", "ṗ", "ｐ"],
-  q: ["q", "ɋ", "ʠ", "ᛩ", "ｑ"],
-  r: [
-    "r",
-    "ŕ",
-    "ŗ",
-    "ř",
-    "ȑ",
-    "ȓ",
-    "ɍ",
-    "ɹ",
-    "ɻ",
-    "ʳ",
-    "ʴ",
-    "ʵ",
-    "ͬ",
-    "ᵣ",
-    "ᵲ",
-    "ᶉ",
-    "ṙ",
-    "ṛ",
-    "ṝ",
-    "ṟ",
-  ],
-  s: ["s", "ś", "ŝ", "ş", "š", "ș", "ʂ", "ᔆ", "ᶊ", "ṡ", "ṣ", "ṥ", "ṧ", "ṩ", "ｓ"],
-  t: [
-    "t",
-    "ţ",
-    "ť",
-    "ŧ",
-    "ƫ",
-    "ƭ",
-    "ț",
-    "ʇ",
-    "ͭ",
-    "ᵀ",
-    "ᵗ",
-    "ᵵ",
-    "ᶵ",
-    "ṫ",
-    "ṭ",
-    "ṯ",
-    "ṱ",
-    "ẗ",
-    "ｔ",
-  ],
-  u: [
-    "u",
-    "ù",
-    "ú",
-    "û",
-    "ü",
-    "ũ",
-    "ū",
-    "ŭ",
-    "ů",
-    "ű",
-    "ų",
-    "ư",
-    "ǔ",
-    "ǖ",
-    "ǘ",
-    "ǚ",
-    "ǜ",
-    "ȕ",
-    "ȗ",
-    "ͧ",
-    "ߎ",
-    "ᵘ",
-    "ᵤ",
-    "ṳ",
-    "ṵ",
-    "ṷ",
-    "ṹ",
-    "ṻ",
-    "ụ",
-    "ủ",
-    "ứ",
-    "ừ",
-    "ử",
-    "ữ",
-    "ự",
-    "ｕ",
-  ],
-  v: ["v", "ʋ", "ͮ", "ᵛ", "ᵥ", "ᶹ", "ṽ", "ṿ", "ⱱ", "ｖ", "ⱴ"],
-  w: ["w", "ŵ", "ʷ", "ᵂ", "ẁ", "ẃ", "ẅ", "ẇ", "ẉ", "ẘ", "ⱳ", "ｗ"],
-  x: ["x", "̽", "͓", "ᶍ", "ͯ", "ẋ", "ẍ", "ₓ", "ｘ"],
-  y: ["y", "ý", "ÿ", "ŷ", "ȳ", "ɏ", "ʸ", "ẏ", "ỳ", "ỵ", "ỷ", "ỹ", "ｙ"],
-  z: [
-    "z",
-    "ź",
-    "ż",
-    "ž",
-    "ƶ",
-    "ȥ",
-    "ɀ",
-    "ʐ",
-    "ʑ",
-    "ᙆ",
-    "ᙇ",
-    "ᶻ",
-    "ᶼ",
-    "ᶽ",
-    "ẑ",
-    "ẓ",
-    "ẕ",
-    "ⱬ",
-    "ｚ",
-  ],
-};
+  emits: ['filter-changed'],
+  watch: {
+    columns: {
+      handler(newValue, oldValue) {
+        this.populateInitialFilters();
+      },
+      deep: true,
+      immediate: true,
+    },
+  },
+  data() {
+    return {
+      columnFilters: {},
+      timer: null,
+    };
+  },
+  computed: {
 
-// Precompiled Object with { key = Diacritic, value = real-Character }
-const compiledDiactitics = (function() {
-  let x = {};
+    // to create a filter row, we need to
+    // make sure that there is atleast 1 column
+    // that requires filtering
+    hasFilterRow() {
+      // if (this.mode === 'remote' || !this.globalSearchEnabled) {
+      for (let i = 0; i < this.columns.length; i++) {
+        const col = this.columns[i];
+        if (col.filterOptions && col.filterOptions.enabled) {
+          return true;
+        }
+      }
+      // }
+      return false;
+    },
+  },
+  methods: {
 
-  for (let key in diacritics) {
-    let ok = diacritics[key];
+    fieldKey(field) {
+      if (typeof(field) === 'function' && field.name) {
+        return field.name;
+      }
+      return field;
+    },
 
-    for (let rval in ok) {
-      let val = ok[rval];
+    reset(emitEvent = false) {
+      this.columnFilters = {};
 
-      // Do not replace the char with itself
-      if (val !== key) {
-        x[val] = key;
+      if (emitEvent) {
+        this.$emit('filter-changed', this.columnFilters);
       }
-    }
-  }
+    },
 
-  return x;
-})();
+    isFilterable(column) {
+      return column.filterOptions
+        && column.filterOptions.enabled;
+    },
 
-// Regex for detecting non-ASCII-Characters in String
-const regexNonASCII = /[^a-z0-9\s,.-]/;
+    isDropdown(column) {
+      return this.isFilterable(column)
+        && column.filterOptions.filterDropdownItems
+        && column.filterOptions.filterDropdownItems.length;
+    },
 
-/*
- * Main function of the module which removes all diacritics from the received text
- */
-const diacriticless = (text) => {
-  // When there are only ascii-Characters in the string, skip processing and return text right away
-  if (text.search(regexNonASCII) === -1) {
-    return text;
-  }
+    isDropdownObjects(column) {
+      return this.isDropdown(column)
+        && typeof column.filterOptions.filterDropdownItems[0] === 'object';
+    },
 
-  let result = "";
+    isDropdownArray(column) {
+      return this.isDropdown(column)
+        && typeof column.filterOptions.filterDropdownItems[0] !== 'object';
+    },
 
-  let len = text.length;
-  for (var i = 0; i < len; i++) {
-    let searchChar = text.charAt(i);
+    getClasses(column) {
+      const firstClass = 'filter-th';
+      return (column.filterOptions && column.filterOptions.styleClass) ? [firstClass, ...column.filterOptions.styleClass.split(' ')].join(' ') : firstClass;
+    },
 
-    // If applicable replace the diacritic character with the real one or use the original value
-    result += searchChar in compiledDiactitics ? compiledDiactitics[searchChar] : searchChar;
-  }
+    // get column's defined placeholder or default one
+    getPlaceholder(column) {
+      const placeholder = (this.isFilterable(column) && column.filterOptions.placeholder) || `Filter ${column.label}`;
+      return placeholder;
+    },
 
-  return result;
-};
+    getName(column) {
+      return `vgt-${this.fieldKey(column.field)}`;
+    },
 
-const escapeRegExp = str => str.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
+    updateFiltersOnEnter(column, value) {
+      if (this.timer) clearTimeout(this.timer);
+      this.updateFiltersImmediately(column.field, value);
+    },
 
-var defaultType = {
-  format(x) {
-    return x;
-  },
-  filterPredicate(rowval, filter, skipDiacritics = false, fromDropdown = false) {
-    // take care of nulls
-    if (typeof rowval === 'undefined' || rowval === null) {
-      return false;
-    }
+    updateFiltersOnKeyup(column, value) {
+      // if the trigger is enter, we don't filter on keyup
+      if (column.filterOptions.trigger === 'enter') return;
+      this.updateFilters(column, value);
+    },
 
-    // row value
-    const rowValue = skipDiacritics
-      ? String(rowval).toLowerCase()
-      : diacriticless(escapeRegExp(String(rowval)).toLowerCase());
+    updateSlotFilter(column, value) {
+      let fieldToFilter = column.filterOptions.slotFilterField || column.field;
+      if (typeof column.filterOptions.formatValue === 'function') {
+        value = column.filterOptions.formatValue(value);
+      }
+      this.updateFiltersImmediately(fieldToFilter, value);
+    },
 
-    // search term
-    const searchTerm = skipDiacritics
-      ? filter.toLowerCase()
-      : diacriticless(escapeRegExp(filter).toLowerCase());
+    // since vue doesn't detect property addition and deletion, we
+    // need to create helper function to set property etc
+    updateFilters(column, value) {
+      if (this.timer) clearTimeout(this.timer);
+      this.timer = setTimeout(() => {
+        this.updateFiltersImmediately(column.field, value);
+      }, 400);
+    },
 
-    // comparison
-    return fromDropdown ? rowValue === searchTerm : (rowValue.indexOf(searchTerm) > -1);
-  },
+    updateFiltersImmediately(field, value) {
+      this.columnFilters[this.fieldKey(field)] = value;
+      this.$emit('filter-changed', this.columnFilters);
+    },
 
-  compare(x, y) {
-    function cook(d) {
-      if (typeof d === 'undefined' || d === null) return '';
-      return diacriticless(String(d).toLowerCase());
-    }
-    x = cook(x);
-    y = cook(y);
-    if (x < y) return -1;
-    if (x > y) return 1;
-    return 0;
+    populateInitialFilters() {
+      for (let i = 0; i < this.columns.length; i++) {
+        const col = this.columns[i];
+        // lets see if there are initial
+        // filters supplied by user
+        if (this.isFilterable(col)
+          && typeof col.filterOptions.filterValue !== 'undefined'
+          && col.filterOptions.filterValue !== null) {
+          this.columnFilters[this.fieldKey(col.field)] = col.filterOptions.filterValue;
+          // this.updateFilters(col, col.filterOptions.filterValue);
+          // this.$set(col.filterOptions, 'filterValue', undefined);
+        }
+      }
+      //* lets emit event once all filters are set
+      this.$emit('filter-changed', this.columnFilters);
+    },
   },
 };
 
-var _export_sfc = (sfc, props) => {
-  const target = sfc.__vccOpts || sfc;
-  for (const [key, val] of props) {
-    target[key] = val;
+const _hoisted_1$4 = { key: 0 };
+const _hoisted_2$4 = { key: 0 };
+const _hoisted_3$4 = { key: 1 };
+const _hoisted_4$4 = { key: 2 };
+const _hoisted_5$4 = { key: 0 };
+const _hoisted_6$4 = ["name", "placeholder", "value", "onKeyup", "onInput"];
+const _hoisted_7$3 = ["name", "value", "onChange"];
+const _hoisted_8$1 = {
+  value: "",
+  key: "-1"
+};
+const _hoisted_9$1 = ["value"];
+const _hoisted_10$1 = ["name", "value", "onChange"];
+const _hoisted_11$1 = {
+  value: "",
+  key: "-1"
+};
+const _hoisted_12$1 = ["value"];
+
+function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
+  return ($options.hasFilterRow)
+    ? (vue.openBlock(), vue.createElementBlock("tr", _hoisted_1$4, [
+        ($props.expandRowsEnabled)
+          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_2$4))
+          : vue.createCommentVNode("v-if", true),
+        ($props.lineNumbers)
+          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_3$4))
+          : vue.createCommentVNode("v-if", true),
+        ($props.selectable)
+          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_4$4))
+          : vue.createCommentVNode("v-if", true),
+        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, index) => {
+          return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
+            (!column.hidden)
+              ? (vue.openBlock(), vue.createElementBlock("th", {
+                  key: 0,
+                  class: vue.normalizeClass($options.getClasses(column))
+                }, [
+                  vue.renderSlot(_ctx.$slots, "column-filter", {
+                    column: column,
+                    updateFilters: $options.updateSlotFilter
+                  }, () => [
+                    ($options.isFilterable(column))
+                      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_5$4, [
+                          (!$options.isDropdown(column))
+                            ? (vue.openBlock(), vue.createElementBlock("input", {
+                                key: 0,
+                                name: $options.getName(column),
+                                type: "text",
+                                class: "vgt-input",
+                                placeholder: $options.getPlaceholder(column),
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onKeyup: vue.withKeys($event => ($options.updateFiltersOnEnter(column, $event.target.value)), ["enter"]),
+                                onInput: $event => ($options.updateFiltersOnKeyup(column, $event.target.value))
+                              }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6$4))
+                            : vue.createCommentVNode("v-if", true),
+                          vue.createCommentVNode(" options are a list of primitives "),
+                          ($options.isDropdownArray(column))
+                            ? (vue.openBlock(), vue.createElementBlock("select", {
+                                key: 1,
+                                name: $options.getName(column),
+                                class: "vgt-select",
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
+                              }, [
+                                vue.createElementVNode("option", _hoisted_8$1, vue.toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
+                                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(column.filterOptions.filterDropdownItems, (option, i) => {
+                                  return (vue.openBlock(), vue.createElementBlock("option", {
+                                    key: i,
+                                    value: option
+                                  }, vue.toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_9$1))
+                                }), 128 /* KEYED_FRAGMENT */))
+                              ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$3))
+                            : vue.createCommentVNode("v-if", true),
+                          vue.createCommentVNode(" options are a list of objects with text and value "),
+                          ($options.isDropdownObjects(column))
+                            ? (vue.openBlock(), vue.createElementBlock("select", {
+                                key: 2,
+                                name: $options.getName(column),
+                                class: "vgt-select",
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
+                              }, [
+                                vue.createElementVNode("option", _hoisted_11$1, vue.toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
+                                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(column.filterOptions.filterDropdownItems, (option, i) => {
+                                  return (vue.openBlock(), vue.createElementBlock("option", {
+                                    key: i,
+                                    value: option.value
+                                  }, vue.toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_12$1))
+                                }), 128 /* KEYED_FRAGMENT */))
+                              ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_10$1))
+                            : vue.createCommentVNode("v-if", true)
+                        ]))
+                      : vue.createCommentVNode("v-if", true)
+                  ])
+                ], 2 /* CLASS */))
+              : vue.createCommentVNode("v-if", true)
+          ], 64 /* STABLE_FRAGMENT */))
+        }), 128 /* KEYED_FRAGMENT */))
+      ]))
+    : vue.createCommentVNode("v-if", true)
+}
+var VgtFilterRow = /*#__PURE__*/_export_sfc(_sfc_main$4, [['render',_sfc_render$4]]);
+
+const DEFAULT_SORT_TYPE = 'asc';
+const SORT_TYPES = {
+  Ascending: 'asc',
+  Descending: 'desc',
+  None: 'none',
+};
+
+const PAGINATION_MODES = {
+  Pages: 'pages',
+  Records: 'records',
+};
+const DEFAULT_ROWS_PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];
+
+function getColumnFirstSortType(column) {
+  return column.firstSortType || DEFAULT_SORT_TYPE;
+}
+
+function getCurrentPrimarySort(sortArray, column) {
+  return ( sortArray.length === 1 && sortArray[0].field === column.field )
+  ? sortArray[0].type
+  : undefined;
+}
+
+function getNextSort(currentSort, column) {
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.Ascending) {
+    return SORT_TYPES.None
+  } else if (currentSort === SORT_TYPES.Ascending) {
+    return SORT_TYPES.Descending;
   }
-  return target;
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.Descending) {
+    return SORT_TYPES.Ascending;
+  } else if (currentSort === SORT_TYPES.Descending) {
+    return SORT_TYPES.None;
+  }
+
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.None) {
+    return SORT_TYPES.Descending;
+  } else {
+    return SORT_TYPES.Ascending;
+  }
+
+}
+
+function getIndex(sortArray, column) {
+  for (let i = 0; i < sortArray.length; i++) {
+    if (column.field === sortArray[i].field) return i;
+  }
+  return -1;
+}
+
+const primarySort = (sortArray, column) => {
+  const currentPrimarySort = getCurrentPrimarySort(sortArray, column);
+  const nextPrimarySort = getNextSort(currentPrimarySort, column);
+  return [{
+    field: column.field,
+    type: currentPrimarySort ? nextPrimarySort : getColumnFirstSortType(column),
+  }];
 };
 
-const _sfc_main$6 = {
-  name: 'VgtPaginationPageInfo',
+const secondarySort = (sortArray, column) => {
+  const index = getIndex(sortArray, column);
+  if (index === -1) {
+    sortArray.push({
+      field: column.field,
+      type: getColumnFirstSortType(column),
+    });
+  } else {
+    sortArray[index].type = getNextSort(sortArray[index].type, column);
+  }
+  return sortArray;
+};
+
+const _sfc_main$3 = {
+  name: 'VgtTableHeader',
   props: {
-    currentPage: {
-      default: 1,
+    lineNumbers: {
+      default: false,
+      type: Boolean,
     },
-    lastPage: {
-      default: 1,
+    selectable: {
+      default: false,
+      type: Boolean,
     },
-    totalRecords: {
-      default: 0,
+    allSelected: {
+      default: false,
+      type: Boolean,
     },
-    ofText: {
-      default: 'of',
-      type: String,
+    allSelectedIndeterminate: {
+      default: false,
+      type: Boolean,
     },
-    pageText: {
-      default: 'page',
-      type: String,
+    columns: {
+      type: Array,
+    },
+    expandRowsEnabled: {
+      default: false,
+      type: Boolean,
     },
-    currentPerPage: {},
     mode: {
-      default: PAGINATION_MODES.Records,
+      type: String,
     },
-    infoFn: { default: null },
-  },
-  data() {
-    return {
-      id: this.getId(),
-    };
-  },
-  computed: {
-    pageInfo() {
-      return `${this.ofText} ${this.lastPage}`;
-    },
-    firstRecordOnPage() {
-      return ((this.currentPage - 1) * this.currentPerPage) + 1;
-    },
-    lastRecordOnPage() {
-      return Math.min(this.totalRecords, this.currentPage * this.currentPerPage);
-    },
-    recordInfo() {
-      let first = this.firstRecordOnPage;
-      const last = this.lastRecordOnPage;
-
-      if (last === 0) {
-        first = 0;
-      }
+    typedColumns: {},
 
-      return `${first} - ${last} ${this.ofText} ${this.totalRecords}`;
-    },
-    infoParams() {
-      let first = this.firstRecordOnPage;
-      const last = this.lastRecordOnPage;
-      if (last === 0) {
-        first = 0;
-      }
-      return {
-        firstRecordOnPage: first,
-        lastRecordOnPage: last,
-        totalRecords: this.totalRecords,
-        currentPage: this.currentPage,
-        totalPages: this.lastPage,
-      };
+    //* Sort related
+    sortable: {
+      type: Boolean,
     },
-  },
-  methods: {
-    getId() {
-      return `vgt-page-input-${Math.floor(Math.random() * Date.now())}`;
+    multipleColumnSort: {
+      type: Boolean,
+      default: true,
     },
-    changePage(event) {
-      const value = parseInt(event.target.value, 10);
-
-      //! invalid number
-      if (Number.isNaN(value)
-        || value > this.lastPage
-        || value < 1) {
-        event.target.value = this.currentPage;
-        return false;
-      }
 
-      //* valid number
-      event.target.value = value;
-      this.$emit('page-changed', value);
+    getClasses: {
+      type: Function,
     },
-  },
-  mounted() {
-  },
-  components: {
-  },
-};
-
-const _hoisted_1$6 = { class: "footer__navigation__page-info" };
-const _hoisted_2$6 = { key: 0 };
-const _hoisted_3$6 = ["for"];
-const _hoisted_4$6 = ["id", "value"];
-const _hoisted_5$6 = /*#__PURE__*/vue.createElementVNode("span", {
-  id: "change-page-hint",
-  style: {"display":"none"}
-}, " Type a page number and press Enter to change the page. ", -1 /* HOISTED */);
-const _hoisted_6$6 = { key: 2 };
-
-function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
-  return (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$6, [
-    ($props.infoFn)
-      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$6, vue.toDisplayString($props.infoFn($options.infoParams)), 1 /* TEXT */))
-      : ($props.mode === 'pages')
-        ? (vue.openBlock(), vue.createElementBlock("form", {
-            key: 1,
-            onSubmit: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["prevent"]))
-          }, [
-            vue.createElementVNode("label", {
-              for: $data.id,
-              class: "page-info__label"
-            }, [
-              vue.createElementVNode("span", null, vue.toDisplayString($props.pageText), 1 /* TEXT */),
-              vue.createElementVNode("input", {
-                id: $data.id,
-                "aria-describedby": "change-page-hint",
-                "aria-controls": "vgb-table",
-                class: "footer__navigation__page-info__current-entry",
-                type: "text",
-                onKeyup: _cache[0] || (_cache[0] = vue.withKeys(vue.withModifiers((...args) => ($options.changePage && $options.changePage(...args)), ["stop"]), ["enter"])),
-                value: $props.currentPage
-              }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4$6),
-              vue.createElementVNode("span", null, vue.toDisplayString($options.pageInfo), 1 /* TEXT */)
-            ], 8 /* PROPS */, _hoisted_3$6),
-            _hoisted_5$6
-          ], 32 /* HYDRATE_EVENTS */))
-        : (vue.openBlock(), vue.createElementBlock("div", _hoisted_6$6, vue.toDisplayString($options.recordInfo), 1 /* TEXT */))
-  ]))
-}
-var VgtPaginationPageInfo = /*#__PURE__*/_export_sfc(_sfc_main$6, [['render',_sfc_render$6]]);
 
-const _sfc_main$5 = {
-  name: 'VgtPagination',
-  props: {
-    styleClass: { default: 'table table-bordered' },
-    total: { default: null },
-    perPage: {},
-    rtl: { default: false },
-    perPageDropdownEnabled: { default: true },
-    customRowsPerPageDropdown: { default() { return []; } },
-    paginateDropdownAllowAll: { default: true },
-    mode: { default: PAGINATION_MODES.Records },
+    //* search related
+    searchEnabled: {
+      type: Boolean,
+    },
 
-    // text options
-    nextText: { default: 'Next' },
-    prevText: { default: 'Prev' },
-    rowsPerPageText: { default: 'Rows per page:' },
-    ofText: { default: 'of' },
-    pageText: { default: 'page' },
-    allText: { default: 'All' },
-    infoFn: { default: null },
-  },
+    tableRef: {},
 
-  data() {
-    return {
-      id: this.getId(),
-      currentPage: 1,
-      prevPage: 0,
-      currentPerPage: 10,
-      rowsPerPageOptions: [],
-    };
+    paginated: {},
   },
+  emits: [
+    'toggle-select-all',
+    'toggle-expand-rows-all',
+    'sort-change',
+    'filter-changed',
+  ],
   watch: {
-    perPage: {
-      handler(newValue, oldValue) {
-        this.handlePerPage();
-        this.perPageChanged(oldValue);
+    columns: {
+      handler() {
+        this.setColumnStyles();
       },
       immediate: true,
+      deep: true
     },
-
-    customRowsPerPageDropdown: {
+    tableRef: {
       handler() {
-        this.handlePerPage();
+        this.setColumnStyles();
       },
-      deep: true,
+      immediate: true,
     },
-
-    total: {
-      handler(newValue, oldValue) {
-        if(this.rowsPerPageOptions.indexOf(this.currentPerPage) === -1) {
-          this.currentPerPage = newValue;
+    paginated: {
+      handler() {
+        if (this.tableRef) {
+          this.setColumnStyles();
         }
-      }
-    }
+      },
+      deep: true,
+    },
+  },
+  data() {
+    return {
+      checkBoxThStyle: {},
+      lineNumberThStyle: {},
+      columnStyles: [],
+      sorts: [],
+      ro: null
+    };
   },
-
   computed: {
-    // Number of pages
-    pagesCount() {
-      const quotient = Math.floor(this.total / this.currentPerPage);
-      const remainder = this.total % this.currentPerPage;
 
-      return remainder === 0 ? quotient : quotient + 1;
+  },
+  methods: {
+    reset() {
+      this.$refs['filter-row'].reset(true);
     },
-
-    // Can go to next page
-    nextIsPossible() {
-      return this.currentPage < this.pagesCount;
+    toggleExpandRowsAll() {
+      this.$emit('toggle-expand-rows-all');
     },
-
-    // Can go to previous page
-    prevIsPossible() {
-      return this.currentPage > 1;
+    toggleSelectAll() {
+      this.$emit('toggle-select-all');
     },
-  },
-
-  methods: {
-    getId() {
-      return `vgt-select-rpp-${Math.floor(Math.random() * Date.now())}`;
+    isSortableColumn(column) {
+      const { sortable } = column;
+      const isSortable = typeof sortable === 'boolean' ? sortable : this.sortable;
+      return isSortable;
     },
-    // Change current page
-    changePage(pageNumber, emit = true) {
-      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {
-        this.prevPage = this.currentPage;
-        this.currentPage = pageNumber;
-        this.pageChanged(emit);
+    sort(e, column) {
+      //* if column is not sortable, return right here
+      if (!this.isSortableColumn(column)) return;
+
+      if (e.shiftKey && this.multipleColumnSort) {
+        this.sorts = secondarySort(this.sorts, column);
+      } else {
+        this.sorts = primarySort(this.sorts, column);
       }
+      this.$emit('sort-change', this.sorts);
     },
 
-    // Go to next page
-    nextPage() {
-      if (this.nextIsPossible) {
-        this.prevPage = this.currentPage;
-        ++this.currentPage;
-        this.pageChanged();
-      }
+    setInitialSort(sorts) {
+      this.sorts = sorts;
+      this.$emit('sort-change', this.sorts);
     },
 
-    // Go to previous page
-    previousPage() {
-      if (this.prevIsPossible) {
-        this.prevPage = this.currentPage;
-        --this.currentPage;
-        this.pageChanged();
+    getColumnSort(column) {
+      for (let i = 0; i < this.sorts.length; i += 1) {
+        if (this.sorts[i].field === column.field) {
+          return this.sorts[i].type || 'asc';
+        }
       }
+      return null;
     },
 
-    // Indicate page changing
-    pageChanged(emit = true) {
-      const payload = {
-        currentPage: this.currentPage,
-        prevPage: this.prevPage,
-      };
-      if (!emit) payload.noEmit = true;
-      this.$emit('page-changed', payload);
+    getColumnSortLong(column) {
+      return this.getColumnSort(column) === 'asc'
+        ? 'ascending'
+        : 'descending'
     },
 
-    // Indicate per page changing
-    perPageChanged(oldValue) {
-      // go back to first page
-      if (oldValue) {
-        //* only emit if this isn't first initialization
-        this.$emit('per-page-changed', { currentPerPage: this.currentPerPage });
-      }
-      this.changePage(1, false);
+    getHeaderClasses(column, index) {
+      const classes = Object.assign({}, this.getClasses(index, 'th'), {
+        sortable: this.isSortableColumn(column),
+        'sorting sorting-desc': this.getColumnSort(column) === 'desc',
+        'sorting sorting-asc': this.getColumnSort(column) === 'asc',
+      });
+      return classes;
     },
 
-    // Handle per page changing
-    handlePerPage() {
-      //* if there's a custom dropdown then we use that
-      if (this.customRowsPerPageDropdown !== null
-        && (Array.isArray(this.customRowsPerPageDropdown)
-        && this.customRowsPerPageDropdown.length !== 0)) {
-        this.rowsPerPageOptions = JSON.parse(JSON.stringify(this.customRowsPerPageDropdown));
-      } else {
-        //* otherwise we use the default rows per page dropdown
-        this.rowsPerPageOptions = JSON.parse(JSON.stringify(DEFAULT_ROWS_PER_PAGE_DROPDOWN));
+    filterRows(columnFilters) {
+      this.$emit('filter-changed', columnFilters);
+    },
+
+    getWidthStyle(dom) {
+      if (window && window.getComputedStyle && dom) {
+        const cellStyle = window.getComputedStyle(dom, null);
+        return {
+          width: cellStyle.width,
+        };
       }
+      return {
+        width: 'auto',
+      };
+    },
 
-      if (this.perPage) {
-        this.currentPerPage = this.perPage;
-        // if perPage doesn't already exist, we add it
-        let found = false;
-        for (let i = 0; i < this.rowsPerPageOptions.length; i++) {
-          if (this.rowsPerPageOptions[i] === this.perPage) {
-            found = true;
-          }
-        }
-        if (!found && this.perPage !== -1) {
-          this.rowsPerPageOptions.unshift(this.perPage);
+    setColumnStyles() {
+      const colStyles = [];
+      for (let i = 0; i < this.columns.length; i++) {
+        if (this.tableRef) {
+          let skip = 0;
+          if (this.selectable) skip++;
+          if (this.lineNumbers) skip++;
+          const cell = this.tableRef.rows[0].cells[i + skip];
+          colStyles.push(this.getWidthStyle(cell));
+        } else {
+          colStyles.push({
+            minWidth: this.columns[i].width ? this.columns[i].width : 'auto',
+            maxWidth: this.columns[i].width ? this.columns[i].width : 'auto',
+            width: this.columns[i].width ? this.columns[i].width : 'auto',
+          });
         }
-      } else {
-        // reset to default
-        this.currentPerPage = 10;
       }
+      this.columnStyles = colStyles;
     },
-  },
 
-  mounted() {
-  },
+    getColumnStyle(column, index) {
+      const styleObject = {
+        minWidth: column.width ? column.width : 'auto',
+        maxWidth: column.width ? column.width : 'auto',
+        width: column.width ? column.width : 'auto',
+      };
+      //* if fixed header we need to get width from original table
+      if (this.tableRef) {
+        if (this.selectable) index++;
+        if (this.lineNumbers) index++;
 
-  components: {
-    'pagination-page-info': VgtPaginationPageInfo,
+        const cell = this.tableRef.rows[0].cells[index];
+        const cellStyle = window.getComputedStyle(cell, null);
+        styleObject.width = cellStyle.width;
+      }
+      return styleObject;
+    },
   },
-};
-
-const _hoisted_1$5 = { class: "vgt-wrap__footer vgt-clearfix" };
-const _hoisted_2$5 = {
-  key: 0,
-  class: "footer__row-count vgt-pull-left"
-};
-const _hoisted_3$5 = ["for"];
-const _hoisted_4$5 = ["id"];
-const _hoisted_5$5 = ["value"];
-const _hoisted_6$5 = ["value"];
-const _hoisted_7$5 = { class: "footer__navigation vgt-pull-right" };
-
-function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
-  const _component_pagination_page_info = vue.resolveComponent("pagination-page-info");
-
-  return (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$5, [
-    ($props.perPageDropdownEnabled)
-      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$5, [
-          vue.createElementVNode("form", null, [
-            vue.createElementVNode("label", {
-              for: $data.id,
-              class: "footer__row-count__label"
-            }, vue.toDisplayString($props.rowsPerPageText) + ":", 9 /* TEXT, PROPS */, _hoisted_3$5),
-            vue.withDirectives(vue.createElementVNode("select", {
-              id: $data.id,
-              autocomplete: "off",
-              name: "perPageSelect",
-              class: "footer__row-count__select",
-              "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => (($data.currentPerPage) = $event)),
-              onChange: _cache[1] || (_cache[1] = (...args) => ($options.perPageChanged && $options.perPageChanged(...args))),
-              "aria-controls": "vgt-table"
-            }, [
-              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.rowsPerPageOptions, (option, idx) => {
-                return (vue.openBlock(), vue.createElementBlock("option", {
-                  key: idx,
-                  value: option
-                }, vue.toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_5$5))
-              }), 128 /* KEYED_FRAGMENT */)),
-              ($props.paginateDropdownAllowAll)
-                ? (vue.openBlock(), vue.createElementBlock("option", {
-                    key: 0,
-                    value: $props.total
-                  }, vue.toDisplayString($props.allText), 9 /* TEXT, PROPS */, _hoisted_6$5))
-                : vue.createCommentVNode("v-if", true)
-            ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4$5), [
-              [vue.vModelSelect, $data.currentPerPage]
-            ])
-          ])
-        ]))
-      : vue.createCommentVNode("v-if", true),
-    vue.createElementVNode("div", _hoisted_7$5, [
-      vue.createVNode(_component_pagination_page_info, {
-        onPageChanged: $options.changePage,
-        "total-records": $props.total,
-        "last-page": $options.pagesCount,
-        "current-page": $data.currentPage,
-        "current-per-page": $data.currentPerPage,
-        "of-text": $props.ofText,
-        "page-text": $props.pageText,
-        "info-fn": $props.infoFn,
-        mode: $props.mode
-      }, null, 8 /* PROPS */, ["onPageChanged", "total-records", "last-page", "current-page", "current-per-page", "of-text", "page-text", "info-fn", "mode"]),
-      vue.createElementVNode("button", {
-        type: "button",
-        "aria-controls": "vgt-table",
-        class: vue.normalizeClass(["footer__navigation__page-btn", { disabled: !$options.prevIsPossible }]),
-        onClick: _cache[2] || (_cache[2] = vue.withModifiers((...args) => ($options.previousPage && $options.previousPage(...args)), ["prevent","stop"]))
-      }, [
-        vue.createElementVNode("span", {
-          "aria-hidden": "true",
-          class: vue.normalizeClass(["chevron", { 'left': !$props.rtl, 'right': $props.rtl }])
-        }, null, 2 /* CLASS */),
-        vue.createElementVNode("span", null, vue.toDisplayString($props.prevText), 1 /* TEXT */)
-      ], 2 /* CLASS */),
-      vue.createElementVNode("button", {
-        type: "button",
-        "aria-controls": "vgt-table",
-        class: vue.normalizeClass(["footer__navigation__page-btn", { disabled: !$options.nextIsPossible }]),
-        onClick: _cache[3] || (_cache[3] = vue.withModifiers((...args) => ($options.nextPage && $options.nextPage(...args)), ["prevent","stop"]))
-      }, [
-        vue.createElementVNode("span", null, vue.toDisplayString($props.nextText), 1 /* TEXT */),
-        vue.createElementVNode("span", {
-          "aria-hidden": "true",
-          class: vue.normalizeClass(["chevron", { 'right': !$props.rtl, 'left': $props.rtl }])
-        }, null, 2 /* CLASS */)
-      ], 2 /* CLASS */)
-    ])
-  ]))
-}
-var VgtPagination = /*#__PURE__*/_export_sfc(_sfc_main$5, [['render',_sfc_render$5]]);
+  mounted() {
+    this.$nextTick(() => {
+      // We're going to watch the parent element for resize events, and calculate column widths if it changes
+      if ('ResizeObserver' in window) {
+        this.ro = new ResizeObserver(() => {
+            this.setColumnStyles();
+        });
+        this.ro.observe(this.$parent.$el);
 
-const _sfc_main$4 = {
-  name: 'VgtGlobalSearch',
-  props: [
-    'value',
-    'searchEnabled',
-    'globalSearchPlaceholder',
-  ],
-  emits: [
-    'input',
-    'keyup',
-    'enter',
-  ],
-  data() {
-    return {
-      globalSearchTerm: null,
-      id: this.getId(),
-    };
+        // If this is a fixed-header table, we want to observe each column header from the non-fixed header.
+        // You can imagine two columns swapping widths, which wouldn't cause the above to trigger.
+        // This gets the first tr element of the primary table header, and iterates through its children (the th elements)
+        if (this.tableRef) {
+          Array.from(this.$parent.$refs['table-header-primary'].$el.children[0].children).forEach((header) => {
+            this.ro.observe(header);
+          });
+        }
+      }
+    });
   },
-  computed: {
-    showControlBar() {
-      if (this.searchEnabled) return true;
-      if (this.$slots && this.$slots['internal-table-actions']) return true;
-      return false;
-    },
+  beforeUnmount() {
+    if (this.ro) {
+      this.ro.disconnect();
+    }
   },
-  methods: {
-    updateValue(value) {
-      this.$emit('input', value);
-      this.$emit('keyup', value);
-    },
-    entered(value) {
-      this.$emit('enter', value);
-    },
-    getId() {
-      return `vgt-search-${Math.floor(Math.random() * Date.now())}`;
-    },
+  components: {
+    'vgt-filter-row': VgtFilterRow,
   },
 };
 
-const _hoisted_1$4 = {
+const _hoisted_1$3 = {
   key: 0,
-  class: "vgt-global-search vgt-clearfix"
+  scope: "col",
+  class: "line-numbers"
 };
-const _hoisted_2$4 = { class: "vgt-global-search__input vgt-pull-left" };
-const _hoisted_3$4 = ["for"];
-const _hoisted_4$4 = /*#__PURE__*/vue.createElementVNode("span", {
-  "aria-hidden": "true",
-  class: "input__icon"
-}, [
-  /*#__PURE__*/vue.createElementVNode("div", { class: "magnifying-glass" })
-], -1 /* HOISTED */);
-const _hoisted_5$4 = /*#__PURE__*/vue.createElementVNode("span", { class: "sr-only" }, "Search", -1 /* HOISTED */);
-const _hoisted_6$4 = [
-  _hoisted_4$4,
-  _hoisted_5$4
-];
-const _hoisted_7$4 = ["id", "placeholder", "value"];
-const _hoisted_8$3 = { class: "vgt-global-search__actions vgt-pull-right" };
+const _hoisted_2$3 = {
+  key: 1,
+  scope: "col",
+  class: "vgt-checkbox-col"
+};
+const _hoisted_3$3 = ["checked", ".indeterminate"];
+const _hoisted_4$3 = {
+  key: 2,
+  scope: "col",
+  class: "vgt-checkbox-col"
+};
+const _hoisted_5$3 = ["title", "aria-sort", "aria-controls"];
+const _hoisted_6$3 = ["onClick"];
+const _hoisted_7$2 = { class: "sr-only" };
 
-function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
-  return ($options.showControlBar)
-    ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$4, [
-        vue.createElementVNode("div", _hoisted_2$4, [
-          ($props.searchEnabled)
-            ? (vue.openBlock(), vue.createElementBlock("form", {
-                key: 0,
-                onSubmit: _cache[2] || (_cache[2] = vue.withModifiers(() => {}, ["prevent"])),
-                role: "search"
-              }, [
-                vue.createElementVNode("label", { for: $data.id }, _hoisted_6$4, 8 /* PROPS */, _hoisted_3$4),
-                vue.createElementVNode("input", {
-                  id: $data.id,
-                  type: "text",
-                  class: "vgt-input vgt-pull-left",
-                  placeholder: $props.globalSearchPlaceholder,
-                  value: $props.value,
-                  onInput: _cache[0] || (_cache[0] = $event => ($options.updateValue($event.target.value))),
-                  onKeyup: _cache[1] || (_cache[1] = vue.withKeys($event => ($options.entered($event.target.value)), ["enter"]))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$4)
-              ], 32 /* HYDRATE_EVENTS */))
+function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
+  const _component_vgt_filter_row = vue.resolveComponent("vgt-filter-row");
+
+  return (vue.openBlock(), vue.createElementBlock("thead", null, [
+    vue.createElementVNode("tr", null, [
+      ($props.lineNumbers)
+        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_1$3))
+        : vue.createCommentVNode("v-if", true),
+      ($props.selectable)
+        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_2$3, [
+            vue.createElementVNode("input", {
+              type: "checkbox",
+              checked: $props.allSelected,
+              ".indeterminate": $props.allSelectedIndeterminate,
+              onChange: _cache[0] || (_cache[0] = (...args) => ($options.toggleSelectAll && $options.toggleSelectAll(...args)))
+            }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_3$3)
+          ]))
+        : vue.createCommentVNode("v-if", true),
+      ($props.expandRowsEnabled)
+        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_4$3, [
+            vue.createElementVNode("a", {
+              href: "",
+              onClick: _cache[1] || (_cache[1] = vue.withModifiers((...args) => ($options.toggleExpandRowsAll && $options.toggleExpandRowsAll(...args)), ["prevent"])),
+              class: "vgt-wrap__expander"
+            }, " (+) ")
+          ]))
+        : vue.createCommentVNode("v-if", true),
+      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, index) => {
+        return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
+          (!column.hidden)
+            ? (vue.openBlock(), vue.createElementBlock("th", {
+                key: 0,
+                scope: "col",
+                title: column.tooltip,
+                class: vue.normalizeClass($options.getHeaderClasses(column, index)),
+                style: vue.normalizeStyle($data.columnStyles[index]),
+                "aria-sort": $options.getColumnSortLong(column),
+                "aria-controls": `col-${index}`
+              }, [
+                vue.renderSlot(_ctx.$slots, "table-column", { column: column }, () => [
+                  vue.createTextVNode(vue.toDisplayString(column.label), 1 /* TEXT */)
+                ]),
+                ($options.isSortableColumn(column))
+                  ? (vue.openBlock(), vue.createElementBlock("button", {
+                      key: 0,
+                      onClick: $event => ($options.sort($event, column))
+                    }, [
+                      vue.createElementVNode("span", _hoisted_7$2, " Sort table by " + vue.toDisplayString(column.label) + " in " + vue.toDisplayString($options.getColumnSortLong(column)) + " order ", 1 /* TEXT */)
+                    ], 8 /* PROPS */, _hoisted_6$3))
+                  : vue.createCommentVNode("v-if", true)
+              ], 14 /* CLASS, STYLE, PROPS */, _hoisted_5$3))
             : vue.createCommentVNode("v-if", true)
-        ]),
-        vue.createElementVNode("div", _hoisted_8$3, [
-          vue.renderSlot(_ctx.$slots, "internal-table-actions")
-        ])
-      ]))
-    : vue.createCommentVNode("v-if", true)
+        ], 64 /* STABLE_FRAGMENT */))
+      }), 128 /* KEYED_FRAGMENT */))
+    ]),
+    vue.createVNode(_component_vgt_filter_row, {
+      ref: "filter-row",
+      onFilterChanged: $options.filterRows,
+      "global-search-enabled": $props.searchEnabled,
+      "line-numbers": $props.lineNumbers,
+      "expand-rows-enabled": $props.expandRowsEnabled,
+      selectable: $props.selectable,
+      columns: $props.columns,
+      mode: $props.mode,
+      "typed-columns": $props.typedColumns
+    }, {
+      "column-filter": vue.withCtx((slotProps) => [
+        vue.renderSlot(_ctx.$slots, "column-filter", {
+          column: slotProps.column,
+          updateFilters: slotProps.updateFilters
+        })
+      ]),
+      _: 3 /* FORWARDED */
+    }, 8 /* PROPS */, ["onFilterChanged", "global-search-enabled", "line-numbers", "expand-rows-enabled", "selectable", "columns", "mode", "typed-columns"])
+  ]))
 }
-var VgtGlobalSearch = /*#__PURE__*/_export_sfc(_sfc_main$4, [['render',_sfc_render$4]]);
+var VgtTableHeader = /*#__PURE__*/_export_sfc(_sfc_main$3, [['render',_sfc_render$3]]);
 
-const _sfc_main$3 = {
-  name: 'VgtFilterRow',
-  props: [
-    'lineNumbers',
-    'columns',
-    'expandRowsEnabled',
-    'typedColumns',
-    'globalSearchEnabled',
-    'selectable',
-    'mode',
-  ],
-  emits: ['filter-changed'],
-  watch: {
-    columns: {
-      handler(newValue, oldValue) {
-        this.populateInitialFilters();
-      },
-      deep: true,
-      immediate: true,
+const _sfc_main$2 = {
+  name: 'VgtPaginationPageInfo',
+  props: {
+    currentPage: {
+      default: 1,
+    },
+    lastPage: {
+      default: 1,
+    },
+    totalRecords: {
+      default: 0,
+    },
+    ofText: {
+      default: 'of',
+      type: String,
+    },
+    pageText: {
+      default: 'page',
+      type: String,
     },
+    currentPerPage: {},
+    mode: {
+      default: PAGINATION_MODES.Records,
+    },
+    infoFn: { default: null },
   },
   data() {
     return {
-      columnFilters: {},
-      timer: null,
+      id: this.getId(),
     };
   },
   computed: {
-
-    // to create a filter row, we need to
-    // make sure that there is atleast 1 column
-    // that requires filtering
-    hasFilterRow() {
-      // if (this.mode === 'remote' || !this.globalSearchEnabled) {
-      for (let i = 0; i < this.columns.length; i++) {
-        const col = this.columns[i];
-        if (col.filterOptions && col.filterOptions.enabled) {
-          return true;
-        }
-      }
-      // }
-      return false;
+    pageInfo() {
+      return `${this.ofText} ${this.lastPage}`;
     },
-  },
-  methods: {
-
-    fieldKey(field) {
-      if (typeof(field) === 'function' && field.name) {
-        return field.name;
-      }
-      return field;
+    firstRecordOnPage() {
+      return ((this.currentPage - 1) * this.currentPerPage) + 1;
     },
-
-    reset(emitEvent = false) {
-      this.columnFilters = {};
-
-      if (emitEvent) {
-        this.$emit('filter-changed', this.columnFilters);
-      }
+    lastRecordOnPage() {
+      return Math.min(this.totalRecords, this.currentPage * this.currentPerPage);
     },
+    recordInfo() {
+      let first = this.firstRecordOnPage;
+      const last = this.lastRecordOnPage;
 
-    isFilterable(column) {
-      return column.filterOptions
-        && column.filterOptions.enabled;
-    },
+      if (last === 0) {
+        first = 0;
+      }
 
-    isDropdown(column) {
-      return this.isFilterable(column)
-        && column.filterOptions.filterDropdownItems
-        && column.filterOptions.filterDropdownItems.length;
+      return `${first} - ${last} ${this.ofText} ${this.totalRecords}`;
     },
-
-    isDropdownObjects(column) {
-      return this.isDropdown(column)
-        && typeof column.filterOptions.filterDropdownItems[0] === 'object';
+    infoParams() {
+      let first = this.firstRecordOnPage;
+      const last = this.lastRecordOnPage;
+      if (last === 0) {
+        first = 0;
+      }
+      return {
+        firstRecordOnPage: first,
+        lastRecordOnPage: last,
+        totalRecords: this.totalRecords,
+        currentPage: this.currentPage,
+        totalPages: this.lastPage,
+      };
     },
-
-    isDropdownArray(column) {
-      return this.isDropdown(column)
-        && typeof column.filterOptions.filterDropdownItems[0] !== 'object';
+  },
+  methods: {
+    getId() {
+      return `vgt-page-input-${Math.floor(Math.random() * Date.now())}`;
     },
+    changePage(event) {
+      const value = parseInt(event.target.value, 10);
 
-    getClasses(column) {
-      const firstClass = 'filter-th';
-      return (column.filterOptions && column.filterOptions.styleClass) ? [firstClass, ...column.filterOptions.styleClass.split(' ')].join(' ') : firstClass;
-    },
+      //! invalid number
+      if (Number.isNaN(value)
+        || value > this.lastPage
+        || value < 1) {
+        event.target.value = this.currentPage;
+        return false;
+      }
 
-    // get column's defined placeholder or default one
-    getPlaceholder(column) {
-      const placeholder = (this.isFilterable(column) && column.filterOptions.placeholder) || `Filter ${column.label}`;
-      return placeholder;
+      //* valid number
+      event.target.value = value;
+      this.$emit('page-changed', value);
     },
+  },
+  mounted() {
+  },
+  components: {
+  },
+};
 
-    getName(column) {
-      return `vgt-${this.fieldKey(column.field)}`;
-    },
+const _hoisted_1$2 = { class: "footer__navigation__page-info" };
+const _hoisted_2$2 = { key: 0 };
+const _hoisted_3$2 = ["for"];
+const _hoisted_4$2 = ["id", "value"];
+const _hoisted_5$2 = /*#__PURE__*/vue.createElementVNode("span", {
+  id: "change-page-hint",
+  style: {"display":"none"}
+}, " Type a page number and press Enter to change the page. ", -1 /* HOISTED */);
+const _hoisted_6$2 = { key: 2 };
 
-    updateFiltersOnEnter(column, value) {
-      if (this.timer) clearTimeout(this.timer);
-      this.updateFiltersImmediately(column.field, value);
-    },
+function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
+  return (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$2, [
+    ($props.infoFn)
+      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$2, vue.toDisplayString($props.infoFn($options.infoParams)), 1 /* TEXT */))
+      : ($props.mode === 'pages')
+        ? (vue.openBlock(), vue.createElementBlock("form", {
+            key: 1,
+            onSubmit: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, ["prevent"]))
+          }, [
+            vue.createElementVNode("label", {
+              for: $data.id,
+              class: "page-info__label"
+            }, [
+              vue.createElementVNode("span", null, vue.toDisplayString($props.pageText), 1 /* TEXT */),
+              vue.createElementVNode("input", {
+                id: $data.id,
+                "aria-describedby": "change-page-hint",
+                "aria-controls": "vgb-table",
+                class: "footer__navigation__page-info__current-entry",
+                type: "text",
+                onKeyup: _cache[0] || (_cache[0] = vue.withKeys(vue.withModifiers((...args) => ($options.changePage && $options.changePage(...args)), ["stop"]), ["enter"])),
+                value: $props.currentPage
+              }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_4$2),
+              vue.createElementVNode("span", null, vue.toDisplayString($options.pageInfo), 1 /* TEXT */)
+            ], 8 /* PROPS */, _hoisted_3$2),
+            _hoisted_5$2
+          ], 32 /* NEED_HYDRATION */))
+        : (vue.openBlock(), vue.createElementBlock("div", _hoisted_6$2, vue.toDisplayString($options.recordInfo), 1 /* TEXT */))
+  ]))
+}
+var VgtPaginationPageInfo = /*#__PURE__*/_export_sfc(_sfc_main$2, [['render',_sfc_render$2]]);
 
-    updateFiltersOnKeyup(column, value) {
-      // if the trigger is enter, we don't filter on keyup
-      if (column.filterOptions.trigger === 'enter') return;
-      this.updateFilters(column, value);
-    },
+const _sfc_main$1 = {
+  name: 'VgtPagination',
+  props: {
+    styleClass: { default: 'table table-bordered' },
+    total: { default: null },
+    perPage: {},
+    rtl: { default: false },
+    perPageDropdownEnabled: { default: true },
+    customRowsPerPageDropdown: { default() { return []; } },
+    paginateDropdownAllowAll: { default: true },
+    mode: { default: PAGINATION_MODES.Records },
 
-    updateSlotFilter(column, value) {
-      let fieldToFilter = column.filterOptions.slotFilterField || column.field;
-      if (typeof column.filterOptions.formatValue === 'function') {
-        value = column.filterOptions.formatValue(value);
-      }
-      this.updateFiltersImmediately(fieldToFilter, value);
-    },
+    // text options
+    nextText: { default: 'Next' },
+    prevText: { default: 'Prev' },
+    rowsPerPageText: { default: 'Rows per page:' },
+    ofText: { default: 'of' },
+    pageText: { default: 'page' },
+    allText: { default: 'All' },
+    infoFn: { default: null },
+  },
 
-    // since vue doesn't detect property addition and deletion, we
-    // need to create helper function to set property etc
-    updateFilters(column, value) {
-      if (this.timer) clearTimeout(this.timer);
-      this.timer = setTimeout(() => {
-        this.updateFiltersImmediately(column.field, value);
-      }, 400);
+  data() {
+    return {
+      id: this.getId(),
+      currentPage: 1,
+      prevPage: 0,
+      currentPerPage: 10,
+      rowsPerPageOptions: [],
+    };
+  },
+  watch: {
+    perPage: {
+      handler(newValue, oldValue) {
+        this.handlePerPage();
+        this.perPageChanged(oldValue);
+      },
+      immediate: true,
     },
 
-    updateFiltersImmediately(field, value) {
-      this.columnFilters[this.fieldKey(field)] = value;
-      this.$emit('filter-changed', this.columnFilters);
+    customRowsPerPageDropdown: {
+      handler() {
+        this.handlePerPage();
+      },
+      deep: true,
     },
 
-    populateInitialFilters() {
-      for (let i = 0; i < this.columns.length; i++) {
-        const col = this.columns[i];
-        // lets see if there are initial
-        // filters supplied by user
-        if (this.isFilterable(col)
-          && typeof col.filterOptions.filterValue !== 'undefined'
-          && col.filterOptions.filterValue !== null) {
-          this.columnFilters[this.fieldKey(col.field)] = col.filterOptions.filterValue;
-          // this.updateFilters(col, col.filterOptions.filterValue);
-          // this.$set(col.filterOptions, 'filterValue', undefined);
+    total: {
+      handler(newValue, oldValue) {
+        if(this.rowsPerPageOptions.indexOf(this.currentPerPage) === -1) {
+          this.currentPerPage = newValue;
         }
       }
-      //* lets emit event once all filters are set
-      this.$emit('filter-changed', this.columnFilters);
-    },
+    }
   },
-};
 
-const _hoisted_1$3 = { key: 0 };
-const _hoisted_2$3 = { key: 0 };
-const _hoisted_3$3 = { key: 1 };
-const _hoisted_4$3 = { key: 2 };
-const _hoisted_5$3 = { key: 0 };
-const _hoisted_6$3 = ["name", "placeholder", "value", "onKeyup", "onInput"];
-const _hoisted_7$3 = ["name", "value", "onChange"];
-const _hoisted_8$2 = {
-  value: "",
-  key: "-1"
-};
-const _hoisted_9$2 = ["value"];
-const _hoisted_10$2 = ["name", "value", "onChange"];
-const _hoisted_11$1 = {
-  value: "",
-  key: "-1"
-};
-const _hoisted_12$1 = ["value"];
+  computed: {
+    // Number of pages
+    pagesCount() {
+      const quotient = Math.floor(this.total / this.currentPerPage);
+      const remainder = this.total % this.currentPerPage;
 
-function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
-  return ($options.hasFilterRow)
-    ? (vue.openBlock(), vue.createElementBlock("tr", _hoisted_1$3, [
-        ($props.expandRowsEnabled)
-          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_2$3))
-          : vue.createCommentVNode("v-if", true),
-        ($props.lineNumbers)
-          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_3$3))
-          : vue.createCommentVNode("v-if", true),
-        ($props.selectable)
-          ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_4$3))
-          : vue.createCommentVNode("v-if", true),
-        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, index) => {
-          return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
-            (!column.hidden)
-              ? (vue.openBlock(), vue.createElementBlock("th", {
-                  key: 0,
-                  class: vue.normalizeClass($options.getClasses(column))
-                }, [
-                  vue.renderSlot(_ctx.$slots, "column-filter", {
-                    column: column,
-                    updateFilters: $options.updateSlotFilter
-                  }, () => [
-                    ($options.isFilterable(column))
-                      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_5$3, [
-                          (!$options.isDropdown(column))
-                            ? (vue.openBlock(), vue.createElementBlock("input", {
-                                key: 0,
-                                name: $options.getName(column),
-                                type: "text",
-                                class: "vgt-input",
-                                placeholder: $options.getPlaceholder(column),
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onKeyup: vue.withKeys($event => ($options.updateFiltersOnEnter(column, $event.target.value)), ["enter"]),
-                                onInput: $event => ($options.updateFiltersOnKeyup(column, $event.target.value))
-                              }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_6$3))
-                            : vue.createCommentVNode("v-if", true),
-                          vue.createCommentVNode(" options are a list of primitives "),
-                          ($options.isDropdownArray(column))
-                            ? (vue.openBlock(), vue.createElementBlock("select", {
-                                key: 1,
-                                name: $options.getName(column),
-                                class: "vgt-select",
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
-                              }, [
-                                vue.createElementVNode("option", _hoisted_8$2, vue.toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
-                                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(column.filterOptions.filterDropdownItems, (option, i) => {
-                                  return (vue.openBlock(), vue.createElementBlock("option", {
-                                    key: i,
-                                    value: option
-                                  }, vue.toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_9$2))
-                                }), 128 /* KEYED_FRAGMENT */))
-                              ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$3))
-                            : vue.createCommentVNode("v-if", true),
-                          vue.createCommentVNode(" options are a list of objects with text and value "),
-                          ($options.isDropdownObjects(column))
-                            ? (vue.openBlock(), vue.createElementBlock("select", {
-                                key: 2,
-                                name: $options.getName(column),
-                                class: "vgt-select",
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
-                              }, [
-                                vue.createElementVNode("option", _hoisted_11$1, vue.toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
-                                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(column.filterOptions.filterDropdownItems, (option, i) => {
-                                  return (vue.openBlock(), vue.createElementBlock("option", {
-                                    key: i,
-                                    value: option.value
-                                  }, vue.toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_12$1))
-                                }), 128 /* KEYED_FRAGMENT */))
-                              ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_10$2))
-                            : vue.createCommentVNode("v-if", true)
-                        ]))
-                      : vue.createCommentVNode("v-if", true)
-                  ])
-                ], 2 /* CLASS */))
-              : vue.createCommentVNode("v-if", true)
-          ], 64 /* STABLE_FRAGMENT */))
-        }), 128 /* KEYED_FRAGMENT */))
-      ]))
-    : vue.createCommentVNode("v-if", true)
-}
-var VgtFilterRow = /*#__PURE__*/_export_sfc(_sfc_main$3, [['render',_sfc_render$3]]);
+      return remainder === 0 ? quotient : quotient + 1;
+    },
 
-function getColumnFirstSortType(column) {
-  return column.firstSortType || DEFAULT_SORT_TYPE;
-}
+    // Can go to next page
+    nextIsPossible() {
+      return this.currentPage < this.pagesCount;
+    },
 
-function getCurrentPrimarySort(sortArray, column) {
-  return ( sortArray.length === 1 && sortArray[0].field === column.field )
-  ? sortArray[0].type
-  : undefined;
-}
+    // Can go to previous page
+    prevIsPossible() {
+      return this.currentPage > 1;
+    },
+  },
 
-function getNextSort(currentSort, column) {
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.Ascending) {
-    return SORT_TYPES.None
-  } else if (currentSort === SORT_TYPES.Ascending) {
-    return SORT_TYPES.Descending;
-  }
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.Descending) {
-    return SORT_TYPES.Ascending;
-  } else if (currentSort === SORT_TYPES.Descending) {
-    return SORT_TYPES.None;
-  }
+  methods: {
+    getId() {
+      return `vgt-select-rpp-${Math.floor(Math.random() * Date.now())}`;
+    },
+    // Change current page
+    changePage(pageNumber, emit = true) {
+      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {
+        this.prevPage = this.currentPage;
+        this.currentPage = pageNumber;
+        this.pageChanged(emit);
+      }
+    },
 
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.None) {
-    return SORT_TYPES.Descending;
-  } else {
-    return SORT_TYPES.Ascending;
-  }
+    // Go to next page
+    nextPage() {
+      if (this.nextIsPossible) {
+        this.prevPage = this.currentPage;
+        ++this.currentPage;
+        this.pageChanged();
+      }
+    },
 
-}
+    // Go to previous page
+    previousPage() {
+      if (this.prevIsPossible) {
+        this.prevPage = this.currentPage;
+        --this.currentPage;
+        this.pageChanged();
+      }
+    },
 
-function getIndex(sortArray, column) {
-  for (let i = 0; i < sortArray.length; i++) {
-    if (column.field === sortArray[i].field) return i;
-  }
-  return -1;
-}
+    // Indicate page changing
+    pageChanged(emit = true) {
+      const payload = {
+        currentPage: this.currentPage,
+        prevPage: this.prevPage,
+      };
+      if (!emit) payload.noEmit = true;
+      this.$emit('page-changed', payload);
+    },
 
-const primarySort = (sortArray, column) => {
-  const currentPrimarySort = getCurrentPrimarySort(sortArray, column);
-  const nextPrimarySort = getNextSort(currentPrimarySort, column);
-  return [{
-    field: column.field,
-    type: currentPrimarySort ? nextPrimarySort : getColumnFirstSortType(column),
-  }];
-};
-
-const secondarySort = (sortArray, column) => {
-  const index = getIndex(sortArray, column);
-  if (index === -1) {
-    sortArray.push({
-      field: column.field,
-      type: getColumnFirstSortType(column),
-    });
-  } else {
-    sortArray[index].type = getNextSort(sortArray[index].type, column);
-  }
-  return sortArray;
-};
-
-const _sfc_main$2 = {
-  name: 'VgtTableHeader',
-  props: {
-    lineNumbers: {
-      default: false,
-      type: Boolean,
-    },
-    selectable: {
-      default: false,
-      type: Boolean,
-    },
-    allSelected: {
-      default: false,
-      type: Boolean,
-    },
-    allSelectedIndeterminate: {
-      default: false,
-      type: Boolean,
-    },
-    columns: {
-      type: Array,
-    },
-    expandRowsEnabled: {
-      default: false,
-      type: Boolean,
-    },
-    mode: {
-      type: String,
-    },
-    typedColumns: {},
-
-    //* Sort related
-    sortable: {
-      type: Boolean,
-    },
-    multipleColumnSort: {
-      type: Boolean,
-      default: true,
-    },
-
-    getClasses: {
-      type: Function,
-    },
-
-    //* search related
-    searchEnabled: {
-      type: Boolean,
-    },
-
-    tableRef: {},
-
-    paginated: {},
-  },
-  emits: [
-    'toggle-select-all',
-    'toggle-expand-rows-all',
-    'sort-change',
-    'filter-changed',
-  ],
-  watch: {
-    columns: {
-      handler() {
-        this.setColumnStyles();
-      },
-      immediate: true,
-      deep: true
-    },
-    tableRef: {
-      handler() {
-        this.setColumnStyles();
-      },
-      immediate: true,
-    },
-    paginated: {
-      handler() {
-        if (this.tableRef) {
-          this.setColumnStyles();
-        }
-      },
-      deep: true,
-    },
-  },
-  data() {
-    return {
-      checkBoxThStyle: {},
-      lineNumberThStyle: {},
-      columnStyles: [],
-      sorts: [],
-      ro: null
-    };
-  },
-  computed: {
-
-  },
-  methods: {
-    reset() {
-      this.$refs['filter-row'].reset(true);
-    },
-    toggleExpandRowsAll() {
-      this.$emit('toggle-expand-rows-all');
-    },
-    toggleSelectAll() {
-      this.$emit('toggle-select-all');
-    },
-    isSortableColumn(column) {
-      const { sortable } = column;
-      const isSortable = typeof sortable === 'boolean' ? sortable : this.sortable;
-      return isSortable;
+    // Indicate per page changing
+    perPageChanged(oldValue) {
+      // go back to first page
+      if (oldValue) {
+        //* only emit if this isn't first initialization
+        this.$emit('per-page-changed', { currentPerPage: this.currentPerPage });
+      }
+      this.changePage(1, false);
     },
-    sort(e, column) {
-      //* if column is not sortable, return right here
-      if (!this.isSortableColumn(column)) return;
 
-      if (e.shiftKey && this.multipleColumnSort) {
-        this.sorts = secondarySort(this.sorts, column);
+    // Handle per page changing
+    handlePerPage() {
+      //* if there's a custom dropdown then we use that
+      if (this.customRowsPerPageDropdown !== null
+        && (Array.isArray(this.customRowsPerPageDropdown)
+        && this.customRowsPerPageDropdown.length !== 0)) {
+        this.rowsPerPageOptions = JSON.parse(JSON.stringify(this.customRowsPerPageDropdown));
       } else {
-        this.sorts = primarySort(this.sorts, column);
+        //* otherwise we use the default rows per page dropdown
+        this.rowsPerPageOptions = JSON.parse(JSON.stringify(DEFAULT_ROWS_PER_PAGE_DROPDOWN));
       }
-      this.$emit('sort-change', this.sorts);
-    },
-
-    setInitialSort(sorts) {
-      this.sorts = sorts;
-      this.$emit('sort-change', this.sorts);
-    },
 
-    getColumnSort(column) {
-      for (let i = 0; i < this.sorts.length; i += 1) {
-        if (this.sorts[i].field === column.field) {
-          return this.sorts[i].type || 'asc';
+      if (this.perPage) {
+        this.currentPerPage = this.perPage;
+        // if perPage doesn't already exist, we add it
+        let found = false;
+        for (let i = 0; i < this.rowsPerPageOptions.length; i++) {
+          if (this.rowsPerPageOptions[i] === this.perPage) {
+            found = true;
+          }
         }
-      }
-      return null;
-    },
-
-    getColumnSortLong(column) {
-      return this.getColumnSort(column) === 'asc'
-        ? 'ascending'
-        : 'descending'
-    },
-
-    getHeaderClasses(column, index) {
-      const classes = Object.assign({}, this.getClasses(index, 'th'), {
-        sortable: this.isSortableColumn(column),
-        'sorting sorting-desc': this.getColumnSort(column) === 'desc',
-        'sorting sorting-asc': this.getColumnSort(column) === 'asc',
-      });
-      return classes;
-    },
-
-    filterRows(columnFilters) {
-      this.$emit('filter-changed', columnFilters);
-    },
-
-    getWidthStyle(dom) {
-      if (window && window.getComputedStyle && dom) {
-        const cellStyle = window.getComputedStyle(dom, null);
-        return {
-          width: cellStyle.width,
-        };
-      }
-      return {
-        width: 'auto',
-      };
-    },
-
-    setColumnStyles() {
-      const colStyles = [];
-      for (let i = 0; i < this.columns.length; i++) {
-        if (this.tableRef) {
-          let skip = 0;
-          if (this.selectable) skip++;
-          if (this.lineNumbers) skip++;
-          const cell = this.tableRef.rows[0].cells[i + skip];
-          colStyles.push(this.getWidthStyle(cell));
-        } else {
-          colStyles.push({
-            minWidth: this.columns[i].width ? this.columns[i].width : 'auto',
-            maxWidth: this.columns[i].width ? this.columns[i].width : 'auto',
-            width: this.columns[i].width ? this.columns[i].width : 'auto',
-          });
+        if (!found && this.perPage !== -1) {
+          this.rowsPerPageOptions.unshift(this.perPage);
         }
+      } else {
+        // reset to default
+        this.currentPerPage = 10;
       }
-      this.columnStyles = colStyles;
     },
+  },
 
-    getColumnStyle(column, index) {
-      const styleObject = {
-        minWidth: column.width ? column.width : 'auto',
-        maxWidth: column.width ? column.width : 'auto',
-        width: column.width ? column.width : 'auto',
-      };
-      //* if fixed header we need to get width from original table
-      if (this.tableRef) {
-        if (this.selectable) index++;
-        if (this.lineNumbers) index++;
+  mounted() {
+  },
 
-        const cell = this.tableRef.rows[0].cells[index];
-        const cellStyle = window.getComputedStyle(cell, null);
-        styleObject.width = cellStyle.width;
-      }
-      return styleObject;
-    },
+  components: {
+    'pagination-page-info': VgtPaginationPageInfo,
   },
-  mounted() {
-    this.$nextTick(() => {
-      // We're going to watch the parent element for resize events, and calculate column widths if it changes
-      if ('ResizeObserver' in window) {
-        this.ro = new ResizeObserver(() => {
-            this.setColumnStyles();
-        });
-        this.ro.observe(this.$parent.$el);
+};
 
-        // If this is a fixed-header table, we want to observe each column header from the non-fixed header.
-        // You can imagine two columns swapping widths, which wouldn't cause the above to trigger.
-        // This gets the first tr element of the primary table header, and iterates through its children (the th elements)
-        if (this.tableRef) {
-          Array.from(this.$parent.$refs['table-header-primary'].$el.children[0].children).forEach((header) => {
-            this.ro.observe(header);
-          });
-        }
-      }
-    });
-  },
-  beforeUnmount() {
-    if (this.ro) {
-      this.ro.disconnect();
-    }
-  },
-  components: {
-    'vgt-filter-row': VgtFilterRow,
-  },
-};
-
-const _hoisted_1$2 = {
+const _hoisted_1$1 = { class: "vgt-wrap__footer vgt-clearfix" };
+const _hoisted_2$1 = {
   key: 0,
-  scope: "col",
-  class: "line-numbers"
-};
-const _hoisted_2$2 = {
-  key: 1,
-  scope: "col",
-  class: "vgt-checkbox-col"
-};
-const _hoisted_3$2 = ["checked", ".indeterminate"];
-const _hoisted_4$2 = {
-  key: 2,
-  scope: "col",
-  class: "vgt-checkbox-col"
-};
-const _hoisted_5$2 = ["title", "aria-sort", "aria-controls"];
-const _hoisted_6$2 = ["onClick"];
-const _hoisted_7$2 = { class: "sr-only" };
-
-function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
-  const _component_vgt_filter_row = vue.resolveComponent("vgt-filter-row");
-
-  return (vue.openBlock(), vue.createElementBlock("thead", null, [
-    vue.createElementVNode("tr", null, [
-      ($props.lineNumbers)
-        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_1$2))
-        : vue.createCommentVNode("v-if", true),
-      ($props.selectable)
-        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_2$2, [
-            vue.createElementVNode("input", {
-              type: "checkbox",
-              checked: $props.allSelected,
-              ".indeterminate": $props.allSelectedIndeterminate,
-              onChange: _cache[0] || (_cache[0] = (...args) => ($options.toggleSelectAll && $options.toggleSelectAll(...args)))
-            }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3$2)
-          ]))
-        : vue.createCommentVNode("v-if", true),
-      ($props.expandRowsEnabled)
-        ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_4$2, [
-            vue.createElementVNode("a", {
-              href: "",
-              onClick: _cache[1] || (_cache[1] = vue.withModifiers((...args) => ($options.toggleExpandRowsAll && $options.toggleExpandRowsAll(...args)), ["prevent"])),
-              class: "vgt-wrap__expander"
-            }, " (+) ")
-          ]))
-        : vue.createCommentVNode("v-if", true),
-      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, index) => {
-        return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
-          (!column.hidden)
-            ? (vue.openBlock(), vue.createElementBlock("th", {
-                key: 0,
-                scope: "col",
-                title: column.tooltip,
-                class: vue.normalizeClass($options.getHeaderClasses(column, index)),
-                style: vue.normalizeStyle($data.columnStyles[index]),
-                "aria-sort": $options.getColumnSortLong(column),
-                "aria-controls": `col-${index}`
-              }, [
-                vue.renderSlot(_ctx.$slots, "table-column", { column: column }, () => [
-                  vue.createTextVNode(vue.toDisplayString(column.label), 1 /* TEXT */)
-                ]),
-                ($options.isSortableColumn(column))
-                  ? (vue.openBlock(), vue.createElementBlock("button", {
-                      key: 0,
-                      onClick: $event => ($options.sort($event, column))
-                    }, [
-                      vue.createElementVNode("span", _hoisted_7$2, " Sort table by " + vue.toDisplayString(column.label) + " in " + vue.toDisplayString($options.getColumnSortLong(column)) + " order ", 1 /* TEXT */)
-                    ], 8 /* PROPS */, _hoisted_6$2))
-                  : vue.createCommentVNode("v-if", true)
-              ], 14 /* CLASS, STYLE, PROPS */, _hoisted_5$2))
-            : vue.createCommentVNode("v-if", true)
-        ], 64 /* STABLE_FRAGMENT */))
-      }), 128 /* KEYED_FRAGMENT */))
-    ]),
-    vue.createVNode(_component_vgt_filter_row, {
-      ref: "filter-row",
-      onFilterChanged: $options.filterRows,
-      "global-search-enabled": $props.searchEnabled,
-      "line-numbers": $props.lineNumbers,
-      "expand-rows-enabled": $props.expandRowsEnabled,
-      selectable: $props.selectable,
-      columns: $props.columns,
-      mode: $props.mode,
-      "typed-columns": $props.typedColumns
-    }, {
-      "column-filter": vue.withCtx((slotProps) => [
-        vue.renderSlot(_ctx.$slots, "column-filter", {
-          column: slotProps.column,
-          updateFilters: slotProps.updateFilters
-        })
-      ]),
-      _: 3 /* FORWARDED */
-    }, 8 /* PROPS */, ["onFilterChanged", "global-search-enabled", "line-numbers", "expand-rows-enabled", "selectable", "columns", "mode", "typed-columns"])
-  ]))
-}
-var VgtTableHeader = /*#__PURE__*/_export_sfc(_sfc_main$2, [['render',_sfc_render$2]]);
-
-const _sfc_main$1 = {
-  name: 'VgtHeaderRow',
-  props: {
-    headerRow: {
-      type: Object,
-    },
-    columns: {
-      type: Array,
-    },
-    lineNumbers: {
-      type: Boolean,
-    },
-    selectable: {
-      type: Boolean,
-    },
-    selectAllByGroup: {
-      type: Boolean
-    },
-    collapsable: {
-      type: [Boolean, Number],
-      default: false,
-    },
-    collectFormatted: {
-      type: Function,
-    },
-    formattedRow: {
-      type: Function,
-    },
-    getClasses: {
-      type: Function,
-    },
-    fullColspan: {
-      type: Number,
-    },
-    groupIndex: {
-      type: Number
-    },
-  },
-  emits: [
-    'vgtExpand',
-    'select-group-change',
-  ],
-  data() {
-    return {
-    };
-  },
-  computed: {
-    allSelected() {
-      const { headerRow } = this;
-      return headerRow.children.filter((row) => row.vgtSelected).length === headerRow.children.length;
-    }
-  },
-  methods: {
-    columnCollapsable(currentIndex) {
-      if (this.collapsable === true) {
-        return currentIndex === 0;
-      }
-      return currentIndex === this.collapsable;
-    },
-    toggleSelectGroup(event) {
-      this.$emit('select-group-change', {
-        groupIndex: this.groupIndex, checked: event.target.checked
-      });
-    }
-  },
-
-  mounted() {
-  },
-  components: {
-  },
-};
-
-const _hoisted_1$1 = ["colspan"];
-const _hoisted_2$1 = ["checked"];
-const _hoisted_3$1 = ["innerHTML"];
-const _hoisted_4$1 = { key: 1 };
-const _hoisted_5$1 = {
-  key: 1,
-  class: "vgt-row-header"
-};
-const _hoisted_6$1 = {
-  key: 2,
-  class: "vgt-row-header"
+  class: "footer__row-count vgt-pull-left"
 };
-const _hoisted_7$1 = ["checked"];
-const _hoisted_8$1 = ["onClick"];
-const _hoisted_9$1 = { key: 0 };
-const _hoisted_10$1 = ["innerHTML"];
+const _hoisted_3$1 = ["for"];
+const _hoisted_4$1 = ["id"];
+const _hoisted_5$1 = ["value"];
+const _hoisted_6$1 = ["value"];
+const _hoisted_7$1 = { class: "footer__navigation vgt-pull-right" };
 
 function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
-  return (vue.openBlock(), vue.createElementBlock("tr", null, [
-    ($props.headerRow.mode === 'span')
-      ? (vue.openBlock(), vue.createElementBlock("th", {
-          key: 0,
-          class: "vgt-left-align vgt-row-header",
-          colspan: $props.fullColspan
-        }, [
-          ($props.selectAllByGroup)
-            ? vue.renderSlot(_ctx.$slots, "table-header-group-select", {
-                key: 0,
-                columns: $props.columns,
-                row: $props.headerRow
-              }, () => [
-                vue.createElementVNode("input", {
-                  type: "checkbox",
-                  checked: $options.allSelected,
-                  onChange: _cache[0] || (_cache[0] = $event => ($options.toggleSelectGroup($event)))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2$1)
-              ])
-            : vue.createCommentVNode("v-if", true),
-          vue.createElementVNode("span", {
-            onClick: _cache[1] || (_cache[1] = $event => ($props.collapsable ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {}))
-          }, [
-            ($props.collapsable)
-              ? (vue.openBlock(), vue.createElementBlock("span", {
-                  key: 0,
-                  class: vue.normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
-                }, null, 2 /* CLASS */))
-              : vue.createCommentVNode("v-if", true),
-            vue.renderSlot(_ctx.$slots, "table-header-row", { row: $props.headerRow }, () => [
-              ($props.headerRow.html)
-                ? (vue.openBlock(), vue.createElementBlock("span", {
+  const _component_pagination_page_info = vue.resolveComponent("pagination-page-info");
+
+  return (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$1, [
+    ($props.perPageDropdownEnabled)
+      ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$1, [
+          vue.createElementVNode("form", null, [
+            vue.createElementVNode("label", {
+              for: $data.id,
+              class: "footer__row-count__label"
+            }, vue.toDisplayString($props.rowsPerPageText) + ":", 9 /* TEXT, PROPS */, _hoisted_3$1),
+            vue.withDirectives(vue.createElementVNode("select", {
+              id: $data.id,
+              autocomplete: "off",
+              name: "perPageSelect",
+              class: "footer__row-count__select",
+              "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => (($data.currentPerPage) = $event)),
+              onChange: _cache[1] || (_cache[1] = (...args) => ($options.perPageChanged && $options.perPageChanged(...args))),
+              "aria-controls": "vgt-table"
+            }, [
+              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($data.rowsPerPageOptions, (option, idx) => {
+                return (vue.openBlock(), vue.createElementBlock("option", {
+                  key: idx,
+                  value: option
+                }, vue.toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_5$1))
+              }), 128 /* KEYED_FRAGMENT */)),
+              ($props.paginateDropdownAllowAll)
+                ? (vue.openBlock(), vue.createElementBlock("option", {
                     key: 0,
-                    innerHTML: $props.headerRow.label
-                  }, null, 8 /* PROPS */, _hoisted_3$1))
-                : (vue.openBlock(), vue.createElementBlock("span", _hoisted_4$1, vue.toDisplayString($props.headerRow.label), 1 /* TEXT */))
+                    value: $props.total
+                  }, vue.toDisplayString($props.allText), 9 /* TEXT, PROPS */, _hoisted_6$1))
+                : vue.createCommentVNode("v-if", true)
+            ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_4$1), [
+              [vue.vModelSelect, $data.currentPerPage]
             ])
           ])
-        ], 8 /* PROPS */, _hoisted_1$1))
-      : vue.createCommentVNode("v-if", true),
-    vue.createCommentVNode(" if the mode is not span, we display every column "),
-    ($props.headerRow.mode !== 'span' && $props.lineNumbers)
-      ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_5$1))
-      : vue.createCommentVNode("v-if", true),
-    ($props.headerRow.mode !== 'span' && $props.selectable)
-      ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_6$1, [
-          ($props.selectAllByGroup)
-            ? vue.renderSlot(_ctx.$slots, "table-header-group-select", {
-                key: 0,
-                columns: $props.columns,
-                row: $props.headerRow
-              }, () => [
-                vue.createElementVNode("input", {
-                  type: "checkbox",
-                  checked: $options.allSelected,
-                  onChange: _cache[2] || (_cache[2] = $event => ($options.toggleSelectGroup($event)))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$1)
-              ])
-            : vue.createCommentVNode("v-if", true)
         ]))
       : vue.createCommentVNode("v-if", true),
-    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList($props.columns, (column, i) => {
-      return (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: i }, [
-        ($props.headerRow.mode !== 'span' && !column.hidden)
-          ? (vue.openBlock(), vue.createElementBlock("th", {
-              key: 0,
-              class: vue.normalizeClass(["vgt-row-header", $props.getClasses(i, 'td')]),
-              onClick: $event => ($options.columnCollapsable(i) ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {})
-            }, [
-              ($options.columnCollapsable(i))
-                ? (vue.openBlock(), vue.createElementBlock("span", {
-                    key: 0,
-                    class: vue.normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
-                  }, null, 2 /* CLASS */))
-                : vue.createCommentVNode("v-if", true),
-              vue.renderSlot(_ctx.$slots, "table-header-row", {
-                row: $props.headerRow,
-                column: column,
-                formattedRow: $props.formattedRow($props.headerRow, true)
-              }, () => [
-                (!column.html)
-                  ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_9$1, vue.toDisplayString($props.collectFormatted($props.headerRow, column, true)), 1 /* TEXT */))
-                  : vue.createCommentVNode("v-if", true),
-                (column.html)
-                  ? (vue.openBlock(), vue.createElementBlock("span", {
-                      key: 1,
-                      innerHTML: $props.collectFormatted($props.headerRow, column, true)
-                    }, null, 8 /* PROPS */, _hoisted_10$1))
-                  : vue.createCommentVNode("v-if", true)
-              ])
-            ], 10 /* CLASS, PROPS */, _hoisted_8$1))
-          : vue.createCommentVNode("v-if", true)
-      ], 64 /* STABLE_FRAGMENT */))
-    }), 128 /* KEYED_FRAGMENT */))
+    vue.createElementVNode("div", _hoisted_7$1, [
+      vue.createVNode(_component_pagination_page_info, {
+        onPageChanged: $options.changePage,
+        "total-records": $props.total,
+        "last-page": $options.pagesCount,
+        "current-page": $data.currentPage,
+        "current-per-page": $data.currentPerPage,
+        "of-text": $props.ofText,
+        "page-text": $props.pageText,
+        "info-fn": $props.infoFn,
+        mode: $props.mode
+      }, null, 8 /* PROPS */, ["onPageChanged", "total-records", "last-page", "current-page", "current-per-page", "of-text", "page-text", "info-fn", "mode"]),
+      vue.createElementVNode("button", {
+        type: "button",
+        "aria-controls": "vgt-table",
+        class: vue.normalizeClass(["footer__navigation__page-btn", { disabled: !$options.prevIsPossible }]),
+        onClick: _cache[2] || (_cache[2] = vue.withModifiers((...args) => ($options.previousPage && $options.previousPage(...args)), ["prevent","stop"]))
+      }, [
+        vue.createElementVNode("span", {
+          "aria-hidden": "true",
+          class: vue.normalizeClass(["chevron", { 'left': !$props.rtl, 'right': $props.rtl }])
+        }, null, 2 /* CLASS */),
+        vue.createElementVNode("span", null, vue.toDisplayString($props.prevText), 1 /* TEXT */)
+      ], 2 /* CLASS */),
+      vue.createElementVNode("button", {
+        type: "button",
+        "aria-controls": "vgt-table",
+        class: vue.normalizeClass(["footer__navigation__page-btn", { disabled: !$options.nextIsPossible }]),
+        onClick: _cache[3] || (_cache[3] = vue.withModifiers((...args) => ($options.nextPage && $options.nextPage(...args)), ["prevent","stop"]))
+      }, [
+        vue.createElementVNode("span", null, vue.toDisplayString($props.nextText), 1 /* TEXT */),
+        vue.createElementVNode("span", {
+          "aria-hidden": "true",
+          class: vue.normalizeClass(["chevron", { 'right': !$props.rtl, 'left': $props.rtl }])
+        }, null, 2 /* CLASS */)
+      ], 2 /* CLASS */)
+    ])
   ]))
 }
-var VgtHeaderRow = /*#__PURE__*/_export_sfc(_sfc_main$1, [['render',_sfc_render$1]]);
-
-function toInteger(dirtyNumber) {
-  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
-    return NaN;
-  }
-
-  var number = Number(dirtyNumber);
-
-  if (isNaN(number)) {
-    return number;
-  }
-
-  return number < 0 ? Math.ceil(number) : Math.floor(number);
-}
-
-function requiredArgs(required, args) {
-  if (args.length < required) {
-    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
-  }
-}
-
-/**
- * @name toDate
- * @category Common Helpers
- * @summary Convert the given argument to an instance of Date.
- *
- * @description
- * Convert the given argument to an instance of Date.
- *
- * If the argument is an instance of Date, the function returns its clone.
- *
- * If the argument is a number, it is treated as a timestamp.
- *
- * If the argument is none of the above, the function returns Invalid Date.
- *
- * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
- *
- * @param {Date|Number} argument - the value to convert
- * @returns {Date} the parsed date in the local time zone
- * @throws {TypeError} 1 argument required
- *
- * @example
- * // Clone the date:
- * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
- * //=> Tue Feb 11 2014 11:30:30
- *
- * @example
- * // Convert the timestamp to date:
- * const result = toDate(1392098430000)
- * //=> Tue Feb 11 2014 11:30:30
- */
-
-function toDate(argument) {
-  requiredArgs(1, arguments);
-  var argStr = Object.prototype.toString.call(argument); // Clone the date
-
-  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
-    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
-    return new Date(argument.getTime());
-  } else if (typeof argument === 'number' || argStr === '[object Number]') {
-    return new Date(argument);
-  } else {
-    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
-      // eslint-disable-next-line no-console
-      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console
-
-      console.warn(new Error().stack);
-    }
-
-    return new Date(NaN);
-  }
-}
-
-/**
- * @name addMilliseconds
- * @category Millisecond Helpers
- * @summary Add the specified number of milliseconds to the given date.
- *
- * @description
- * Add the specified number of milliseconds to the given date.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {Date|Number} date - the date to be changed
- * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
- * @returns {Date} the new date with the milliseconds added
- * @throws {TypeError} 2 arguments required
- *
- * @example
- * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
- * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
- * //=> Thu Jul 10 2014 12:45:30.750
- */
-
-function addMilliseconds(dirtyDate, dirtyAmount) {
-  requiredArgs(2, arguments);
-  var timestamp = toDate(dirtyDate).getTime();
-  var amount = toInteger(dirtyAmount);
-  return new Date(timestamp + amount);
-}
-
-/**
- * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
- * They usually appear for dates that denote time before the timezones were introduced
- * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
- * and GMT+01:00:00 after that date)
- *
- * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
- * which would lead to incorrect calculations.
- *
- * This function returns the timezone offset in milliseconds that takes seconds in account.
- */
-function getTimezoneOffsetInMilliseconds(date) {
-  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
-  utcDate.setUTCFullYear(date.getFullYear());
-  return date.getTime() - utcDate.getTime();
-}
-
-/**
- * @name compareAsc
- * @category Common Helpers
- * @summary Compare the two dates and return -1, 0 or 1.
- *
- * @description
- * Compare the two dates and return 1 if the first date is after the second,
- * -1 if the first date is before the second or 0 if dates are equal.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {Date|Number} dateLeft - the first date to compare
- * @param {Date|Number} dateRight - the second date to compare
- * @returns {Number} the result of the comparison
- * @throws {TypeError} 2 arguments required
- *
- * @example
- * // Compare 11 February 1987 and 10 July 1989:
- * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
- * //=> -1
- *
- * @example
- * // Sort the array of dates:
- * const result = [
- *   new Date(1995, 6, 2),
- *   new Date(1987, 1, 11),
- *   new Date(1989, 6, 10)
- * ].sort(compareAsc)
- * //=> [
- * //   Wed Feb 11 1987 00:00:00,
- * //   Mon Jul 10 1989 00:00:00,
- * //   Sun Jul 02 1995 00:00:00
- * // ]
- */
-
-function compareAsc(dirtyDateLeft, dirtyDateRight) {
-  requiredArgs(2, arguments);
-  var dateLeft = toDate(dirtyDateLeft);
-  var dateRight = toDate(dirtyDateRight);
-  var diff = dateLeft.getTime() - dateRight.getTime();
-
-  if (diff < 0) {
-    return -1;
-  } else if (diff > 0) {
-    return 1; // Return 0 if diff is 0; return NaN if diff is NaN
-  } else {
-    return diff;
-  }
-}
+var VgtPagination = /*#__PURE__*/_export_sfc(_sfc_main$1, [['render',_sfc_render$1]]);
 
-/**
- * @name isDate
- * @category Common Helpers
- * @summary Is the given value a date?
- *
- * @description
- * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {*} value - the value to check
- * @returns {boolean} true if the given value is a date
- * @throws {TypeError} 1 arguments required
- *
- * @example
- * // For a valid date:
- * const result = isDate(new Date())
- * //=> true
- *
- * @example
- * // For an invalid date:
- * const result = isDate(new Date(NaN))
- * //=> true
- *
- * @example
- * // For some value:
- * const result = isDate('2014-02-31')
- * //=> false
- *
- * @example
- * // For an object:
- * const result = isDate({})
- * //=> false
- */
-
-function isDate(value) {
-  requiredArgs(1, arguments);
-  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
-}
-
-/**
- * @name isValid
- * @category Common Helpers
- * @summary Is the given date valid?
- *
- * @description
- * Returns false if argument is Invalid Date and true otherwise.
- * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
- * Invalid Date is a Date, whose time value is NaN.
- *
- * Time value of Date: http://es5.github.io/#x15.9.1.1
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - Now `isValid` doesn't throw an exception
- *   if the first argument is not an instance of Date.
- *   Instead, argument is converted beforehand using `toDate`.
- *
- *   Examples:
- *
- *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
- *   |---------------------------|---------------|---------------|
- *   | `new Date()`              | `true`        | `true`        |
- *   | `new Date('2016-01-01')`  | `true`        | `true`        |
- *   | `new Date('')`            | `false`       | `false`       |
- *   | `new Date(1488370835081)` | `true`        | `true`        |
- *   | `new Date(NaN)`           | `false`       | `false`       |
- *   | `'2016-01-01'`            | `TypeError`   | `false`       |
- *   | `''`                      | `TypeError`   | `false`       |
- *   | `1488370835081`           | `TypeError`   | `true`        |
- *   | `NaN`                     | `TypeError`   | `false`       |
- *
- *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
- *   that try to coerce arguments to the expected type
- *   (which is also the case with other *date-fns* functions).
- *
- * @param {*} date - the date to check
- * @returns {Boolean} the date is valid
- * @throws {TypeError} 1 argument required
- *
- * @example
- * // For the valid date:
- * const result = isValid(new Date(2014, 1, 31))
- * //=> true
- *
- * @example
- * // For the value, convertable into a date:
- * const result = isValid(1393804800000)
- * //=> true
- *
- * @example
- * // For the invalid date:
- * const result = isValid(new Date(''))
- * //=> false
- */
-
-function isValid(dirtyDate) {
-  requiredArgs(1, arguments);
-
-  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
-    return false;
-  }
-
-  var date = toDate(dirtyDate);
-  return !isNaN(Number(date));
-}
-
-var formatDistanceLocale = {
-  lessThanXSeconds: {
-    one: 'less than a second',
-    other: 'less than {{count}} seconds'
-  },
-  xSeconds: {
-    one: '1 second',
-    other: '{{count}} seconds'
-  },
-  halfAMinute: 'half a minute',
-  lessThanXMinutes: {
-    one: 'less than a minute',
-    other: 'less than {{count}} minutes'
-  },
-  xMinutes: {
-    one: '1 minute',
-    other: '{{count}} minutes'
-  },
-  aboutXHours: {
-    one: 'about 1 hour',
-    other: 'about {{count}} hours'
-  },
-  xHours: {
-    one: '1 hour',
-    other: '{{count}} hours'
-  },
-  xDays: {
-    one: '1 day',
-    other: '{{count}} days'
-  },
-  aboutXWeeks: {
-    one: 'about 1 week',
-    other: 'about {{count}} weeks'
-  },
-  xWeeks: {
-    one: '1 week',
-    other: '{{count}} weeks'
-  },
-  aboutXMonths: {
-    one: 'about 1 month',
-    other: 'about {{count}} months'
-  },
-  xMonths: {
-    one: '1 month',
-    other: '{{count}} months'
-  },
-  aboutXYears: {
-    one: 'about 1 year',
-    other: 'about {{count}} years'
-  },
-  xYears: {
-    one: '1 year',
-    other: '{{count}} years'
-  },
-  overXYears: {
-    one: 'over 1 year',
-    other: 'over {{count}} years'
-  },
-  almostXYears: {
-    one: 'almost 1 year',
-    other: 'almost {{count}} years'
-  }
-};
-
-var formatDistance = function (token, count, options) {
-  var result;
-  var tokenValue = formatDistanceLocale[token];
-
-  if (typeof tokenValue === 'string') {
-    result = tokenValue;
-  } else if (count === 1) {
-    result = tokenValue.one;
-  } else {
-    result = tokenValue.other.replace('{{count}}', count.toString());
-  }
-
-  if (options !== null && options !== void 0 && options.addSuffix) {
-    if (options.comparison && options.comparison > 0) {
-      return 'in ' + result;
-    } else {
-      return result + ' ago';
-    }
-  }
-
-  return result;
-};
-
-var formatDistance$1 = formatDistance;
-
-function buildFormatLongFn(args) {
-  return function () {
-    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
-    // TODO: Remove String()
-    var width = options.width ? String(options.width) : args.defaultWidth;
-    var format = args.formats[width] || args.formats[args.defaultWidth];
-    return format;
-  };
-}
-
-var dateFormats = {
-  full: 'EEEE, MMMM do, y',
-  long: 'MMMM do, y',
-  medium: 'MMM d, y',
-  short: 'MM/dd/yyyy'
-};
-var timeFormats = {
-  full: 'h:mm:ss a zzzz',
-  long: 'h:mm:ss a z',
-  medium: 'h:mm:ss a',
-  short: 'h:mm a'
-};
-var dateTimeFormats = {
-  full: "{{date}} 'at' {{time}}",
-  long: "{{date}} 'at' {{time}}",
-  medium: '{{date}}, {{time}}',
-  short: '{{date}}, {{time}}'
-};
-var formatLong = {
-  date: buildFormatLongFn({
-    formats: dateFormats,
-    defaultWidth: 'full'
-  }),
-  time: buildFormatLongFn({
-    formats: timeFormats,
-    defaultWidth: 'full'
-  }),
-  dateTime: buildFormatLongFn({
-    formats: dateTimeFormats,
-    defaultWidth: 'full'
-  })
-};
-var formatLong$1 = formatLong;
-
-var formatRelativeLocale = {
-  lastWeek: "'last' eeee 'at' p",
-  yesterday: "'yesterday at' p",
-  today: "'today at' p",
-  tomorrow: "'tomorrow at' p",
-  nextWeek: "eeee 'at' p",
-  other: 'P'
-};
-
-var formatRelative = function (token, _date, _baseDate, _options) {
-  return formatRelativeLocale[token];
+// all diacritics
+let diacritics = {
+  a: [
+    "a",
+    "à",
+    "á",
+    "â",
+    "ã",
+    "ä",
+    "å",
+    "æ",
+    "ā",
+    "ă",
+    "ą",
+    "ǎ",
+    "ǟ",
+    "ǡ",
+    "ǻ",
+    "ȁ",
+    "ȃ",
+    "ȧ",
+    "ɐ",
+    "ɑ",
+    "ɒ",
+    "ͣ",
+    "а",
+    "ӑ",
+    "ӓ",
+    "ᵃ",
+    "ᵄ",
+    "ᶏ",
+    "ḁ",
+    "ẚ",
+    "ạ",
+    "ả",
+    "ấ",
+    "ầ",
+    "ẩ",
+    "ẫ",
+    "ậ",
+    "ắ",
+    "ằ",
+    "ẳ",
+    "ẵ",
+    "ặ",
+    "ₐ",
+    "ⱥ",
+    "ａ",
+  ],
+  b: ["b", "ƀ", "ƃ", "ɓ", "ᖯ", "ᵇ", "ᵬ", "ᶀ", "ḃ", "ḅ", "ḇ", "ｂ"],
+  c: ["c", "ç", "ć", "ĉ", "ċ", "č", "ƈ", "ȼ", "ɕ", "ͨ", "ᴄ", "ᶜ", "ḉ", "ↄ", "ｃ"],
+  d: [
+    "d",
+    "ď",
+    "đ",
+    "Ƌ",
+    "ƌ",
+    "ȡ",
+    "ɖ",
+    "ɗ",
+    "ͩ",
+    "ᵈ",
+    "ᵭ",
+    "ᶁ",
+    "ᶑ",
+    "ḋ",
+    "ḍ",
+    "ḏ",
+    "ḑ",
+    "ḓ",
+    "ｄ",
+  ],
+  e: [
+    "e",
+    "è",
+    "é",
+    "ê",
+    "ë",
+    "ē",
+    "ĕ",
+    "ė",
+    "ę",
+    "ě",
+    "ǝ",
+    "ȅ",
+    "ȇ",
+    "ȩ",
+    "ɇ",
+    "ɘ",
+    "ͤ",
+    "ᵉ",
+    "ᶒ",
+    "ḕ",
+    "ḗ",
+    "ḙ",
+    "ḛ",
+    "ḝ",
+    "ẹ",
+    "ẻ",
+    "ẽ",
+    "ế",
+    "ề",
+    "ể",
+    "ễ",
+    "ệ",
+    "ₑ",
+    "ｅ",
+  ],
+  f: ["f", "ƒ", "ᵮ", "ᶂ", "ᶠ", "ḟ", "ｆ"],
+  g: ["g", "ĝ", "ğ", "ġ", "ģ", "ǥ", "ǧ", "ǵ", "ɠ", "ɡ", "ᵍ", "ᵷ", "ᵹ", "ᶃ", "ᶢ", "ḡ", "ｇ"],
+  h: [
+    "h",
+    "ĥ",
+    "ħ",
+    "ƕ",
+    "ȟ",
+    "ɥ",
+    "ɦ",
+    "ʮ",
+    "ʯ",
+    "ʰ",
+    "ʱ",
+    "ͪ",
+    "Һ",
+    "һ",
+    "ᑋ",
+    "ᶣ",
+    "ḣ",
+    "ḥ",
+    "ḧ",
+    "ḩ",
+    "ḫ",
+    "ⱨ",
+    "ｈ",
+  ],
+  i: [
+    "i",
+    "ì",
+    "í",
+    "î",
+    "ï",
+    "ĩ",
+    "ī",
+    "ĭ",
+    "į",
+    "ǐ",
+    "ȉ",
+    "ȋ",
+    "ɨ",
+    "ͥ",
+    "ᴉ",
+    "ᵎ",
+    "ᵢ",
+    "ᶖ",
+    "ᶤ",
+    "ḭ",
+    "ḯ",
+    "ỉ",
+    "ị",
+    "ｉ",
+  ],
+  j: ["j", "ĵ", "ǰ", "ɉ", "ʝ", "ʲ", "ᶡ", "ᶨ", "ｊ"],
+  k: ["k", "ķ", "ƙ", "ǩ", "ʞ", "ᵏ", "ᶄ", "ḱ", "ḳ", "ḵ", "ⱪ", "ｋ"],
+  l: [
+    "l",
+    "ĺ",
+    "ļ",
+    "ľ",
+    "ŀ",
+    "ł",
+    "ƚ",
+    "ȴ",
+    "ɫ",
+    "ɬ",
+    "ɭ",
+    "ˡ",
+    "ᶅ",
+    "ᶩ",
+    "ᶪ",
+    "ḷ",
+    "ḹ",
+    "ḻ",
+    "ḽ",
+    "ℓ",
+    "ⱡ",
+  ],
+  m: ["m", "ɯ", "ɰ", "ɱ", "ͫ", "ᴟ", "ᵐ", "ᵚ", "ᵯ", "ᶆ", "ᶬ", "ᶭ", "ḿ", "ṁ", "ṃ", "㎡", "㎥", "ｍ"],
+  n: [
+    "n",
+    "ñ",
+    "ń",
+    "ņ",
+    "ň",
+    "ŉ",
+    "ƞ",
+    "ǹ",
+    "ȵ",
+    "ɲ",
+    "ɳ",
+    "ᵰ",
+    "ᶇ",
+    "ᶮ",
+    "ᶯ",
+    "ṅ",
+    "ṇ",
+    "ṉ",
+    "ṋ",
+    "ⁿ",
+    "ｎ",
+  ],
+  o: [
+    "o",
+    "ò",
+    "ó",
+    "ô",
+    "õ",
+    "ö",
+    "ø",
+    "ō",
+    "ŏ",
+    "ő",
+    "ơ",
+    "ǒ",
+    "ǫ",
+    "ǭ",
+    "ǿ",
+    "ȍ",
+    "ȏ",
+    "ȫ",
+    "ȭ",
+    "ȯ",
+    "ȱ",
+    "ɵ",
+    "ͦ",
+    "о",
+    "ӧ",
+    "ө",
+    "ᴏ",
+    "ᴑ",
+    "ᴓ",
+    "ᴼ",
+    "ᵒ",
+    "ᶱ",
+    "ṍ",
+    "ṏ",
+    "ṑ",
+    "ṓ",
+    "ọ",
+    "ỏ",
+    "ố",
+    "ồ",
+    "ổ",
+    "ỗ",
+    "ộ",
+    "ớ",
+    "ờ",
+    "ở",
+    "ỡ",
+    "ợ",
+    "ₒ",
+    "ｏ",
+    "𐐬",
+  ],
+  p: ["p", "ᵖ", "ᵱ", "ᵽ", "ᶈ", "ṕ", "ṗ", "ｐ"],
+  q: ["q", "ɋ", "ʠ", "ᛩ", "ｑ"],
+  r: [
+    "r",
+    "ŕ",
+    "ŗ",
+    "ř",
+    "ȑ",
+    "ȓ",
+    "ɍ",
+    "ɹ",
+    "ɻ",
+    "ʳ",
+    "ʴ",
+    "ʵ",
+    "ͬ",
+    "ᵣ",
+    "ᵲ",
+    "ᶉ",
+    "ṙ",
+    "ṛ",
+    "ṝ",
+    "ṟ",
+  ],
+  s: ["s", "ś", "ŝ", "ş", "š", "ș", "ʂ", "ᔆ", "ᶊ", "ṡ", "ṣ", "ṥ", "ṧ", "ṩ", "ｓ"],
+  t: [
+    "t",
+    "ţ",
+    "ť",
+    "ŧ",
+    "ƫ",
+    "ƭ",
+    "ț",
+    "ʇ",
+    "ͭ",
+    "ᵀ",
+    "ᵗ",
+    "ᵵ",
+    "ᶵ",
+    "ṫ",
+    "ṭ",
+    "ṯ",
+    "ṱ",
+    "ẗ",
+    "ｔ",
+  ],
+  u: [
+    "u",
+    "ù",
+    "ú",
+    "û",
+    "ü",
+    "ũ",
+    "ū",
+    "ŭ",
+    "ů",
+    "ű",
+    "ų",
+    "ư",
+    "ǔ",
+    "ǖ",
+    "ǘ",
+    "ǚ",
+    "ǜ",
+    "ȕ",
+    "ȗ",
+    "ͧ",
+    "ߎ",
+    "ᵘ",
+    "ᵤ",
+    "ṳ",
+    "ṵ",
+    "ṷ",
+    "ṹ",
+    "ṻ",
+    "ụ",
+    "ủ",
+    "ứ",
+    "ừ",
+    "ử",
+    "ữ",
+    "ự",
+    "ｕ",
+  ],
+  v: ["v", "ʋ", "ͮ", "ᵛ", "ᵥ", "ᶹ", "ṽ", "ṿ", "ⱱ", "ｖ", "ⱴ"],
+  w: ["w", "ŵ", "ʷ", "ᵂ", "ẁ", "ẃ", "ẅ", "ẇ", "ẉ", "ẘ", "ⱳ", "ｗ"],
+  x: ["x", "̽", "͓", "ᶍ", "ͯ", "ẋ", "ẍ", "ₓ", "ｘ"],
+  y: ["y", "ý", "ÿ", "ŷ", "ȳ", "ɏ", "ʸ", "ẏ", "ỳ", "ỵ", "ỷ", "ỹ", "ｙ"],
+  z: [
+    "z",
+    "ź",
+    "ż",
+    "ž",
+    "ƶ",
+    "ȥ",
+    "ɀ",
+    "ʐ",
+    "ʑ",
+    "ᙆ",
+    "ᙇ",
+    "ᶻ",
+    "ᶼ",
+    "ᶽ",
+    "ẑ",
+    "ẓ",
+    "ẕ",
+    "ⱬ",
+    "ｚ",
+  ],
 };
 
-var formatRelative$1 = formatRelative;
-
-function buildLocalizeFn(args) {
-  return function (dirtyIndex, dirtyOptions) {
-    var options = dirtyOptions || {};
-    var context = options.context ? String(options.context) : 'standalone';
-    var valuesArray;
+// Precompiled Object with { key = Diacritic, value = real-Character }
+const compiledDiactitics = (function() {
+  let x = {};
 
-    if (context === 'formatting' && args.formattingValues) {
-      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
-      var width = options.width ? String(options.width) : defaultWidth;
-      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
-    } else {
-      var _defaultWidth = args.defaultWidth;
+  for (let key in diacritics) {
+    let ok = diacritics[key];
 
-      var _width = options.width ? String(options.width) : args.defaultWidth;
+    for (let rval in ok) {
+      let val = ok[rval];
 
-      valuesArray = args.values[_width] || args.values[_defaultWidth];
+      // Do not replace the char with itself
+      if (val !== key) {
+        x[val] = key;
+      }
     }
+  }
 
-    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
-
-    return valuesArray[index];
-  };
-}
+  return x;
+})();
 
-var eraValues = {
-  narrow: ['B', 'A'],
-  abbreviated: ['BC', 'AD'],
-  wide: ['Before Christ', 'Anno Domini']
-};
-var quarterValues = {
-  narrow: ['1', '2', '3', '4'],
-  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
-  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
-}; // Note: in English, the names of days of the week and months are capitalized.
-// If you are making a new locale based on this one, check if the same is true for the language you're working on.
-// Generally, formatted dates should look like they are in the middle of a sentence,
-// e.g. in Spanish language the weekdays and months should be in the lowercase.
+// Regex for detecting non-ASCII-Characters in String
+const regexNonASCII = /[^a-z0-9\s,.-]/;
 
-var monthValues = {
-  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
-  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
-  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
-};
-var dayValues = {
-  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
-  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
-  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
-  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
-};
-var dayPeriodValues = {
-  narrow: {
-    am: 'a',
-    pm: 'p',
-    midnight: 'mi',
-    noon: 'n',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  },
-  abbreviated: {
-    am: 'AM',
-    pm: 'PM',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  },
-  wide: {
-    am: 'a.m.',
-    pm: 'p.m.',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  }
-};
-var formattingDayPeriodValues = {
-  narrow: {
-    am: 'a',
-    pm: 'p',
-    midnight: 'mi',
-    noon: 'n',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
-  },
-  abbreviated: {
-    am: 'AM',
-    pm: 'PM',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
-  },
-  wide: {
-    am: 'a.m.',
-    pm: 'p.m.',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
+/*
+ * Main function of the module which removes all diacritics from the received text
+ */
+const diacriticless = (text) => {
+  // When there are only ascii-Characters in the string, skip processing and return text right away
+  if (text.search(regexNonASCII) === -1) {
+    return text;
   }
-};
 
-var ordinalNumber = function (dirtyNumber, _options) {
-  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
-  // if they are different for different grammatical genders,
-  // use `options.unit`.
-  //
-  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
-  // 'day', 'hour', 'minute', 'second'.
+  let result = "";
 
-  var rem100 = number % 100;
+  let len = text.length;
+  for (var i = 0; i < len; i++) {
+    let searchChar = text.charAt(i);
 
-  if (rem100 > 20 || rem100 < 10) {
-    switch (rem100 % 10) {
-      case 1:
-        return number + 'st';
+    // If applicable replace the diacritic character with the real one or use the original value
+    result += searchChar in compiledDiactitics ? compiledDiactitics[searchChar] : searchChar;
+  }
 
-      case 2:
-        return number + 'nd';
+  return result;
+};
 
-      case 3:
-        return number + 'rd';
+const escapeRegExp = str => str.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
+
+var defaultType = {
+  format(x) {
+    return x;
+  },
+  filterPredicate(rowval, filter, skipDiacritics = false, fromDropdown = false) {
+    // take care of nulls
+    if (typeof rowval === 'undefined' || rowval === null) {
+      return false;
     }
-  }
 
-  return number + 'th';
-};
+    // row value
+    const rowValue = skipDiacritics
+      ? String(rowval).toLowerCase()
+      : diacriticless(escapeRegExp(String(rowval)).toLowerCase());
 
-var localize = {
-  ordinalNumber: ordinalNumber,
-  era: buildLocalizeFn({
-    values: eraValues,
-    defaultWidth: 'wide'
-  }),
-  quarter: buildLocalizeFn({
-    values: quarterValues,
-    defaultWidth: 'wide',
-    argumentCallback: function (quarter) {
-      return quarter - 1;
+    // search term
+    const searchTerm = skipDiacritics
+      ? filter.toLowerCase()
+      : diacriticless(escapeRegExp(filter).toLowerCase());
+
+    // comparison
+    return fromDropdown ? rowValue === searchTerm : (rowValue.indexOf(searchTerm) > -1);
+  },
+
+  compare(x, y) {
+    function cook(d) {
+      if (typeof d === 'undefined' || d === null) return '';
+      return diacriticless(String(d).toLowerCase());
     }
-  }),
-  month: buildLocalizeFn({
-    values: monthValues,
-    defaultWidth: 'wide'
-  }),
-  day: buildLocalizeFn({
-    values: dayValues,
-    defaultWidth: 'wide'
-  }),
-  dayPeriod: buildLocalizeFn({
-    values: dayPeriodValues,
-    defaultWidth: 'wide',
-    formattingValues: formattingDayPeriodValues,
-    defaultFormattingWidth: 'wide'
-  })
+    x = cook(x);
+    y = cook(y);
+    if (x < y) return -1;
+    if (x > y) return 1;
+    return 0;
+  },
 };
-var localize$1 = localize;
 
-function buildMatchFn(args) {
-  return function (string) {
-    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-    var width = options.width;
-    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
-    var matchResult = string.match(matchPattern);
+function _typeof(o) {
+  "@babel/helpers - typeof";
 
-    if (!matchResult) {
-      return null;
-    }
+  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
+    return typeof o;
+  } : function (o) {
+    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
+  }, _typeof(o);
+}
 
-    var matchedString = matchResult[0];
-    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
-    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
-      return pattern.test(matchedString);
-    }) : findKey(parsePatterns, function (pattern) {
-      return pattern.test(matchedString);
-    });
-    var value;
-    value = args.valueCallback ? args.valueCallback(key) : key;
-    value = options.valueCallback ? options.valueCallback(value) : value;
-    var rest = string.slice(matchedString.length);
-    return {
-      value: value,
-      rest: rest
-    };
-  };
+function toInteger(dirtyNumber) {
+  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
+    return NaN;
+  }
+  var number = Number(dirtyNumber);
+  if (isNaN(number)) {
+    return number;
+  }
+  return number < 0 ? Math.ceil(number) : Math.floor(number);
 }
 
-function findKey(object, predicate) {
-  for (var key in object) {
-    if (object.hasOwnProperty(key) && predicate(object[key])) {
-      return key;
+function requiredArgs(required, args) {
+  if (args.length < required) {
+    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
+  }
+}
+
+/**
+ * @name toDate
+ * @category Common Helpers
+ * @summary Convert the given argument to an instance of Date.
+ *
+ * @description
+ * Convert the given argument to an instance of Date.
+ *
+ * If the argument is an instance of Date, the function returns its clone.
+ *
+ * If the argument is a number, it is treated as a timestamp.
+ *
+ * If the argument is none of the above, the function returns Invalid Date.
+ *
+ * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
+ *
+ * @param {Date|Number} argument - the value to convert
+ * @returns {Date} the parsed date in the local time zone
+ * @throws {TypeError} 1 argument required
+ *
+ * @example
+ * // Clone the date:
+ * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
+ * //=> Tue Feb 11 2014 11:30:30
+ *
+ * @example
+ * // Convert the timestamp to date:
+ * const result = toDate(1392098430000)
+ * //=> Tue Feb 11 2014 11:30:30
+ */
+function toDate(argument) {
+  requiredArgs(1, arguments);
+  var argStr = Object.prototype.toString.call(argument);
+
+  // Clone the date
+  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
+    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
+    return new Date(argument.getTime());
+  } else if (typeof argument === 'number' || argStr === '[object Number]') {
+    return new Date(argument);
+  } else {
+    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
+      // eslint-disable-next-line no-console
+      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
+      // eslint-disable-next-line no-console
+      console.warn(new Error().stack);
     }
+    return new Date(NaN);
   }
+}
 
-  return undefined;
+/**
+ * @name addMilliseconds
+ * @category Millisecond Helpers
+ * @summary Add the specified number of milliseconds to the given date.
+ *
+ * @description
+ * Add the specified number of milliseconds to the given date.
+ *
+ * @param {Date|Number} date - the date to be changed
+ * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
+ * @returns {Date} the new date with the milliseconds added
+ * @throws {TypeError} 2 arguments required
+ *
+ * @example
+ * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
+ * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
+ * //=> Thu Jul 10 2014 12:45:30.750
+ */
+function addMilliseconds(dirtyDate, dirtyAmount) {
+  requiredArgs(2, arguments);
+  var timestamp = toDate(dirtyDate).getTime();
+  var amount = toInteger(dirtyAmount);
+  return new Date(timestamp + amount);
 }
 
-function findIndex(array, predicate) {
-  for (var key = 0; key < array.length; key++) {
-    if (predicate(array[key])) {
-      return key;
-    }
+var defaultOptions = {};
+function getDefaultOptions() {
+  return defaultOptions;
+}
+
+/**
+ * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
+ * They usually appear for dates that denote time before the timezones were introduced
+ * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
+ * and GMT+01:00:00 after that date)
+ *
+ * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
+ * which would lead to incorrect calculations.
+ *
+ * This function returns the timezone offset in milliseconds that takes seconds in account.
+ */
+function getTimezoneOffsetInMilliseconds(date) {
+  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
+  utcDate.setUTCFullYear(date.getFullYear());
+  return date.getTime() - utcDate.getTime();
+}
+
+/**
+ * @name compareAsc
+ * @category Common Helpers
+ * @summary Compare the two dates and return -1, 0 or 1.
+ *
+ * @description
+ * Compare the two dates and return 1 if the first date is after the second,
+ * -1 if the first date is before the second or 0 if dates are equal.
+ *
+ * @param {Date|Number} dateLeft - the first date to compare
+ * @param {Date|Number} dateRight - the second date to compare
+ * @returns {Number} the result of the comparison
+ * @throws {TypeError} 2 arguments required
+ *
+ * @example
+ * // Compare 11 February 1987 and 10 July 1989:
+ * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
+ * //=> -1
+ *
+ * @example
+ * // Sort the array of dates:
+ * const result = [
+ *   new Date(1995, 6, 2),
+ *   new Date(1987, 1, 11),
+ *   new Date(1989, 6, 10)
+ * ].sort(compareAsc)
+ * //=> [
+ * //   Wed Feb 11 1987 00:00:00,
+ * //   Mon Jul 10 1989 00:00:00,
+ * //   Sun Jul 02 1995 00:00:00
+ * // ]
+ */
+function compareAsc(dirtyDateLeft, dirtyDateRight) {
+  requiredArgs(2, arguments);
+  var dateLeft = toDate(dirtyDateLeft);
+  var dateRight = toDate(dirtyDateRight);
+  var diff = dateLeft.getTime() - dateRight.getTime();
+  if (diff < 0) {
+    return -1;
+  } else if (diff > 0) {
+    return 1;
+    // Return 0 if diff is 0; return NaN if diff is NaN
+  } else {
+    return diff;
   }
+}
+
+/**
+ * Days in 1 week.
+ *
+ * @name daysInWeek
+ * @constant
+ * @type {number}
+ * @default
+ */
+
+/**
+ * Milliseconds in 1 minute
+ *
+ * @name millisecondsInMinute
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInMinute = 60000;
 
-  return undefined;
-}
+/**
+ * Milliseconds in 1 hour
+ *
+ * @name millisecondsInHour
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInHour = 3600000;
 
-function buildMatchPatternFn(args) {
-  return function (string) {
-    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-    var matchResult = string.match(args.matchPattern);
-    if (!matchResult) return null;
-    var matchedString = matchResult[0];
-    var parseResult = string.match(args.parsePattern);
-    if (!parseResult) return null;
-    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
-    value = options.valueCallback ? options.valueCallback(value) : value;
-    var rest = string.slice(matchedString.length);
-    return {
-      value: value,
-      rest: rest
-    };
-  };
-}
+/**
+ * Milliseconds in 1 second
+ *
+ * @name millisecondsInSecond
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInSecond = 1000;
 
-var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
-var parseOrdinalNumberPattern = /\d+/i;
-var matchEraPatterns = {
-  narrow: /^(b|a)/i,
-  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
-  wide: /^(before christ|before common era|anno domini|common era)/i
-};
-var parseEraPatterns = {
-  any: [/^b/i, /^(a|c)/i]
-};
-var matchQuarterPatterns = {
-  narrow: /^[1234]/i,
-  abbreviated: /^q[1234]/i,
-  wide: /^[1234](th|st|nd|rd)? quarter/i
-};
-var parseQuarterPatterns = {
-  any: [/1/i, /2/i, /3/i, /4/i]
-};
-var matchMonthPatterns = {
-  narrow: /^[jfmasond]/i,
-  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
-  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
-};
-var parseMonthPatterns = {
-  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
-  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
-};
-var matchDayPatterns = {
-  narrow: /^[smtwf]/i,
-  short: /^(su|mo|tu|we|th|fr|sa)/i,
-  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
-  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
-};
-var parseDayPatterns = {
-  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
-  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
-};
-var matchDayPeriodPatterns = {
-  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
-  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
-};
-var parseDayPeriodPatterns = {
-  any: {
-    am: /^a/i,
-    pm: /^p/i,
-    midnight: /^mi/i,
-    noon: /^no/i,
-    morning: /morning/i,
-    afternoon: /afternoon/i,
-    evening: /evening/i,
-    night: /night/i
-  }
-};
-var match = {
-  ordinalNumber: buildMatchPatternFn({
-    matchPattern: matchOrdinalNumberPattern,
-    parsePattern: parseOrdinalNumberPattern,
-    valueCallback: function (value) {
-      return parseInt(value, 10);
-    }
-  }),
-  era: buildMatchFn({
-    matchPatterns: matchEraPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseEraPatterns,
-    defaultParseWidth: 'any'
-  }),
-  quarter: buildMatchFn({
-    matchPatterns: matchQuarterPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseQuarterPatterns,
-    defaultParseWidth: 'any',
-    valueCallback: function (index) {
-      return index + 1;
-    }
-  }),
-  month: buildMatchFn({
-    matchPatterns: matchMonthPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseMonthPatterns,
-    defaultParseWidth: 'any'
-  }),
-  day: buildMatchFn({
-    matchPatterns: matchDayPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseDayPatterns,
-    defaultParseWidth: 'any'
-  }),
-  dayPeriod: buildMatchFn({
-    matchPatterns: matchDayPeriodPatterns,
-    defaultMatchWidth: 'any',
-    parsePatterns: parseDayPeriodPatterns,
-    defaultParseWidth: 'any'
-  })
-};
-var match$1 = match;
+/**
+ * @name isDate
+ * @category Common Helpers
+ * @summary Is the given value a date?
+ *
+ * @description
+ * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
+ *
+ * @param {*} value - the value to check
+ * @returns {boolean} true if the given value is a date
+ * @throws {TypeError} 1 arguments required
+ *
+ * @example
+ * // For a valid date:
+ * const result = isDate(new Date())
+ * //=> true
+ *
+ * @example
+ * // For an invalid date:
+ * const result = isDate(new Date(NaN))
+ * //=> true
+ *
+ * @example
+ * // For some value:
+ * const result = isDate('2014-02-31')
+ * //=> false
+ *
+ * @example
+ * // For an object:
+ * const result = isDate({})
+ * //=> false
+ */
+function isDate(value) {
+  requiredArgs(1, arguments);
+  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
+}
 
 /**
- * @type {Locale}
- * @category Locales
- * @summary English locale (United States).
- * @language English
- * @iso-639-2 eng
- * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
- * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
+ * @name isValid
+ * @category Common Helpers
+ * @summary Is the given date valid?
+ *
+ * @description
+ * Returns false if argument is Invalid Date and true otherwise.
+ * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
+ * Invalid Date is a Date, whose time value is NaN.
+ *
+ * Time value of Date: http://es5.github.io/#x15.9.1.1
+ *
+ * @param {*} date - the date to check
+ * @returns {Boolean} the date is valid
+ * @throws {TypeError} 1 argument required
+ *
+ * @example
+ * // For the valid date:
+ * const result = isValid(new Date(2014, 1, 31))
+ * //=> true
+ *
+ * @example
+ * // For the value, convertable into a date:
+ * const result = isValid(1393804800000)
+ * //=> true
+ *
+ * @example
+ * // For the invalid date:
+ * const result = isValid(new Date(''))
+ * //=> false
  */
-var locale = {
-  code: 'en-US',
-  formatDistance: formatDistance$1,
-  formatLong: formatLong$1,
-  formatRelative: formatRelative$1,
-  localize: localize$1,
-  match: match$1,
-  options: {
-    weekStartsOn: 0
-    /* Sunday */
-    ,
-    firstWeekContainsDate: 1
+function isValid(dirtyDate) {
+  requiredArgs(1, arguments);
+  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
+    return false;
   }
-};
-var defaultLocale = locale;
+  var date = toDate(dirtyDate);
+  return !isNaN(Number(date));
+}
 
 /**
  * @name subMilliseconds
@@ -4458,10 +3957,6 @@ var defaultLocale = locale;
  * @description
  * Subtract the specified number of milliseconds from the given date.
  *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
  * @param {Date|Number} date - the date to be changed
  * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
  * @returns {Date} the new date with the milliseconds subtracted
@@ -4472,16 +3967,13 @@ var defaultLocale = locale;
  * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
  * //=> Thu Jul 10 2014 12:45:29.250
  */
-
 function subMilliseconds(dirtyDate, dirtyAmount) {
   requiredArgs(2, arguments);
   var amount = toInteger(dirtyAmount);
   return addMilliseconds(dirtyDate, -amount);
 }
 
-var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_DAY = 86400000;
 function getUTCDayOfYear(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
@@ -4493,8 +3985,6 @@ function getUTCDayOfYear(dirtyDate) {
   return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function startOfUTCISOWeek(dirtyDate) {
   requiredArgs(1, arguments);
   var weekStartsOn = 1;
@@ -4506,8 +3996,6 @@ function startOfUTCISOWeek(dirtyDate) {
   return date;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function getUTCISOWeekYear(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
@@ -4520,7 +4008,6 @@ function getUTCISOWeekYear(dirtyDate) {
   fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
   fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
   var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
-
   if (date.getTime() >= startOfNextYear.getTime()) {
     return year + 1;
   } else if (date.getTime() >= startOfThisYear.getTime()) {
@@ -4530,8 +4017,6 @@ function getUTCISOWeekYear(dirtyDate) {
   }
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function startOfUTCISOWeekYear(dirtyDate) {
   requiredArgs(1, arguments);
   var year = getUTCISOWeekYear(dirtyDate);
@@ -4542,33 +4027,28 @@ function startOfUTCISOWeekYear(dirtyDate) {
   return date;
 }
 
-var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_WEEK$1 = 604800000;
 function getUTCISOWeek(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
-  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
+  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
+
+  // Round the number of days to the nearest integer
   // because the number of milliseconds in a week is not constant
   // (e.g. it's different in the week of the daylight saving time clock shift)
-
   return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function startOfUTCWeek(dirtyDate, dirtyOptions) {
+function startOfUTCWeek(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
 
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   var date = toDate(dirtyDate);
   var day = date.getUTCDay();
   var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
@@ -4577,31 +4057,26 @@ function startOfUTCWeek(dirtyDate, dirtyOptions) {
   return date;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function getUTCWeekYear(dirtyDate, dirtyOptions) {
+function getUTCWeekYear(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
   var year = date.getUTCFullYear();
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
 
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
-
   var firstWeekOfNextYear = new Date(0);
   firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
   firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
-  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
+  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
   var firstWeekOfThisYear = new Date(0);
   firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
   firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
-  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
-
+  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
   if (date.getTime() >= startOfNextYear.getTime()) {
     return year + 1;
   } else if (date.getTime() >= startOfThisYear.getTime()) {
@@ -4611,44 +4086,37 @@ function getUTCWeekYear(dirtyDate, dirtyOptions) {
   }
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
+function startOfUTCWeekYear(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
-  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
+  var defaultOptions = getDefaultOptions();
+  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
+  var year = getUTCWeekYear(dirtyDate, options);
   var firstWeek = new Date(0);
   firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
   firstWeek.setUTCHours(0, 0, 0, 0);
-  var date = startOfUTCWeek(firstWeek, dirtyOptions);
+  var date = startOfUTCWeek(firstWeek, options);
   return date;
 }
 
-var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_WEEK = 604800000;
 function getUTCWeek(dirtyDate, options) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
-  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
+  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
+
+  // Round the number of days to the nearest integer
   // because the number of milliseconds in a week is not constant
   // (e.g. it's different in the week of the daylight saving time clock shift)
-
   return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
 }
 
 function addLeadingZeros(number, targetLength) {
   var sign = number < 0 ? '-' : '';
   var output = Math.abs(number).toString();
-
   while (output.length < targetLength) {
     output = '0' + output;
   }
-
   return sign + output;
 }
 
@@ -4664,10 +4132,9 @@ function addLeadingZeros(number, targetLength) {
  *
  * Letters marked by * are not implemented but reserved by Unicode standard.
  */
-
 var formatters$2 = {
   // Year
-  y: function (date, token) {
+  y: function y(date, token) {
     // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
     // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
     // |----------|-------|----|-------|-------|-------|
@@ -4676,58 +4143,55 @@ var formatters$2 = {
     // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
     // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
     // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
-    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)
 
+    var signedYear = date.getUTCFullYear();
+    // Returns 1 for 1 BC (which is year 0 in JavaScript)
     var year = signedYear > 0 ? signedYear : 1 - signedYear;
     return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
   },
   // Month
-  M: function (date, token) {
+  M: function M(date, token) {
     var month = date.getUTCMonth();
     return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
   },
   // Day of the month
-  d: function (date, token) {
+  d: function d(date, token) {
     return addLeadingZeros(date.getUTCDate(), token.length);
   },
   // AM or PM
-  a: function (date, token) {
+  a: function a(date, token) {
     var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
-
     switch (token) {
       case 'a':
       case 'aa':
         return dayPeriodEnumValue.toUpperCase();
-
       case 'aaa':
         return dayPeriodEnumValue;
-
       case 'aaaaa':
         return dayPeriodEnumValue[0];
-
       case 'aaaa':
       default:
         return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
     }
   },
   // Hour [1-12]
-  h: function (date, token) {
+  h: function h(date, token) {
     return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
   },
   // Hour [0-23]
-  H: function (date, token) {
+  H: function H(date, token) {
     return addLeadingZeros(date.getUTCHours(), token.length);
   },
   // Minute
-  m: function (date, token) {
+  m: function m(date, token) {
     return addLeadingZeros(date.getUTCMinutes(), token.length);
   },
   // Second
-  s: function (date, token) {
+  s: function s(date, token) {
     return addLeadingZeros(date.getUTCSeconds(), token.length);
   },
   // Fraction of second
-  S: function (date, token) {
+  S: function S(date, token) {
     var numberOfDigits = token.length;
     var milliseconds = date.getUTCMilliseconds();
     var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
@@ -4794,9 +4258,8 @@ var dayPeriodEnum = {
 
 var formatters = {
   // Era
-  G: function (date, token, localize) {
+  G: function G(date, token, localize) {
     var era = date.getUTCFullYear() > 0 ? 1 : 0;
-
     switch (token) {
       // AD, BC
       case 'G':
@@ -4806,13 +4269,11 @@ var formatters = {
           width: 'abbreviated'
         });
       // A, B
-
       case 'GGGGG':
         return localize.era(era, {
           width: 'narrow'
         });
       // Anno Domini, Before Christ
-
       case 'GGGG':
       default:
         return localize.era(era, {
@@ -4821,44 +4282,45 @@ var formatters = {
     }
   },
   // Year
-  y: function (date, token, localize) {
+  y: function y(date, token, localize) {
     // Ordinal number
     if (token === 'yo') {
-      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)
-
+      var signedYear = date.getUTCFullYear();
+      // Returns 1 for 1 BC (which is year 0 in JavaScript)
       var year = signedYear > 0 ? signedYear : 1 - signedYear;
       return localize.ordinalNumber(year, {
         unit: 'year'
       });
     }
-
     return formatters$3.y(date, token);
   },
   // Local week-numbering year
-  Y: function (date, token, localize, options) {
-    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)
-
-    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year
+  Y: function Y(date, token, localize, options) {
+    var signedWeekYear = getUTCWeekYear(date, options);
+    // Returns 1 for 1 BC (which is year 0 in JavaScript)
+    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
 
+    // Two digit year
     if (token === 'YY') {
       var twoDigitYear = weekYear % 100;
       return addLeadingZeros(twoDigitYear, 2);
-    } // Ordinal number
-
+    }
 
+    // Ordinal number
     if (token === 'Yo') {
       return localize.ordinalNumber(weekYear, {
         unit: 'year'
       });
-    } // Padding
-
+    }
 
+    // Padding
     return addLeadingZeros(weekYear, token.length);
   },
   // ISO week-numbering year
-  R: function (date, token) {
-    var isoWeekYear = getUTCISOWeekYear(date); // Padding
+  R: function R(date, token) {
+    var isoWeekYear = getUTCISOWeekYear(date);
 
+    // Padding
     return addLeadingZeros(isoWeekYear, token.length);
   },
   // Extended year. This is a single number designating the year of this calendar system.
@@ -4870,44 +4332,38 @@ var formatters = {
   // | BC 2 |   2 |  -1 |
   // Also `yy` always returns the last two digits of a year,
   // while `uu` pads single digit years to 2 characters and returns other years unchanged.
-  u: function (date, token) {
+  u: function u(date, token) {
     var year = date.getUTCFullYear();
     return addLeadingZeros(year, token.length);
   },
   // Quarter
-  Q: function (date, token, localize) {
+  Q: function Q(date, token, localize) {
     var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
-
     switch (token) {
       // 1, 2, 3, 4
       case 'Q':
         return String(quarter);
       // 01, 02, 03, 04
-
       case 'QQ':
         return addLeadingZeros(quarter, 2);
       // 1st, 2nd, 3rd, 4th
-
       case 'Qo':
         return localize.ordinalNumber(quarter, {
           unit: 'quarter'
         });
       // Q1, Q2, Q3, Q4
-
       case 'QQQ':
         return localize.quarter(quarter, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
       case 'QQQQQ':
         return localize.quarter(quarter, {
           width: 'narrow',
           context: 'formatting'
         });
       // 1st quarter, 2nd quarter, ...
-
       case 'QQQQ':
       default:
         return localize.quarter(quarter, {
@@ -4917,39 +4373,33 @@ var formatters = {
     }
   },
   // Stand-alone quarter
-  q: function (date, token, localize) {
+  q: function q(date, token, localize) {
     var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
-
     switch (token) {
       // 1, 2, 3, 4
       case 'q':
         return String(quarter);
       // 01, 02, 03, 04
-
       case 'qq':
         return addLeadingZeros(quarter, 2);
       // 1st, 2nd, 3rd, 4th
-
       case 'qo':
         return localize.ordinalNumber(quarter, {
           unit: 'quarter'
         });
       // Q1, Q2, Q3, Q4
-
       case 'qqq':
         return localize.quarter(quarter, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
       case 'qqqqq':
         return localize.quarter(quarter, {
           width: 'narrow',
           context: 'standalone'
         });
       // 1st quarter, 2nd quarter, ...
-
       case 'qqqq':
       default:
         return localize.quarter(quarter, {
@@ -4959,35 +4409,30 @@ var formatters = {
     }
   },
   // Month
-  M: function (date, token, localize) {
+  M: function M(date, token, localize) {
     var month = date.getUTCMonth();
-
     switch (token) {
       case 'M':
       case 'MM':
         return formatters$3.M(date, token);
       // 1st, 2nd, ..., 12th
-
       case 'Mo':
         return localize.ordinalNumber(month + 1, {
           unit: 'month'
         });
       // Jan, Feb, ..., Dec
-
       case 'MMM':
         return localize.month(month, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // J, F, ..., D
-
       case 'MMMMM':
         return localize.month(month, {
           width: 'narrow',
           context: 'formatting'
         });
       // January, February, ..., December
-
       case 'MMMM':
       default:
         return localize.month(month, {
@@ -4997,39 +4442,33 @@ var formatters = {
     }
   },
   // Stand-alone month
-  L: function (date, token, localize) {
+  L: function L(date, token, localize) {
     var month = date.getUTCMonth();
-
     switch (token) {
       // 1, 2, ..., 12
       case 'L':
         return String(month + 1);
       // 01, 02, ..., 12
-
       case 'LL':
         return addLeadingZeros(month + 1, 2);
       // 1st, 2nd, ..., 12th
-
       case 'Lo':
         return localize.ordinalNumber(month + 1, {
           unit: 'month'
         });
       // Jan, Feb, ..., Dec
-
       case 'LLL':
         return localize.month(month, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // J, F, ..., D
-
       case 'LLLLL':
         return localize.month(month, {
           width: 'narrow',
           context: 'standalone'
         });
       // January, February, ..., December
-
       case 'LLLL':
       default:
         return localize.month(month, {
@@ -5039,55 +4478,47 @@ var formatters = {
     }
   },
   // Local week of year
-  w: function (date, token, localize, options) {
+  w: function w(date, token, localize, options) {
     var week = getUTCWeek(date, options);
-
     if (token === 'wo') {
       return localize.ordinalNumber(week, {
         unit: 'week'
       });
     }
-
     return addLeadingZeros(week, token.length);
   },
   // ISO week of year
-  I: function (date, token, localize) {
+  I: function I(date, token, localize) {
     var isoWeek = getUTCISOWeek(date);
-
     if (token === 'Io') {
       return localize.ordinalNumber(isoWeek, {
         unit: 'week'
       });
     }
-
     return addLeadingZeros(isoWeek, token.length);
   },
   // Day of the month
-  d: function (date, token, localize) {
+  d: function d(date, token, localize) {
     if (token === 'do') {
       return localize.ordinalNumber(date.getUTCDate(), {
         unit: 'date'
       });
     }
-
     return formatters$3.d(date, token);
   },
   // Day of year
-  D: function (date, token, localize) {
+  D: function D(date, token, localize) {
     var dayOfYear = getUTCDayOfYear(date);
-
     if (token === 'Do') {
       return localize.ordinalNumber(dayOfYear, {
         unit: 'dayOfYear'
       });
     }
-
     return addLeadingZeros(dayOfYear, token.length);
   },
   // Day of week
-  E: function (date, token, localize) {
+  E: function E(date, token, localize) {
     var dayOfWeek = date.getUTCDay();
-
     switch (token) {
       // Tue
       case 'E':
@@ -5098,21 +4529,18 @@ var formatters = {
           context: 'formatting'
         });
       // T
-
       case 'EEEEE':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'EEEEEE':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'EEEE':
       default:
         return localize.day(dayOfWeek, {
@@ -5122,46 +4550,39 @@ var formatters = {
     }
   },
   // Local day of week
-  e: function (date, token, localize, options) {
+  e: function e(date, token, localize, options) {
     var dayOfWeek = date.getUTCDay();
     var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
-
     switch (token) {
       // Numerical value (Nth day of week with current locale or weekStartsOn)
       case 'e':
         return String(localDayOfWeek);
       // Padded numerical value
-
       case 'ee':
         return addLeadingZeros(localDayOfWeek, 2);
       // 1st, 2nd, ..., 7th
-
       case 'eo':
         return localize.ordinalNumber(localDayOfWeek, {
           unit: 'day'
         });
-
       case 'eee':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // T
-
       case 'eeeee':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'eeeeee':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'eeee':
       default:
         return localize.day(dayOfWeek, {
@@ -5171,46 +4592,39 @@ var formatters = {
     }
   },
   // Stand-alone local day of week
-  c: function (date, token, localize, options) {
+  c: function c(date, token, localize, options) {
     var dayOfWeek = date.getUTCDay();
     var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
-
     switch (token) {
       // Numerical value (same as in `e`)
       case 'c':
         return String(localDayOfWeek);
       // Padded numerical value
-
       case 'cc':
         return addLeadingZeros(localDayOfWeek, token.length);
       // 1st, 2nd, ..., 7th
-
       case 'co':
         return localize.ordinalNumber(localDayOfWeek, {
           unit: 'day'
         });
-
       case 'ccc':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // T
-
       case 'ccccc':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'standalone'
         });
       // Tu
-
       case 'cccccc':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'standalone'
         });
       // Tuesday
-
       case 'cccc':
       default:
         return localize.day(dayOfWeek, {
@@ -5220,47 +4634,40 @@ var formatters = {
     }
   },
   // ISO day of week
-  i: function (date, token, localize) {
+  i: function i(date, token, localize) {
     var dayOfWeek = date.getUTCDay();
     var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
-
     switch (token) {
       // 2
       case 'i':
         return String(isoDayOfWeek);
       // 02
-
       case 'ii':
         return addLeadingZeros(isoDayOfWeek, token.length);
       // 2nd
-
       case 'io':
         return localize.ordinalNumber(isoDayOfWeek, {
           unit: 'day'
         });
       // Tue
-
       case 'iii':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // T
-
       case 'iiiii':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'iiiiii':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'iiii':
       default:
         return localize.day(dayOfWeek, {
@@ -5270,10 +4677,9 @@ var formatters = {
     }
   },
   // AM or PM
-  a: function (date, token, localize) {
+  a: function a(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
-
     switch (token) {
       case 'a':
       case 'aa':
@@ -5281,19 +4687,16 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'aaa':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'abbreviated',
           context: 'formatting'
         }).toLowerCase();
-
       case 'aaaaa':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'aaaa':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5303,10 +4706,9 @@ var formatters = {
     }
   },
   // AM, PM, midnight, noon
-  b: function (date, token, localize) {
+  b: function b(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue;
-
     if (hours === 12) {
       dayPeriodEnumValue = dayPeriodEnum.noon;
     } else if (hours === 0) {
@@ -5314,7 +4716,6 @@ var formatters = {
     } else {
       dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
     }
-
     switch (token) {
       case 'b':
       case 'bb':
@@ -5322,19 +4723,16 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'bbb':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'abbreviated',
           context: 'formatting'
         }).toLowerCase();
-
       case 'bbbbb':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'bbbb':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5344,10 +4742,9 @@ var formatters = {
     }
   },
   // in the morning, in the afternoon, in the evening, at night
-  B: function (date, token, localize) {
+  B: function B(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue;
-
     if (hours >= 17) {
       dayPeriodEnumValue = dayPeriodEnum.evening;
     } else if (hours >= 12) {
@@ -5357,7 +4754,6 @@ var formatters = {
     } else {
       dayPeriodEnumValue = dayPeriodEnum.night;
     }
-
     switch (token) {
       case 'B':
       case 'BB':
@@ -5366,13 +4762,11 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'BBBBB':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'BBBB':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5382,7 +4776,7 @@ var formatters = {
     }
   },
   // Hour [1-12]
-  h: function (date, token, localize) {
+  h: function h(date, token, localize) {
     if (token === 'ho') {
       var hours = date.getUTCHours() % 12;
       if (hours === 0) hours = 12;
@@ -5390,133 +4784,119 @@ var formatters = {
         unit: 'hour'
       });
     }
-
     return formatters$3.h(date, token);
   },
   // Hour [0-23]
-  H: function (date, token, localize) {
+  H: function H(date, token, localize) {
     if (token === 'Ho') {
       return localize.ordinalNumber(date.getUTCHours(), {
         unit: 'hour'
       });
     }
-
     return formatters$3.H(date, token);
   },
   // Hour [0-11]
-  K: function (date, token, localize) {
+  K: function K(date, token, localize) {
     var hours = date.getUTCHours() % 12;
-
     if (token === 'Ko') {
       return localize.ordinalNumber(hours, {
         unit: 'hour'
       });
     }
-
     return addLeadingZeros(hours, token.length);
   },
   // Hour [1-24]
-  k: function (date, token, localize) {
+  k: function k(date, token, localize) {
     var hours = date.getUTCHours();
     if (hours === 0) hours = 24;
-
     if (token === 'ko') {
       return localize.ordinalNumber(hours, {
         unit: 'hour'
       });
     }
-
     return addLeadingZeros(hours, token.length);
   },
   // Minute
-  m: function (date, token, localize) {
+  m: function m(date, token, localize) {
     if (token === 'mo') {
       return localize.ordinalNumber(date.getUTCMinutes(), {
         unit: 'minute'
       });
     }
-
     return formatters$3.m(date, token);
   },
   // Second
-  s: function (date, token, localize) {
+  s: function s(date, token, localize) {
     if (token === 'so') {
       return localize.ordinalNumber(date.getUTCSeconds(), {
         unit: 'second'
       });
     }
-
     return formatters$3.s(date, token);
   },
   // Fraction of second
-  S: function (date, token) {
+  S: function S(date, token) {
     return formatters$3.S(date, token);
   },
   // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
-  X: function (date, token, _localize, options) {
+  X: function X(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     if (timezoneOffset === 0) {
       return 'Z';
     }
-
     switch (token) {
       // Hours and optional minutes
       case 'X':
         return formatTimezoneWithOptionalMinutes(timezoneOffset);
+
       // Hours, minutes and optional seconds without `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `XX`
-
       case 'XXXX':
       case 'XX':
         // Hours and minutes without `:` delimiter
         return formatTimezone(timezoneOffset);
+
       // Hours, minutes and optional seconds with `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `XXX`
-
       case 'XXXXX':
       case 'XXX': // Hours and minutes with `:` delimiter
-
       default:
         return formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
-  x: function (date, token, _localize, options) {
+  x: function x(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Hours and optional minutes
       case 'x':
         return formatTimezoneWithOptionalMinutes(timezoneOffset);
+
       // Hours, minutes and optional seconds without `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `xx`
-
       case 'xxxx':
       case 'xx':
         // Hours and minutes without `:` delimiter
         return formatTimezone(timezoneOffset);
+
       // Hours, minutes and optional seconds with `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `xxx`
-
       case 'xxxxx':
       case 'xxx': // Hours and minutes with `:` delimiter
-
       default:
         return formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (GMT)
-  O: function (date, token, _localize, options) {
+  O: function O(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Short
       case 'O':
@@ -5524,17 +4904,15 @@ var formatters = {
       case 'OOO':
         return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
       // Long
-
       case 'OOOO':
       default:
         return 'GMT' + formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (specific non-location)
-  z: function (date, token, _localize, options) {
+  z: function z(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Short
       case 'z':
@@ -5542,49 +4920,42 @@ var formatters = {
       case 'zzz':
         return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
       // Long
-
       case 'zzzz':
       default:
         return 'GMT' + formatTimezone(timezoneOffset, ':');
     }
   },
   // Seconds timestamp
-  t: function (date, token, _localize, options) {
+  t: function t(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timestamp = Math.floor(originalDate.getTime() / 1000);
     return addLeadingZeros(timestamp, token.length);
   },
   // Milliseconds timestamp
-  T: function (date, token, _localize, options) {
+  T: function T(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timestamp = originalDate.getTime();
     return addLeadingZeros(timestamp, token.length);
   }
 };
-
 function formatTimezoneShort(offset, dirtyDelimiter) {
   var sign = offset > 0 ? '-' : '+';
   var absOffset = Math.abs(offset);
   var hours = Math.floor(absOffset / 60);
   var minutes = absOffset % 60;
-
   if (minutes === 0) {
     return sign + String(hours);
   }
-
   var delimiter = dirtyDelimiter || '';
   return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
 }
-
 function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
   if (offset % 60 === 0) {
     var sign = offset > 0 ? '-' : '+';
     return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
   }
-
   return formatTimezone(offset, dirtyDelimiter);
 }
-
 function formatTimezone(offset, dirtyDelimiter) {
   var delimiter = dirtyDelimiter || '';
   var sign = offset > 0 ? '-' : '+';
@@ -5593,125 +4964,592 @@ function formatTimezone(offset, dirtyDelimiter) {
   var minutes = addLeadingZeros(absOffset % 60, 2);
   return sign + hours + delimiter + minutes;
 }
-
 var formatters$1 = formatters;
 
-function dateLongFormatter(pattern, formatLong) {
+var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
   switch (pattern) {
     case 'P':
       return formatLong.date({
         width: 'short'
       });
-
     case 'PP':
       return formatLong.date({
         width: 'medium'
       });
-
     case 'PPP':
       return formatLong.date({
         width: 'long'
       });
-
     case 'PPPP':
     default:
       return formatLong.date({
         width: 'full'
       });
   }
-}
-
-function timeLongFormatter(pattern, formatLong) {
+};
+var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
   switch (pattern) {
     case 'p':
       return formatLong.time({
         width: 'short'
       });
+    case 'pp':
+      return formatLong.time({
+        width: 'medium'
+      });
+    case 'ppp':
+      return formatLong.time({
+        width: 'long'
+      });
+    case 'pppp':
+    default:
+      return formatLong.time({
+        width: 'full'
+      });
+  }
+};
+var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
+  var matchResult = pattern.match(/(P+)(p+)?/) || [];
+  var datePattern = matchResult[1];
+  var timePattern = matchResult[2];
+  if (!timePattern) {
+    return dateLongFormatter(pattern, formatLong);
+  }
+  var dateTimeFormat;
+  switch (datePattern) {
+    case 'P':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'short'
+      });
+      break;
+    case 'PP':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'medium'
+      });
+      break;
+    case 'PPP':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'long'
+      });
+      break;
+    case 'PPPP':
+    default:
+      dateTimeFormat = formatLong.dateTime({
+        width: 'full'
+      });
+      break;
+  }
+  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
+};
+var longFormatters = {
+  p: timeLongFormatter,
+  P: dateTimeLongFormatter
+};
+var longFormatters$1 = longFormatters;
+
+var protectedDayOfYearTokens = ['D', 'DD'];
+var protectedWeekYearTokens = ['YY', 'YYYY'];
+function isProtectedDayOfYearToken(token) {
+  return protectedDayOfYearTokens.indexOf(token) !== -1;
+}
+function isProtectedWeekYearToken(token) {
+  return protectedWeekYearTokens.indexOf(token) !== -1;
+}
+function throwProtectedError(token, format, input) {
+  if (token === 'YYYY') {
+    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'YY') {
+    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'D') {
+    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'DD') {
+    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  }
+}
+
+var formatDistanceLocale = {
+  lessThanXSeconds: {
+    one: 'less than a second',
+    other: 'less than {{count}} seconds'
+  },
+  xSeconds: {
+    one: '1 second',
+    other: '{{count}} seconds'
+  },
+  halfAMinute: 'half a minute',
+  lessThanXMinutes: {
+    one: 'less than a minute',
+    other: 'less than {{count}} minutes'
+  },
+  xMinutes: {
+    one: '1 minute',
+    other: '{{count}} minutes'
+  },
+  aboutXHours: {
+    one: 'about 1 hour',
+    other: 'about {{count}} hours'
+  },
+  xHours: {
+    one: '1 hour',
+    other: '{{count}} hours'
+  },
+  xDays: {
+    one: '1 day',
+    other: '{{count}} days'
+  },
+  aboutXWeeks: {
+    one: 'about 1 week',
+    other: 'about {{count}} weeks'
+  },
+  xWeeks: {
+    one: '1 week',
+    other: '{{count}} weeks'
+  },
+  aboutXMonths: {
+    one: 'about 1 month',
+    other: 'about {{count}} months'
+  },
+  xMonths: {
+    one: '1 month',
+    other: '{{count}} months'
+  },
+  aboutXYears: {
+    one: 'about 1 year',
+    other: 'about {{count}} years'
+  },
+  xYears: {
+    one: '1 year',
+    other: '{{count}} years'
+  },
+  overXYears: {
+    one: 'over 1 year',
+    other: 'over {{count}} years'
+  },
+  almostXYears: {
+    one: 'almost 1 year',
+    other: 'almost {{count}} years'
+  }
+};
+var formatDistance = function formatDistance(token, count, options) {
+  var result;
+  var tokenValue = formatDistanceLocale[token];
+  if (typeof tokenValue === 'string') {
+    result = tokenValue;
+  } else if (count === 1) {
+    result = tokenValue.one;
+  } else {
+    result = tokenValue.other.replace('{{count}}', count.toString());
+  }
+  if (options !== null && options !== void 0 && options.addSuffix) {
+    if (options.comparison && options.comparison > 0) {
+      return 'in ' + result;
+    } else {
+      return result + ' ago';
+    }
+  }
+  return result;
+};
+var formatDistance$1 = formatDistance;
+
+function buildFormatLongFn(args) {
+  return function () {
+    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
+    // TODO: Remove String()
+    var width = options.width ? String(options.width) : args.defaultWidth;
+    var format = args.formats[width] || args.formats[args.defaultWidth];
+    return format;
+  };
+}
 
-    case 'pp':
-      return formatLong.time({
-        width: 'medium'
-      });
+var dateFormats = {
+  full: 'EEEE, MMMM do, y',
+  long: 'MMMM do, y',
+  medium: 'MMM d, y',
+  short: 'MM/dd/yyyy'
+};
+var timeFormats = {
+  full: 'h:mm:ss a zzzz',
+  long: 'h:mm:ss a z',
+  medium: 'h:mm:ss a',
+  short: 'h:mm a'
+};
+var dateTimeFormats = {
+  full: "{{date}} 'at' {{time}}",
+  long: "{{date}} 'at' {{time}}",
+  medium: '{{date}}, {{time}}',
+  short: '{{date}}, {{time}}'
+};
+var formatLong = {
+  date: buildFormatLongFn({
+    formats: dateFormats,
+    defaultWidth: 'full'
+  }),
+  time: buildFormatLongFn({
+    formats: timeFormats,
+    defaultWidth: 'full'
+  }),
+  dateTime: buildFormatLongFn({
+    formats: dateTimeFormats,
+    defaultWidth: 'full'
+  })
+};
+var formatLong$1 = formatLong;
 
-    case 'ppp':
-      return formatLong.time({
-        width: 'long'
-      });
+var formatRelativeLocale = {
+  lastWeek: "'last' eeee 'at' p",
+  yesterday: "'yesterday at' p",
+  today: "'today at' p",
+  tomorrow: "'tomorrow at' p",
+  nextWeek: "eeee 'at' p",
+  other: 'P'
+};
+var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
+  return formatRelativeLocale[token];
+};
+var formatRelative$1 = formatRelative;
 
-    case 'pppp':
-    default:
-      return formatLong.time({
-        width: 'full'
-      });
-  }
+function buildLocalizeFn(args) {
+  return function (dirtyIndex, options) {
+    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
+    var valuesArray;
+    if (context === 'formatting' && args.formattingValues) {
+      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
+      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
+      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
+    } else {
+      var _defaultWidth = args.defaultWidth;
+      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
+      valuesArray = args.values[_width] || args.values[_defaultWidth];
+    }
+    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
+    // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
+    return valuesArray[index];
+  };
 }
 
-function dateTimeLongFormatter(pattern, formatLong) {
-  var matchResult = pattern.match(/(P+)(p+)?/) || [];
-  var datePattern = matchResult[1];
-  var timePattern = matchResult[2];
+var eraValues = {
+  narrow: ['B', 'A'],
+  abbreviated: ['BC', 'AD'],
+  wide: ['Before Christ', 'Anno Domini']
+};
+var quarterValues = {
+  narrow: ['1', '2', '3', '4'],
+  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
+  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
+};
 
-  if (!timePattern) {
-    return dateLongFormatter(pattern, formatLong);
+// Note: in English, the names of days of the week and months are capitalized.
+// If you are making a new locale based on this one, check if the same is true for the language you're working on.
+// Generally, formatted dates should look like they are in the middle of a sentence,
+// e.g. in Spanish language the weekdays and months should be in the lowercase.
+var monthValues = {
+  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
+  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
+};
+var dayValues = {
+  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
+  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
+  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
+  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
+};
+var dayPeriodValues = {
+  narrow: {
+    am: 'a',
+    pm: 'p',
+    midnight: 'mi',
+    noon: 'n',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
+  },
+  abbreviated: {
+    am: 'AM',
+    pm: 'PM',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
+  },
+  wide: {
+    am: 'a.m.',
+    pm: 'p.m.',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
   }
+};
+var formattingDayPeriodValues = {
+  narrow: {
+    am: 'a',
+    pm: 'p',
+    midnight: 'mi',
+    noon: 'n',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  },
+  abbreviated: {
+    am: 'AM',
+    pm: 'PM',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  },
+  wide: {
+    am: 'a.m.',
+    pm: 'p.m.',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  }
+};
+var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
+  var number = Number(dirtyNumber);
 
-  var dateTimeFormat;
-
-  switch (datePattern) {
-    case 'P':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'short'
-      });
-      break;
-
-    case 'PP':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'medium'
-      });
-      break;
+  // If ordinal numbers depend on context, for example,
+  // if they are different for different grammatical genders,
+  // use `options.unit`.
+  //
+  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
+  // 'day', 'hour', 'minute', 'second'.
 
-    case 'PPP':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'long'
-      });
-      break;
+  var rem100 = number % 100;
+  if (rem100 > 20 || rem100 < 10) {
+    switch (rem100 % 10) {
+      case 1:
+        return number + 'st';
+      case 2:
+        return number + 'nd';
+      case 3:
+        return number + 'rd';
+    }
+  }
+  return number + 'th';
+};
+var localize = {
+  ordinalNumber: ordinalNumber,
+  era: buildLocalizeFn({
+    values: eraValues,
+    defaultWidth: 'wide'
+  }),
+  quarter: buildLocalizeFn({
+    values: quarterValues,
+    defaultWidth: 'wide',
+    argumentCallback: function argumentCallback(quarter) {
+      return quarter - 1;
+    }
+  }),
+  month: buildLocalizeFn({
+    values: monthValues,
+    defaultWidth: 'wide'
+  }),
+  day: buildLocalizeFn({
+    values: dayValues,
+    defaultWidth: 'wide'
+  }),
+  dayPeriod: buildLocalizeFn({
+    values: dayPeriodValues,
+    defaultWidth: 'wide',
+    formattingValues: formattingDayPeriodValues,
+    defaultFormattingWidth: 'wide'
+  })
+};
+var localize$1 = localize;
 
-    case 'PPPP':
-    default:
-      dateTimeFormat = formatLong.dateTime({
-        width: 'full'
-      });
-      break;
+function buildMatchFn(args) {
+  return function (string) {
+    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+    var width = options.width;
+    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
+    var matchResult = string.match(matchPattern);
+    if (!matchResult) {
+      return null;
+    }
+    var matchedString = matchResult[0];
+    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
+    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
+      return pattern.test(matchedString);
+    }) : findKey(parsePatterns, function (pattern) {
+      return pattern.test(matchedString);
+    });
+    var value;
+    value = args.valueCallback ? args.valueCallback(key) : key;
+    value = options.valueCallback ? options.valueCallback(value) : value;
+    var rest = string.slice(matchedString.length);
+    return {
+      value: value,
+      rest: rest
+    };
+  };
+}
+function findKey(object, predicate) {
+  for (var key in object) {
+    if (object.hasOwnProperty(key) && predicate(object[key])) {
+      return key;
+    }
+  }
+  return undefined;
+}
+function findIndex(array, predicate) {
+  for (var key = 0; key < array.length; key++) {
+    if (predicate(array[key])) {
+      return key;
+    }
   }
+  return undefined;
+}
 
-  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
+function buildMatchPatternFn(args) {
+  return function (string) {
+    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+    var matchResult = string.match(args.matchPattern);
+    if (!matchResult) return null;
+    var matchedString = matchResult[0];
+    var parseResult = string.match(args.parsePattern);
+    if (!parseResult) return null;
+    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
+    value = options.valueCallback ? options.valueCallback(value) : value;
+    var rest = string.slice(matchedString.length);
+    return {
+      value: value,
+      rest: rest
+    };
+  };
 }
 
-var longFormatters = {
-  p: timeLongFormatter,
-  P: dateTimeLongFormatter
+var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
+var parseOrdinalNumberPattern = /\d+/i;
+var matchEraPatterns = {
+  narrow: /^(b|a)/i,
+  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
+  wide: /^(before christ|before common era|anno domini|common era)/i
 };
-var longFormatters$1 = longFormatters;
+var parseEraPatterns = {
+  any: [/^b/i, /^(a|c)/i]
+};
+var matchQuarterPatterns = {
+  narrow: /^[1234]/i,
+  abbreviated: /^q[1234]/i,
+  wide: /^[1234](th|st|nd|rd)? quarter/i
+};
+var parseQuarterPatterns = {
+  any: [/1/i, /2/i, /3/i, /4/i]
+};
+var matchMonthPatterns = {
+  narrow: /^[jfmasond]/i,
+  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
+  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
+};
+var parseMonthPatterns = {
+  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
+  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
+};
+var matchDayPatterns = {
+  narrow: /^[smtwf]/i,
+  short: /^(su|mo|tu|we|th|fr|sa)/i,
+  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
+  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
+};
+var parseDayPatterns = {
+  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
+  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
+};
+var matchDayPeriodPatterns = {
+  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
+  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
+};
+var parseDayPeriodPatterns = {
+  any: {
+    am: /^a/i,
+    pm: /^p/i,
+    midnight: /^mi/i,
+    noon: /^no/i,
+    morning: /morning/i,
+    afternoon: /afternoon/i,
+    evening: /evening/i,
+    night: /night/i
+  }
+};
+var match = {
+  ordinalNumber: buildMatchPatternFn({
+    matchPattern: matchOrdinalNumberPattern,
+    parsePattern: parseOrdinalNumberPattern,
+    valueCallback: function valueCallback(value) {
+      return parseInt(value, 10);
+    }
+  }),
+  era: buildMatchFn({
+    matchPatterns: matchEraPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseEraPatterns,
+    defaultParseWidth: 'any'
+  }),
+  quarter: buildMatchFn({
+    matchPatterns: matchQuarterPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseQuarterPatterns,
+    defaultParseWidth: 'any',
+    valueCallback: function valueCallback(index) {
+      return index + 1;
+    }
+  }),
+  month: buildMatchFn({
+    matchPatterns: matchMonthPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseMonthPatterns,
+    defaultParseWidth: 'any'
+  }),
+  day: buildMatchFn({
+    matchPatterns: matchDayPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseDayPatterns,
+    defaultParseWidth: 'any'
+  }),
+  dayPeriod: buildMatchFn({
+    matchPatterns: matchDayPeriodPatterns,
+    defaultMatchWidth: 'any',
+    parsePatterns: parseDayPeriodPatterns,
+    defaultParseWidth: 'any'
+  })
+};
+var match$1 = match;
 
-var protectedDayOfYearTokens = ['D', 'DD'];
-var protectedWeekYearTokens = ['YY', 'YYYY'];
-function isProtectedDayOfYearToken(token) {
-  return protectedDayOfYearTokens.indexOf(token) !== -1;
-}
-function isProtectedWeekYearToken(token) {
-  return protectedWeekYearTokens.indexOf(token) !== -1;
-}
-function throwProtectedError(token, format, input) {
-  if (token === 'YYYY') {
-    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'YY') {
-    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'D') {
-    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'DD') {
-    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
+/**
+ * @type {Locale}
+ * @category Locales
+ * @summary English locale (United States).
+ * @language English
+ * @iso-639-2 eng
+ * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
+ * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
+ */
+var locale = {
+  code: 'en-US',
+  formatDistance: formatDistance$1,
+  formatLong: formatLong$1,
+  formatRelative: formatRelative$1,
+  localize: localize$1,
+  match: match$1,
+  options: {
+    weekStartsOn: 0 /* Sunday */,
+    firstWeekContainsDate: 1
   }
-}
+};
+var defaultLocale = locale;
 
 // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
 //   (one of the certain letters followed by `o`)
@@ -5723,14 +5561,15 @@ function throwProtectedError(token, format, input) {
 //   If there is no matching single quote
 //   then the sequence will continue until the end of the string.
 // - . matches any single character unmatched by previous parts of the RegExps
+var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
 
-var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
+// This RegExp catches symbols escaped by quotes, and also
 // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
-
 var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
 var escapedStringRegExp$1 = /^'([^]*?)'?$/;
 var doubleQuoteRegExp$1 = /''/g;
 var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
+
 /**
  * @name format
  * @category Common Helpers
@@ -5740,7 +5579,7 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * Return the formatted date string in the given format. The result may vary by locale.
  *
  * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
- * > See: https://git.io/fxCyr
+ * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * The characters wrapped between two single quotes characters (') are escaped.
  * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
@@ -5976,30 +5815,10 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  *    - `p`: long localized time
  *
  * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
- *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
- *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - The second argument is now required for the sake of explicitness.
- *
- *   ```javascript
- *   // Before v2.0.0
- *   format(new Date(2016, 0, 1))
- *
- *   // v2.0.0 onward
- *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
- *   ```
- *
- * - New format string API for `format` function
- *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
- *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
- *
- * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
+ *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * @param {Date|Number} date - the original date
  * @param {String} format - the string of tokens
@@ -6008,9 +5827,9 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
  * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
  * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @returns {String} the formatted date string
  * @throws {TypeError} 2 arguments required
  * @throws {RangeError} `date` must not be Invalid Date
@@ -6018,69 +5837,63 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * @throws {RangeError} `options.locale` must contain `formatLong` property
  * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
  * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
- * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
+ * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @throws {RangeError} format string contains an unescaped latin alphabet character
  *
  * @example
  * // Represent 11 February 2014 in middle-endian format:
- * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
+ * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
  * //=> '02/11/2014'
  *
  * @example
  * // Represent 2 July 2014 in Esperanto:
  * import { eoLocale } from 'date-fns/locale/eo'
- * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
+ * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
  *   locale: eoLocale
  * })
  * //=> '2-a de julio 2014'
  *
  * @example
  * // Escape string by single quote characters:
- * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
+ * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
  * //=> "3 o'clock"
  */
 
-function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
+function format(dirtyDate, dirtyFormatStr, options) {
+  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
   requiredArgs(2, arguments);
   var formatStr = String(dirtyFormatStr);
-  var options = dirtyOptions || {};
-  var locale = options.locale || defaultLocale;
-  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
+  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
 
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
+  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
 
-  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
-
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   if (!locale.localize) {
     throw new RangeError('locale must contain localize property');
   }
-
   if (!locale.formatLong) {
     throw new RangeError('locale must contain formatLong property');
   }
-
   var originalDate = toDate(dirtyDate);
-
   if (!isValid(originalDate)) {
     throw new RangeError('Invalid time value');
-  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
+  }
+
+  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
   // This ensures that when UTC functions will be implemented, locales will be compatible with them.
   // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
-
-
   var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
   var utcDate = subMilliseconds(originalDate, timezoneOffset);
   var formatterOptions = {
@@ -6091,137 +5904,376 @@ function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
   };
   var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
     var firstCharacter = substring[0];
-
     if (firstCharacter === 'p' || firstCharacter === 'P') {
       var longFormatter = longFormatters$1[firstCharacter];
-      return longFormatter(substring, locale.formatLong, formatterOptions);
+      return longFormatter(substring, locale.formatLong);
     }
-
     return substring;
   }).join('').match(formattingTokensRegExp$1).map(function (substring) {
     // Replace two single quote characters with one single quote character
     if (substring === "''") {
       return "'";
     }
-
     var firstCharacter = substring[0];
-
     if (firstCharacter === "'") {
       return cleanEscapedString$1(substring);
     }
-
     var formatter = formatters$1[firstCharacter];
-
     if (formatter) {
-      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
-        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
+      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
+        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
       }
-
-      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
-        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
+      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
+        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
       }
-
       return formatter(utcDate, substring, locale.localize, formatterOptions);
     }
-
     if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
       throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
     }
-
     return substring;
   }).join('');
   return result;
 }
-
 function cleanEscapedString$1(input) {
-  return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1, "'");
+  var matched = input.match(escapedStringRegExp$1);
+  if (!matched) {
+    return input;
+  }
+  return matched[1].replace(doubleQuoteRegExp$1, "'");
 }
 
-function assign(target, dirtyObject) {
+function assign(target, object) {
   if (target == null) {
     throw new TypeError('assign requires that input parameter not be null or undefined');
   }
-
-  dirtyObject = dirtyObject || {};
-
-  for (var property in dirtyObject) {
-    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
-      target[property] = dirtyObject[property];
+  for (var property in object) {
+    if (Object.prototype.hasOwnProperty.call(object, property)) {
+      target[property] = object[property];
     }
   }
-
   return target;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _arrayLikeToArray(r, a) {
+  (null == a || a > r.length) && (a = r.length);
+  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
+  return n;
+}
 
-function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
-  requiredArgs(2, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+function _unsupportedIterableToArray(r, a) {
+  if (r) {
+    if ("string" == typeof r) return _arrayLikeToArray(r, a);
+    var t = {}.toString.call(r).slice(8, -1);
+    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
+  }
+}
 
-  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
-    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
+function _createForOfIteratorHelper(r, e) {
+  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
+  if (!t) {
+    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
+      t && (r = t);
+      var _n = 0,
+        F = function F() {};
+      return {
+        s: F,
+        n: function n() {
+          return _n >= r.length ? {
+            done: !0
+          } : {
+            done: !1,
+            value: r[_n++]
+          };
+        },
+        e: function e(r) {
+          throw r;
+        },
+        f: F
+      };
+    }
+    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
   }
+  var o,
+    a = !0,
+    u = !1;
+  return {
+    s: function s() {
+      t = t.call(r);
+    },
+    n: function n() {
+      var r = t.next();
+      return a = r.done, r;
+    },
+    e: function e(r) {
+      u = !0, o = r;
+    },
+    f: function f() {
+      try {
+        a || null == t["return"] || t["return"]();
+      } finally {
+        if (u) throw o;
+      }
+    }
+  };
+}
 
-  var date = toDate(dirtyDate);
-  var day = toInteger(dirtyDay);
-  var currentDay = date.getUTCDay();
-  var remainder = day % 7;
-  var dayIndex = (remainder + 7) % 7;
-  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
-  date.setUTCDate(date.getUTCDate() + diff);
-  return date;
+function _assertThisInitialized(e) {
+  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
+  return e;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _setPrototypeOf(t, e) {
+  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
+    return t.__proto__ = e, t;
+  }, _setPrototypeOf(t, e);
+}
 
-function setUTCISODay(dirtyDate, dirtyDay) {
-  requiredArgs(2, arguments);
-  var day = toInteger(dirtyDay);
+function _inherits(t, e) {
+  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
+  t.prototype = Object.create(e && e.prototype, {
+    constructor: {
+      value: t,
+      writable: !0,
+      configurable: !0
+    }
+  }), Object.defineProperty(t, "prototype", {
+    writable: !1
+  }), e && _setPrototypeOf(t, e);
+}
 
-  if (day % 7 === 0) {
-    day = day - 7;
-  }
+function _getPrototypeOf(t) {
+  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
+    return t.__proto__ || Object.getPrototypeOf(t);
+  }, _getPrototypeOf(t);
+}
 
-  var weekStartsOn = 1;
-  var date = toDate(dirtyDate);
-  var currentDay = date.getUTCDay();
-  var remainder = day % 7;
-  var dayIndex = (remainder + 7) % 7;
-  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
-  date.setUTCDate(date.getUTCDate() + diff);
-  return date;
+function _isNativeReflectConstruct() {
+  try {
+    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
+  } catch (t) {}
+  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
+    return !!t;
+  })();
+}
+
+function _possibleConstructorReturn(t, e) {
+  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
+  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
+  return _assertThisInitialized(t);
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _createSuper(t) {
+  var r = _isNativeReflectConstruct();
+  return function () {
+    var e,
+      o = _getPrototypeOf(t);
+    if (r) {
+      var s = _getPrototypeOf(this).constructor;
+      e = Reflect.construct(o, arguments, s);
+    } else e = o.apply(this, arguments);
+    return _possibleConstructorReturn(this, e);
+  };
+}
+
+function _classCallCheck(a, n) {
+  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
+}
+
+function toPrimitive(t, r) {
+  if ("object" != _typeof(t) || !t) return t;
+  var e = t[Symbol.toPrimitive];
+  if (void 0 !== e) {
+    var i = e.call(t, r || "default");
+    if ("object" != _typeof(i)) return i;
+    throw new TypeError("@@toPrimitive must return a primitive value.");
+  }
+  return ("string" === r ? String : Number)(t);
+}
 
-function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
-  requiredArgs(2, arguments);
-  var date = toDate(dirtyDate);
-  var isoWeek = toInteger(dirtyISOWeek);
-  var diff = getUTCISOWeek(date) - isoWeek;
-  date.setUTCDate(date.getUTCDate() - diff * 7);
-  return date;
+function toPropertyKey(t) {
+  var i = toPrimitive(t, "string");
+  return "symbol" == _typeof(i) ? i : i + "";
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _defineProperties(e, r) {
+  for (var t = 0; t < r.length; t++) {
+    var o = r[t];
+    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
+  }
+}
+function _createClass(e, r, t) {
+  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
+    writable: !1
+  }), e;
+}
 
-function setUTCWeek(dirtyDate, dirtyWeek, options) {
-  requiredArgs(2, arguments);
-  var date = toDate(dirtyDate);
-  var week = toInteger(dirtyWeek);
-  var diff = getUTCWeek(date, options) - week;
-  date.setUTCDate(date.getUTCDate() - diff * 7);
-  return date;
+function _defineProperty(e, r, t) {
+  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
+    value: t,
+    enumerable: !0,
+    configurable: !0,
+    writable: !0
+  }) : e[r] = t, e;
 }
 
-var MILLISECONDS_IN_HOUR = 3600000;
-var MILLISECONDS_IN_MINUTE = 60000;
-var MILLISECONDS_IN_SECOND = 1000;
+var TIMEZONE_UNIT_PRIORITY = 10;
+var Setter = /*#__PURE__*/function () {
+  function Setter() {
+    _classCallCheck(this, Setter);
+    _defineProperty(this, "priority", void 0);
+    _defineProperty(this, "subPriority", 0);
+  }
+  _createClass(Setter, [{
+    key: "validate",
+    value: function validate(_utcDate, _options) {
+      return true;
+    }
+  }]);
+  return Setter;
+}();
+var ValueSetter = /*#__PURE__*/function (_Setter) {
+  _inherits(ValueSetter, _Setter);
+  var _super = _createSuper(ValueSetter);
+  function ValueSetter(value, validateValue, setValue, priority, subPriority) {
+    var _this;
+    _classCallCheck(this, ValueSetter);
+    _this = _super.call(this);
+    _this.value = value;
+    _this.validateValue = validateValue;
+    _this.setValue = setValue;
+    _this.priority = priority;
+    if (subPriority) {
+      _this.subPriority = subPriority;
+    }
+    return _this;
+  }
+  _createClass(ValueSetter, [{
+    key: "validate",
+    value: function validate(utcDate, options) {
+      return this.validateValue(utcDate, this.value, options);
+    }
+  }, {
+    key: "set",
+    value: function set(utcDate, flags, options) {
+      return this.setValue(utcDate, flags, this.value, options);
+    }
+  }]);
+  return ValueSetter;
+}(Setter);
+var DateToSystemTimezoneSetter = /*#__PURE__*/function (_Setter2) {
+  _inherits(DateToSystemTimezoneSetter, _Setter2);
+  var _super2 = _createSuper(DateToSystemTimezoneSetter);
+  function DateToSystemTimezoneSetter() {
+    var _this2;
+    _classCallCheck(this, DateToSystemTimezoneSetter);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this2 = _super2.call.apply(_super2, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
+    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
+    return _this2;
+  }
+  _createClass(DateToSystemTimezoneSetter, [{
+    key: "set",
+    value: function set(date, flags) {
+      if (flags.timestampIsSet) {
+        return date;
+      }
+      var convertedDate = new Date(0);
+      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
+      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
+      return convertedDate;
+    }
+  }]);
+  return DateToSystemTimezoneSetter;
+}(Setter);
+
+var Parser = /*#__PURE__*/function () {
+  function Parser() {
+    _classCallCheck(this, Parser);
+    _defineProperty(this, "incompatibleTokens", void 0);
+    _defineProperty(this, "priority", void 0);
+    _defineProperty(this, "subPriority", void 0);
+  }
+  _createClass(Parser, [{
+    key: "run",
+    value: function run(dateString, token, match, options) {
+      var result = this.parse(dateString, token, match, options);
+      if (!result) {
+        return null;
+      }
+      return {
+        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
+        rest: result.rest
+      };
+    }
+  }, {
+    key: "validate",
+    value: function validate(_utcDate, _value, _options) {
+      return true;
+    }
+  }]);
+  return Parser;
+}();
+
+var EraParser = /*#__PURE__*/function (_Parser) {
+  _inherits(EraParser, _Parser);
+  var _super = _createSuper(EraParser);
+  function EraParser() {
+    var _this;
+    _classCallCheck(this, EraParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 140);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
+    return _this;
+  }
+  _createClass(EraParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      switch (token) {
+        // AD, BC
+        case 'G':
+        case 'GG':
+        case 'GGG':
+          return match.era(dateString, {
+            width: 'abbreviated'
+          }) || match.era(dateString, {
+            width: 'narrow'
+          });
+        // A, B
+        case 'GGGGG':
+          return match.era(dateString, {
+            width: 'narrow'
+          });
+        // Anno Domini, Before Christ
+        case 'GGGG':
+        default:
+          return match.era(dateString, {
+            width: 'wide'
+          }) || match.era(dateString, {
+            width: 'abbreviated'
+          }) || match.era(dateString, {
+            width: 'narrow'
+          });
+      }
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
+      flags.era = value;
+      date.setUTCFullYear(value, 0, 1);
+      date.setUTCHours(0, 0, 0, 0);
+      return date;
+    }
+  }]);
+  return EraParser;
+}(Parser);
+
 var numericPatterns = {
   month: /^(1[0-2]|0?\d)/,
   // 0 to 12
@@ -6243,6 +6295,7 @@ var numericPatterns = {
   // 0 to 59
   second: /^[0-5]?\d/,
   // 0 to 59
+
   singleDigit: /^\d/,
   // 0 to 9
   twoDigits: /^\d{1,2}/,
@@ -6251,6 +6304,7 @@ var numericPatterns = {
   // 0 to 999
   fourDigits: /^\d{1,4}/,
   // 0 to 9999
+
   anyDigitsSigned: /^-?\d+/,
   singleDigitSigned: /^-?\d/,
   // 0 to 9, -0 to -9
@@ -6259,8 +6313,8 @@ var numericPatterns = {
   threeDigitsSigned: /^-?\d{1,3}/,
   // 0 to 999, -0 to -999
   fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
-
 };
+
 var timezonePatterns = {
   basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
   basic: /^([+-])(\d{2})(\d{2})|Z/,
@@ -6269,100 +6323,88 @@ var timezonePatterns = {
   extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
 };
 
-function parseNumericPattern(pattern, string, valueCallback) {
-  var matchResult = string.match(pattern);
-
+function mapValue(parseFnResult, mapFn) {
+  if (!parseFnResult) {
+    return parseFnResult;
+  }
+  return {
+    value: mapFn(parseFnResult.value),
+    rest: parseFnResult.rest
+  };
+}
+function parseNumericPattern(pattern, dateString) {
+  var matchResult = dateString.match(pattern);
   if (!matchResult) {
     return null;
   }
-
-  var value = parseInt(matchResult[0], 10);
   return {
-    value: valueCallback ? valueCallback(value) : value,
-    rest: string.slice(matchResult[0].length)
+    value: parseInt(matchResult[0], 10),
+    rest: dateString.slice(matchResult[0].length)
   };
 }
-
-function parseTimezonePattern(pattern, string) {
-  var matchResult = string.match(pattern);
-
+function parseTimezonePattern(pattern, dateString) {
+  var matchResult = dateString.match(pattern);
   if (!matchResult) {
     return null;
-  } // Input is 'Z'
-
+  }
 
+  // Input is 'Z'
   if (matchResult[0] === 'Z') {
     return {
       value: 0,
-      rest: string.slice(1)
+      rest: dateString.slice(1)
     };
   }
-
   var sign = matchResult[1] === '+' ? 1 : -1;
   var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
   var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
   var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
   return {
-    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
-    rest: string.slice(matchResult[0].length)
+    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
+    rest: dateString.slice(matchResult[0].length)
   };
 }
-
-function parseAnyDigitsSigned(string, valueCallback) {
-  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
+function parseAnyDigitsSigned(dateString) {
+  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
 }
-
-function parseNDigits(n, string, valueCallback) {
+function parseNDigits(n, dateString) {
   switch (n) {
     case 1:
-      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.singleDigit, dateString);
     case 2:
-      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.twoDigits, dateString);
     case 3:
-      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.threeDigits, dateString);
     case 4:
-      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.fourDigits, dateString);
     default:
-      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback);
+      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
   }
 }
-
-function parseNDigitsSigned(n, string, valueCallback) {
+function parseNDigitsSigned(n, dateString) {
   switch (n) {
     case 1:
-      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
     case 2:
-      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
     case 3:
-      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
     case 4:
-      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
     default:
-      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback);
+      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
   }
 }
-
-function dayPeriodEnumToHours(enumValue) {
-  switch (enumValue) {
+function dayPeriodEnumToHours(dayPeriod) {
+  switch (dayPeriod) {
     case 'morning':
       return 4;
-
     case 'evening':
       return 17;
-
     case 'pm':
     case 'noon':
     case 'afternoon':
       return 12;
-
     case 'am':
     case 'midnight':
     case 'night':
@@ -6370,16 +6412,14 @@ function dayPeriodEnumToHours(enumValue) {
       return 0;
   }
 }
-
 function normalizeTwoDigitYear(twoDigitYear, currentYear) {
-  var isCommonEra = currentYear > 0; // Absolute number of the current year:
+  var isCommonEra = currentYear > 0;
+  // Absolute number of the current year:
   // 1 -> 1 AC
   // 0 -> 1 BC
   // -1 -> 2 BC
-
   var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
   var result;
-
   if (absCurrentYear <= 50) {
     result = twoDigitYear || 100;
   } else {
@@ -6388,1077 +6428,1324 @@ function normalizeTwoDigitYear(twoDigitYear, currentYear) {
     var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
     result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
   }
-
   return isCommonEra ? result : 1 - result;
 }
-
-var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
-var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation
-
 function isLeapYearIndex(year) {
   return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
 }
-/*
- * |     | Unit                           |     | Unit                           |
- * |-----|--------------------------------|-----|--------------------------------|
- * |  a  | AM, PM                         |  A* | Milliseconds in day            |
- * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
- * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
- * |  d  | Day of month                   |  D  | Day of year                    |
- * |  e  | Local day of week              |  E  | Day of week                    |
- * |  f  |                                |  F* | Day of week in month           |
- * |  g* | Modified Julian day            |  G  | Era                            |
- * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
- * |  i! | ISO day of week                |  I! | ISO week of year               |
- * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
- * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
- * |  l* | (deprecated)                   |  L  | Stand-alone month              |
- * |  m  | Minute                         |  M  | Month                          |
- * |  n  |                                |  N  |                                |
- * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
- * |  p  |                                |  P  |                                |
- * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
- * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
- * |  s  | Second                         |  S  | Fraction of second             |
- * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
- * |  u  | Extended year                  |  U* | Cyclic year                    |
- * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
- * |  w  | Local week of year             |  W* | Week of month                  |
- * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
- * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
- * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
- *
- * Letters marked by * are not implemented but reserved by Unicode standard.
- *
- * Letters marked by ! are non-standard, but implemented by date-fns:
- * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
- * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
- *   i.e. 7 for Sunday, 1 for Monday, etc.
- * - `I` is ISO week of year, as opposed to `w` which is local week of year.
- * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
- *   `R` is supposed to be used in conjunction with `I` and `i`
- *   for universal ISO week-numbering date, whereas
- *   `Y` is supposed to be used in conjunction with `w` and `e`
- *   for week-numbering date specific to the locale.
- */
-
-
-var parsers = {
-  // Era
-  G: {
-    priority: 140,
-    parse: function (string, token, match, _options) {
-      switch (token) {
-        // AD, BC
-        case 'G':
-        case 'GG':
-        case 'GGG':
-          return match.era(string, {
-            width: 'abbreviated'
-          }) || match.era(string, {
-            width: 'narrow'
-          });
-        // A, B
-
-        case 'GGGGG':
-          return match.era(string, {
-            width: 'narrow'
-          });
-        // Anno Domini, Before Christ
 
-        case 'GGGG':
-        default:
-          return match.era(string, {
-            width: 'wide'
-          }) || match.era(string, {
-            width: 'abbreviated'
-          }) || match.era(string, {
-            width: 'narrow'
-          });
-      }
-    },
-    set: function (date, flags, value, _options) {
-      flags.era = value;
-      date.setUTCFullYear(value, 0, 1);
-      date.setUTCHours(0, 0, 0, 0);
-      return date;
-    },
-    incompatibleTokens: ['R', 'u', 't', 'T']
-  },
-  // Year
-  y: {
-    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
-    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
-    // |----------|-------|----|-------|-------|-------|
-    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
-    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
-    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
-    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
-    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
-    priority: 130,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (year) {
+// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
+// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
+// |----------|-------|----|-------|-------|-------|
+// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
+// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
+// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
+// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
+// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
+var YearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(YearParser, _Parser);
+  var _super = _createSuper(YearParser);
+  function YearParser() {
+    var _this;
+    _classCallCheck(this, YearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(YearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(year) {
         return {
           year: year,
           isTwoDigitYear: token === 'yy'
         };
       };
-
       switch (token) {
         case 'y':
-          return parseNDigits(4, string, valueCallback);
-
+          return mapValue(parseNDigits(4, dateString), valueCallback);
         case 'yo':
-          return match.ordinalNumber(string, {
-            unit: 'year',
-            valueCallback: valueCallback
-          });
-
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'year'
+          }), valueCallback);
         default:
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value.isTwoDigitYear || value.year > 0;
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       var currentYear = date.getUTCFullYear();
-
       if (value.isTwoDigitYear) {
         var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
         date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
         date.setUTCHours(0, 0, 0, 0);
         return date;
       }
-
       var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
       date.setUTCFullYear(year, 0, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local week-numbering year
-  Y: {
-    priority: 130,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (year) {
+    }
+  }]);
+  return YearParser;
+}(Parser);
+
+// Local week-numbering year
+var LocalWeekYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalWeekYearParser, _Parser);
+  var _super = _createSuper(LocalWeekYearParser);
+  function LocalWeekYearParser() {
+    var _this;
+    _classCallCheck(this, LocalWeekYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalWeekYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(year) {
         return {
           year: year,
           isTwoDigitYear: token === 'YY'
         };
       };
-
       switch (token) {
         case 'Y':
-          return parseNDigits(4, string, valueCallback);
-
+          return mapValue(parseNDigits(4, dateString), valueCallback);
         case 'Yo':
-          return match.ordinalNumber(string, {
-            unit: 'year',
-            valueCallback: valueCallback
-          });
-
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'year'
+          }), valueCallback);
         default:
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value.isTwoDigitYear || value.year > 0;
-    },
-    set: function (date, flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value, options) {
       var currentYear = getUTCWeekYear(date, options);
-
       if (value.isTwoDigitYear) {
         var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
         date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
         date.setUTCHours(0, 0, 0, 0);
         return startOfUTCWeek(date, options);
       }
-
       var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
       date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
       date.setUTCHours(0, 0, 0, 0);
       return startOfUTCWeek(date, options);
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
-  },
-  // ISO week-numbering year
-  R: {
-    priority: 130,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return LocalWeekYearParser;
+}(Parser);
+
+var ISOWeekYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOWeekYearParser, _Parser);
+  var _super = _createSuper(ISOWeekYearParser);
+  function ISOWeekYearParser() {
+    var _this;
+    _classCallCheck(this, ISOWeekYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISOWeekYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       if (token === 'R') {
-        return parseNDigitsSigned(4, string);
+        return parseNDigitsSigned(4, dateString);
       }
-
-      return parseNDigitsSigned(token.length, string);
-    },
-    set: function (_date, _flags, value, _options) {
+      return parseNDigitsSigned(token.length, dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       var firstWeekOfYear = new Date(0);
       firstWeekOfYear.setUTCFullYear(value, 0, 4);
       firstWeekOfYear.setUTCHours(0, 0, 0, 0);
       return startOfUTCISOWeek(firstWeekOfYear);
-    },
-    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
-  },
-  // Extended year
-  u: {
-    priority: 130,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return ISOWeekYearParser;
+}(Parser);
+
+var ExtendedYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ExtendedYearParser, _Parser);
+  var _super = _createSuper(ExtendedYearParser);
+  function ExtendedYearParser() {
+    var _this;
+    _classCallCheck(this, ExtendedYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ExtendedYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       if (token === 'u') {
-        return parseNDigitsSigned(4, string);
+        return parseNDigitsSigned(4, dateString);
       }
-
-      return parseNDigitsSigned(token.length, string);
-    },
-    set: function (date, _flags, value, _options) {
+      return parseNDigitsSigned(token.length, dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCFullYear(value, 0, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']
-  },
-  // Quarter
-  Q: {
-    priority: 120,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return ExtendedYearParser;
+}(Parser);
+
+var QuarterParser = /*#__PURE__*/function (_Parser) {
+  _inherits(QuarterParser, _Parser);
+  var _super = _createSuper(QuarterParser);
+  function QuarterParser() {
+    var _this;
+    _classCallCheck(this, QuarterParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 120);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(QuarterParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // 1, 2, 3, 4
         case 'Q':
         case 'QQ':
           // 01, 02, 03, 04
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 1st, 2nd, 3rd, 4th
-
         case 'Qo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'quarter'
           });
         // Q1, Q2, Q3, Q4
-
         case 'QQQ':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
         case 'QQQQQ':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // 1st quarter, 2nd quarter, ...
-
         case 'QQQQ':
         default:
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 4;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth((value - 1) * 3, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Stand-alone quarter
-  q: {
-    priority: 120,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return QuarterParser;
+}(Parser);
+
+var StandAloneQuarterParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneQuarterParser, _Parser);
+  var _super = _createSuper(StandAloneQuarterParser);
+  function StandAloneQuarterParser() {
+    var _this;
+    _classCallCheck(this, StandAloneQuarterParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 120);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneQuarterParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // 1, 2, 3, 4
         case 'q':
         case 'qq':
           // 01, 02, 03, 04
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 1st, 2nd, 3rd, 4th
-
         case 'qo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'quarter'
           });
         // Q1, Q2, Q3, Q4
-
         case 'qqq':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
         case 'qqqqq':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // 1st quarter, 2nd quarter, ...
-
         case 'qqqq':
         default:
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 4;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth((value - 1) * 3, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Month
-  M: {
-    priority: 110,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return StandAloneQuarterParser;
+}(Parser);
+
+var MonthParser = /*#__PURE__*/function (_Parser) {
+  _inherits(MonthParser, _Parser);
+  var _super = _createSuper(MonthParser);
+  function MonthParser() {
+    var _this;
+    _classCallCheck(this, MonthParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    _defineProperty(_assertThisInitialized(_this), "priority", 110);
+    return _this;
+  }
+  _createClass(MonthParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         return value - 1;
       };
-
       switch (token) {
         // 1, 2, ..., 12
         case 'M':
-          return parseNumericPattern(numericPatterns.month, string, valueCallback);
+          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
         // 01, 02, ..., 12
-
         case 'MM':
-          return parseNDigits(2, string, valueCallback);
+          return mapValue(parseNDigits(2, dateString), valueCallback);
         // 1st, 2nd, ..., 12th
-
         case 'Mo':
-          return match.ordinalNumber(string, {
-            unit: 'month',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'month'
+          }), valueCallback);
         // Jan, Feb, ..., Dec
-
         case 'MMM':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // J, F, ..., D
-
         case 'MMMMM':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // January, February, ..., December
-
         case 'MMMM':
         default:
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(value, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Stand-alone month
-  L: {
-    priority: 110,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return MonthParser;
+}(Parser);
+
+var StandAloneMonthParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneMonthParser, _Parser);
+  var _super = _createSuper(StandAloneMonthParser);
+  function StandAloneMonthParser() {
+    var _this;
+    _classCallCheck(this, StandAloneMonthParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 110);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneMonthParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         return value - 1;
       };
-
       switch (token) {
         // 1, 2, ..., 12
         case 'L':
-          return parseNumericPattern(numericPatterns.month, string, valueCallback);
+          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
         // 01, 02, ..., 12
-
         case 'LL':
-          return parseNDigits(2, string, valueCallback);
+          return mapValue(parseNDigits(2, dateString), valueCallback);
         // 1st, 2nd, ..., 12th
-
         case 'Lo':
-          return match.ordinalNumber(string, {
-            unit: 'month',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'month'
+          }), valueCallback);
         // Jan, Feb, ..., Dec
-
         case 'LLL':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // J, F, ..., D
-
         case 'LLLLL':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // January, February, ..., December
-
         case 'LLLL':
         default:
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(value, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local week of year
-  w: {
-    priority: 100,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return StandAloneMonthParser;
+}(Parser);
+
+function setUTCWeek(dirtyDate, dirtyWeek, options) {
+  requiredArgs(2, arguments);
+  var date = toDate(dirtyDate);
+  var week = toInteger(dirtyWeek);
+  var diff = getUTCWeek(date, options) - week;
+  date.setUTCDate(date.getUTCDate() - diff * 7);
+  return date;
+}
+
+var LocalWeekParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalWeekParser, _Parser);
+  var _super = _createSuper(LocalWeekParser);
+  function LocalWeekParser() {
+    var _this;
+    _classCallCheck(this, LocalWeekParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 100);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalWeekParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'w':
-          return parseNumericPattern(numericPatterns.week, string);
-
+          return parseNumericPattern(numericPatterns.week, dateString);
         case 'wo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'week'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 53;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       return startOfUTCWeek(setUTCWeek(date, value, options), options);
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
-  },
-  // ISO week of year
-  I: {
-    priority: 100,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return LocalWeekParser;
+}(Parser);
+
+function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
+  requiredArgs(2, arguments);
+  var date = toDate(dirtyDate);
+  var isoWeek = toInteger(dirtyISOWeek);
+  var diff = getUTCISOWeek(date) - isoWeek;
+  date.setUTCDate(date.getUTCDate() - diff * 7);
+  return date;
+}
+
+var ISOWeekParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOWeekParser, _Parser);
+  var _super = _createSuper(ISOWeekParser);
+  function ISOWeekParser() {
+    var _this;
+    _classCallCheck(this, ISOWeekParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 100);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISOWeekParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'I':
-          return parseNumericPattern(numericPatterns.week, string);
-
+          return parseNumericPattern(numericPatterns.week, dateString);
         case 'Io':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'week'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 53;
-    },
-    set: function (date, _flags, value, options) {
-      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
-    },
-    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
-  },
-  // Day of the month
-  d: {
-    priority: 90,
-    subPriority: 1,
-    parse: function (string, token, match, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      return startOfUTCISOWeek(setUTCISOWeek(date, value));
+    }
+  }]);
+  return ISOWeekParser;
+}(Parser);
+
+var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+
+// Day of the month
+var DateParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DateParser, _Parser);
+  var _super = _createSuper(DateParser);
+  function DateParser() {
+    var _this;
+    _classCallCheck(this, DateParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DateParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'd':
-          return parseNumericPattern(numericPatterns.date, string);
-
+          return parseNumericPattern(numericPatterns.date, dateString);
         case 'do':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'date'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(date, value) {
       var year = date.getUTCFullYear();
       var isLeapYear = isLeapYearIndex(year);
       var month = date.getUTCMonth();
-
       if (isLeapYear) {
         return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
       } else {
         return value >= 1 && value <= DAYS_IN_MONTH[month];
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCDate(value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Day of year
-  D: {
-    priority: 90,
-    subPriority: 1,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return DateParser;
+}(Parser);
+
+var DayOfYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayOfYearParser, _Parser);
+  var _super = _createSuper(DayOfYearParser);
+  function DayOfYearParser() {
+    var _this;
+    _classCallCheck(this, DayOfYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayOfYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'D':
         case 'DD':
-          return parseNumericPattern(numericPatterns.dayOfYear, string);
-
+          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
         case 'Do':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'date'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(date, value) {
       var year = date.getUTCFullYear();
       var isLeapYear = isLeapYearIndex(year);
-
       if (isLeapYear) {
         return value >= 1 && value <= 366;
       } else {
         return value >= 1 && value <= 365;
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(0, value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']
-  },
-  // Day of week
-  E: {
-    priority: 90,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return DayOfYearParser;
+}(Parser);
+
+function setUTCDay(dirtyDate, dirtyDay, options) {
+  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
+  requiredArgs(2, arguments);
+  var defaultOptions = getDefaultOptions();
+  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
+
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
+    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
+  }
+  var date = toDate(dirtyDate);
+  var day = toInteger(dirtyDay);
+  var currentDay = date.getUTCDay();
+  var remainder = day % 7;
+  var dayIndex = (remainder + 7) % 7;
+  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
+  date.setUTCDate(date.getUTCDate() + diff);
+  return date;
+}
+
+var DayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayParser, _Parser);
+  var _super = _createSuper(DayParser);
+  function DayParser() {
+    var _this;
+    _classCallCheck(this, DayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // Tue
         case 'E':
         case 'EE':
         case 'EEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // T
-
         case 'EEEEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tu
-
         case 'EEEEEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tuesday
-
         case 'EEEE':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local day of week
-  e: {
-    priority: 90,
-    parse: function (string, token, match, options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return DayParser;
+}(Parser);
+
+var LocalDayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalDayParser, _Parser);
+  var _super = _createSuper(LocalDayParser);
+  function LocalDayParser() {
+    var _this;
+    _classCallCheck(this, LocalDayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalDayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match, options) {
+      var valueCallback = function valueCallback(value) {
         var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
         return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
       };
-
       switch (token) {
         // 3
         case 'e':
         case 'ee':
           // 03
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
         // 3rd
-
         case 'eo':
-          return match.ordinalNumber(string, {
-            unit: 'day',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'day'
+          }), valueCallback);
         // Tue
-
         case 'eee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // T
-
         case 'eeeee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tu
-
         case 'eeeeee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tuesday
-
         case 'eeee':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']
-  },
-  // Stand-alone local day of week
-  c: {
-    priority: 90,
-    parse: function (string, token, match, options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return LocalDayParser;
+}(Parser);
+
+var StandAloneLocalDayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneLocalDayParser, _Parser);
+  var _super = _createSuper(StandAloneLocalDayParser);
+  function StandAloneLocalDayParser() {
+    var _this;
+    _classCallCheck(this, StandAloneLocalDayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneLocalDayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match, options) {
+      var valueCallback = function valueCallback(value) {
         var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
         return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
       };
-
       switch (token) {
         // 3
         case 'c':
         case 'cc':
           // 03
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
         // 3rd
-
         case 'co':
-          return match.ordinalNumber(string, {
-            unit: 'day',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'day'
+          }), valueCallback);
         // Tue
-
         case 'ccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // T
-
         case 'ccccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // Tu
-
         case 'cccccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // Tuesday
-
         case 'cccc':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']
-  },
-  // ISO day of week
-  i: {
-    priority: 90,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return StandAloneLocalDayParser;
+}(Parser);
+
+function setUTCISODay(dirtyDate, dirtyDay) {
+  requiredArgs(2, arguments);
+  var day = toInteger(dirtyDay);
+  if (day % 7 === 0) {
+    day = day - 7;
+  }
+  var weekStartsOn = 1;
+  var date = toDate(dirtyDate);
+  var currentDay = date.getUTCDay();
+  var remainder = day % 7;
+  var dayIndex = (remainder + 7) % 7;
+  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
+  date.setUTCDate(date.getUTCDate() + diff);
+  return date;
+}
+
+var ISODayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISODayParser, _Parser);
+  var _super = _createSuper(ISODayParser);
+  function ISODayParser() {
+    var _this;
+    _classCallCheck(this, ISODayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISODayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         if (value === 0) {
           return 7;
         }
-
         return value;
       };
-
       switch (token) {
         // 2
         case 'i':
         case 'ii':
           // 02
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 2nd
-
         case 'io':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'day'
           });
         // Tue
-
         case 'iii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'abbreviated',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // T
-
         case 'iiiii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // Tu
-
         case 'iiiiii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // Tuesday
-
         case 'iiii':
         default:
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'wide',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'abbreviated',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 7;
-    },
-    set: function (date, _flags, value, options) {
-      date = setUTCISODay(date, value, options);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      date = setUTCISODay(date, value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']
-  },
-  // AM or PM
-  a: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return ISODayParser;
+}(Parser);
+
+var AMPMParser = /*#__PURE__*/function (_Parser) {
+  _inherits(AMPMParser, _Parser);
+  var _super = _createSuper(AMPMParser);
+  function AMPMParser() {
+    var _this;
+    _classCallCheck(this, AMPMParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(AMPMParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'a':
         case 'aa':
         case 'aaa':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'aaaaa':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'aaaa':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']
-  },
-  // AM, PM, midnight
-  b: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return AMPMParser;
+}(Parser);
+
+var AMPMMidnightParser = /*#__PURE__*/function (_Parser) {
+  _inherits(AMPMMidnightParser, _Parser);
+  var _super = _createSuper(AMPMMidnightParser);
+  function AMPMMidnightParser() {
+    var _this;
+    _classCallCheck(this, AMPMMidnightParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(AMPMMidnightParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'b':
         case 'bb':
         case 'bbb':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'bbbbb':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'bbbb':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']
-  },
-  // in the morning, in the afternoon, in the evening, at night
-  B: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return AMPMMidnightParser;
+}(Parser);
+
+var DayPeriodParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayPeriodParser, _Parser);
+  var _super = _createSuper(DayPeriodParser);
+  function DayPeriodParser() {
+    var _this;
+    _classCallCheck(this, DayPeriodParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayPeriodParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'B':
         case 'BB':
         case 'BBB':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'BBBBB':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'BBBB':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
-      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
-      return date;
-    },
-    incompatibleTokens: ['a', 'b', 't', 'T']
-  },
-  // Hour [1-12]
-  h: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
+      return date;
+    }
+  }]);
+  return DayPeriodParser;
+}(Parser);
+
+var Hour1to12Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour1to12Parser, _Parser);
+  var _super = _createSuper(Hour1to12Parser);
+  function Hour1to12Parser() {
+    var _this;
+    _classCallCheck(this, Hour1to12Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour1to12Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'h':
-          return parseNumericPattern(numericPatterns.hour12h, string);
-
+          return parseNumericPattern(numericPatterns.hour12h, dateString);
         case 'ho':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 12;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var isPM = date.getUTCHours() >= 12;
-
       if (isPM && value < 12) {
         date.setUTCHours(value + 12, 0, 0, 0);
       } else if (!isPM && value === 12) {
@@ -7466,257 +7753,488 @@ var parsers = {
       } else {
         date.setUTCHours(value, 0, 0, 0);
       }
-
       return date;
-    },
-    incompatibleTokens: ['H', 'K', 'k', 't', 'T']
-  },
-  // Hour [0-23]
-  H: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour1to12Parser;
+}(Parser);
+
+var Hour0to23Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour0to23Parser, _Parser);
+  var _super = _createSuper(Hour0to23Parser);
+  function Hour0to23Parser() {
+    var _this;
+    _classCallCheck(this, Hour0to23Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour0to23Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'H':
-          return parseNumericPattern(numericPatterns.hour23h, string);
-
+          return parseNumericPattern(numericPatterns.hour23h, dateString);
         case 'Ho':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 23;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(value, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']
-  },
-  // Hour [0-11]
-  K: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour0to23Parser;
+}(Parser);
+
+var Hour0To11Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour0To11Parser, _Parser);
+  var _super = _createSuper(Hour0To11Parser);
+  function Hour0To11Parser() {
+    var _this;
+    _classCallCheck(this, Hour0To11Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour0To11Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'K':
-          return parseNumericPattern(numericPatterns.hour11h, string);
-
+          return parseNumericPattern(numericPatterns.hour11h, dateString);
         case 'Ko':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var isPM = date.getUTCHours() >= 12;
-
       if (isPM && value < 12) {
         date.setUTCHours(value + 12, 0, 0, 0);
       } else {
         date.setUTCHours(value, 0, 0, 0);
       }
-
       return date;
-    },
-    incompatibleTokens: ['h', 'H', 'k', 't', 'T']
-  },
-  // Hour [1-24]
-  k: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour0To11Parser;
+}(Parser);
+
+var Hour1To24Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour1To24Parser, _Parser);
+  var _super = _createSuper(Hour1To24Parser);
+  function Hour1To24Parser() {
+    var _this;
+    _classCallCheck(this, Hour1To24Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour1To24Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'k':
-          return parseNumericPattern(numericPatterns.hour24h, string);
-
+          return parseNumericPattern(numericPatterns.hour24h, dateString);
         case 'ko':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 24;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var hours = value <= 24 ? value % 24 : value;
       date.setUTCHours(hours, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']
-  },
-  // Minute
-  m: {
-    priority: 60,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour1To24Parser;
+}(Parser);
+
+var MinuteParser = /*#__PURE__*/function (_Parser) {
+  _inherits(MinuteParser, _Parser);
+  var _super = _createSuper(MinuteParser);
+  function MinuteParser() {
+    var _this;
+    _classCallCheck(this, MinuteParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 60);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(MinuteParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'm':
-          return parseNumericPattern(numericPatterns.minute, string);
-
+          return parseNumericPattern(numericPatterns.minute, dateString);
         case 'mo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'minute'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 59;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMinutes(value, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Second
-  s: {
-    priority: 50,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return MinuteParser;
+}(Parser);
+
+var SecondParser = /*#__PURE__*/function (_Parser) {
+  _inherits(SecondParser, _Parser);
+  var _super = _createSuper(SecondParser);
+  function SecondParser() {
+    var _this;
+    _classCallCheck(this, SecondParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 50);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(SecondParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 's':
-          return parseNumericPattern(numericPatterns.second, string);
-
+          return parseNumericPattern(numericPatterns.second, dateString);
         case 'so':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'second'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 59;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCSeconds(value, 0);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Fraction of second
-  S: {
-    priority: 30,
-    parse: function (string, token, _match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return SecondParser;
+}(Parser);
+
+var FractionOfSecondParser = /*#__PURE__*/function (_Parser) {
+  _inherits(FractionOfSecondParser, _Parser);
+  var _super = _createSuper(FractionOfSecondParser);
+  function FractionOfSecondParser() {
+    var _this;
+    _classCallCheck(this, FractionOfSecondParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 30);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(FractionOfSecondParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
+      var valueCallback = function valueCallback(value) {
         return Math.floor(value * Math.pow(10, -token.length + 3));
       };
-
-      return parseNDigits(token.length, string, valueCallback);
-    },
-    set: function (date, _flags, value, _options) {
+      return mapValue(parseNDigits(token.length, dateString), valueCallback);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMilliseconds(value);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Timezone (ISO-8601. +00:00 is `'Z'`)
-  X: {
-    priority: 10,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return FractionOfSecondParser;
+}(Parser);
+
+var ISOTimezoneWithZParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOTimezoneWithZParser, _Parser);
+  var _super = _createSuper(ISOTimezoneWithZParser);
+  function ISOTimezoneWithZParser() {
+    var _this;
+    _classCallCheck(this, ISOTimezoneWithZParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 10);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'x']);
+    return _this;
+  }
+  _createClass(ISOTimezoneWithZParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       switch (token) {
         case 'X':
-          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
         case 'XX':
-          return parseTimezonePattern(timezonePatterns.basic, string);
-
+          return parseTimezonePattern(timezonePatterns.basic, dateString);
         case 'XXXX':
-          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
         case 'XXXXX':
-          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
         case 'XXX':
         default:
-          return parseTimezonePattern(timezonePatterns.extended, string);
+          return parseTimezonePattern(timezonePatterns.extended, dateString);
       }
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       if (flags.timestampIsSet) {
         return date;
       }
-
       return new Date(date.getTime() - value);
-    },
-    incompatibleTokens: ['t', 'T', 'x']
-  },
-  // Timezone (ISO-8601)
-  x: {
-    priority: 10,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return ISOTimezoneWithZParser;
+}(Parser);
+
+var ISOTimezoneParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOTimezoneParser, _Parser);
+  var _super = _createSuper(ISOTimezoneParser);
+  function ISOTimezoneParser() {
+    var _this;
+    _classCallCheck(this, ISOTimezoneParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 10);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'X']);
+    return _this;
+  }
+  _createClass(ISOTimezoneParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       switch (token) {
         case 'x':
-          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
         case 'xx':
-          return parseTimezonePattern(timezonePatterns.basic, string);
-
+          return parseTimezonePattern(timezonePatterns.basic, dateString);
         case 'xxxx':
-          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
         case 'xxxxx':
-          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
         case 'xxx':
         default:
-          return parseTimezonePattern(timezonePatterns.extended, string);
+          return parseTimezonePattern(timezonePatterns.extended, dateString);
       }
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       if (flags.timestampIsSet) {
         return date;
       }
-
       return new Date(date.getTime() - value);
-    },
-    incompatibleTokens: ['t', 'T', 'X']
-  },
-  // Seconds timestamp
-  t: {
-    priority: 40,
-    parse: function (string, _token, _match, _options) {
-      return parseAnyDigitsSigned(string);
-    },
-    set: function (_date, _flags, value, _options) {
+    }
+  }]);
+  return ISOTimezoneParser;
+}(Parser);
+
+var TimestampSecondsParser = /*#__PURE__*/function (_Parser) {
+  _inherits(TimestampSecondsParser, _Parser);
+  var _super = _createSuper(TimestampSecondsParser);
+  function TimestampSecondsParser() {
+    var _this;
+    _classCallCheck(this, TimestampSecondsParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 40);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
+    return _this;
+  }
+  _createClass(TimestampSecondsParser, [{
+    key: "parse",
+    value: function parse(dateString) {
+      return parseAnyDigitsSigned(dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       return [new Date(value * 1000), {
         timestampIsSet: true
       }];
-    },
-    incompatibleTokens: '*'
-  },
-  // Milliseconds timestamp
-  T: {
-    priority: 20,
-    parse: function (string, _token, _match, _options) {
-      return parseAnyDigitsSigned(string);
-    },
-    set: function (_date, _flags, value, _options) {
+    }
+  }]);
+  return TimestampSecondsParser;
+}(Parser);
+
+var TimestampMillisecondsParser = /*#__PURE__*/function (_Parser) {
+  _inherits(TimestampMillisecondsParser, _Parser);
+  var _super = _createSuper(TimestampMillisecondsParser);
+  function TimestampMillisecondsParser() {
+    var _this;
+    _classCallCheck(this, TimestampMillisecondsParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 20);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
+    return _this;
+  }
+  _createClass(TimestampMillisecondsParser, [{
+    key: "parse",
+    value: function parse(dateString) {
+      return parseAnyDigitsSigned(dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       return [new Date(value), {
         timestampIsSet: true
       }];
-    },
-    incompatibleTokens: '*'
-  }
+    }
+  }]);
+  return TimestampMillisecondsParser;
+}(Parser);
+
+/*
+ * |     | Unit                           |     | Unit                           |
+ * |-----|--------------------------------|-----|--------------------------------|
+ * |  a  | AM, PM                         |  A* | Milliseconds in day            |
+ * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
+ * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
+ * |  d  | Day of month                   |  D  | Day of year                    |
+ * |  e  | Local day of week              |  E  | Day of week                    |
+ * |  f  |                                |  F* | Day of week in month           |
+ * |  g* | Modified Julian day            |  G  | Era                            |
+ * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
+ * |  i! | ISO day of week                |  I! | ISO week of year               |
+ * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
+ * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
+ * |  l* | (deprecated)                   |  L  | Stand-alone month              |
+ * |  m  | Minute                         |  M  | Month                          |
+ * |  n  |                                |  N  |                                |
+ * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
+ * |  p  |                                |  P  |                                |
+ * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
+ * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
+ * |  s  | Second                         |  S  | Fraction of second             |
+ * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
+ * |  u  | Extended year                  |  U* | Cyclic year                    |
+ * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
+ * |  w  | Local week of year             |  W* | Week of month                  |
+ * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
+ * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
+ * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
+ *
+ * Letters marked by * are not implemented but reserved by Unicode standard.
+ *
+ * Letters marked by ! are non-standard, but implemented by date-fns:
+ * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
+ * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
+ *   i.e. 7 for Sunday, 1 for Monday, etc.
+ * - `I` is ISO week of year, as opposed to `w` which is local week of year.
+ * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
+ *   `R` is supposed to be used in conjunction with `I` and `i`
+ *   for universal ISO week-numbering date, whereas
+ *   `Y` is supposed to be used in conjunction with `w` and `e`
+ *   for week-numbering date specific to the locale.
+ */
+var parsers = {
+  G: new EraParser(),
+  y: new YearParser(),
+  Y: new LocalWeekYearParser(),
+  R: new ISOWeekYearParser(),
+  u: new ExtendedYearParser(),
+  Q: new QuarterParser(),
+  q: new StandAloneQuarterParser(),
+  M: new MonthParser(),
+  L: new StandAloneMonthParser(),
+  w: new LocalWeekParser(),
+  I: new ISOWeekParser(),
+  d: new DateParser(),
+  D: new DayOfYearParser(),
+  E: new DayParser(),
+  e: new LocalDayParser(),
+  c: new StandAloneLocalDayParser(),
+  i: new ISODayParser(),
+  a: new AMPMParser(),
+  b: new AMPMMidnightParser(),
+  B: new DayPeriodParser(),
+  h: new Hour1to12Parser(),
+  H: new Hour0to23Parser(),
+  K: new Hour0To11Parser(),
+  k: new Hour1To24Parser(),
+  m: new MinuteParser(),
+  s: new SecondParser(),
+  S: new FractionOfSecondParser(),
+  X: new ISOTimezoneWithZParser(),
+  x: new ISOTimezoneParser(),
+  t: new TimestampSecondsParser(),
+  T: new TimestampMillisecondsParser()
 };
-var parsers$1 = parsers;
 
-var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
 // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
 //   (one of the certain letters followed by `o`)
 // - (\w)\1* matches any sequences of the same letter
@@ -7727,15 +8245,16 @@ var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separate
 //   If there is no matching single quote
 //   then the sequence will continue until the end of the string.
 // - . matches any single character unmatched by previous parts of the RegExps
+var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
 
-var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
+// This RegExp catches symbols escaped by quotes, and also
 // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
-
 var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
 var escapedStringRegExp = /^'([^]*?)'?$/;
 var doubleQuoteRegExp = /''/g;
 var notWhitespaceRegExp = /\S/;
 var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
+
 /**
  * @name parse
  * @category Common Helpers
@@ -7745,7 +8264,7 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * Return the date parsed from string using the given format string.
  *
  * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
- * > See: https://git.io/fxCyr
+ * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * The characters in the format string wrapped between two single quotes characters (') are escaped.
  * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
@@ -7968,10 +8487,10 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  *    - `p`: long localized time
  *
  * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
- *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
- *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
  *    on the given locale.
@@ -8002,23 +8521,6 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * Invalid Date is a Date, whose time value is NaN.
  * Time value of Date: http://es5.github.io/#x15.9.1.1
  *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - Old `parse` was renamed to `toDate`.
- *   Now `parse` is a new function which parses a string using a provided format.
- *
- *   ```javascript
- *   // Before v2.0.0
- *   parse('2016-01-01')
- *
- *   // v2.0.0 onward (toDate no longer accepts a string)
- *   toDate(1392098430000) // Unix to timestamp
- *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date
- *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
- *   ```
- *
  * @param {String} dateString - the string to parse
  * @param {String} formatString - the string of tokens
  * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
@@ -8027,18 +8529,18 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
  * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
  * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @returns {Date} the parsed date
  * @throws {TypeError} 3 arguments required
  * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
  * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
  * @throws {RangeError} `options.locale` must contain `match` property
- * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
+ * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @throws {RangeError} format string contains an unescaped latin alphabet character
  *
  * @example
@@ -8054,34 +8556,28 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * })
  * //=> Sun Feb 28 2010 00:00:00
  */
-
-function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
+function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
+  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
   requiredArgs(3, arguments);
   var dateString = String(dirtyDateString);
   var formatString = String(dirtyFormatString);
-  var options = dirtyOptions || {};
-  var locale = options.locale || defaultLocale;
-
+  var defaultOptions = getDefaultOptions();
+  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
   if (!locale.match) {
     throw new RangeError('locale must contain match property');
   }
+  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
 
-  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
-
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
+  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
 
-  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
-
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   if (formatString === '') {
     if (dateString === '') {
       return toDate(dirtyReferenceDate);
@@ -8089,113 +8585,96 @@ function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOpti
       return new Date(NaN);
     }
   }
-
   var subFnOptions = {
     firstWeekContainsDate: firstWeekContainsDate,
     weekStartsOn: weekStartsOn,
     locale: locale
-  }; // If timezone isn't specified, it will be set to the system timezone
+  };
 
-  var setters = [{
-    priority: TIMEZONE_UNIT_PRIORITY,
-    subPriority: -1,
-    set: dateToSystemTimezone,
-    index: 0
-  }];
-  var i;
+  // If timezone isn't specified, it will be set to the system timezone
+  var setters = [new DateToSystemTimezoneSetter()];
   var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
     var firstCharacter = substring[0];
-
-    if (firstCharacter === 'p' || firstCharacter === 'P') {
+    if (firstCharacter in longFormatters$1) {
       var longFormatter = longFormatters$1[firstCharacter];
-      return longFormatter(substring, locale.formatLong, subFnOptions);
+      return longFormatter(substring, locale.formatLong);
     }
-
     return substring;
   }).join('').match(formattingTokensRegExp);
   var usedTokens = [];
-
-  for (i = 0; i < tokens.length; i++) {
-    var token = tokens[i];
-
-    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
-      throwProtectedError(token, formatString, dirtyDateString);
-    }
-
-    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
-      throwProtectedError(token, formatString, dirtyDateString);
-    }
-
-    var firstCharacter = token[0];
-    var parser = parsers$1[firstCharacter];
-
-    if (parser) {
-      var incompatibleTokens = parser.incompatibleTokens;
-
-      if (Array.isArray(incompatibleTokens)) {
-        var incompatibleToken = void 0;
-
-        for (var _i = 0; _i < usedTokens.length; _i++) {
-          var usedToken = usedTokens[_i].token;
-
-          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
-            incompatibleToken = usedTokens[_i];
-            break;
+  var _iterator = _createForOfIteratorHelper(tokens),
+    _step;
+  try {
+    var _loop = function _loop() {
+      var token = _step.value;
+      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
+        throwProtectedError(token, formatString, dirtyDateString);
+      }
+      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
+        throwProtectedError(token, formatString, dirtyDateString);
+      }
+      var firstCharacter = token[0];
+      var parser = parsers[firstCharacter];
+      if (parser) {
+        var incompatibleTokens = parser.incompatibleTokens;
+        if (Array.isArray(incompatibleTokens)) {
+          var incompatibleToken = usedTokens.find(function (usedToken) {
+            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
+          });
+          if (incompatibleToken) {
+            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
           }
+        } else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
+          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
         }
-
-        if (incompatibleToken) {
-          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
+        usedTokens.push({
+          token: firstCharacter,
+          fullToken: token
+        });
+        var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
+        if (!parseResult) {
+          return {
+            v: new Date(NaN)
+          };
+        }
+        setters.push(parseResult.setter);
+        dateString = parseResult.rest;
+      } else {
+        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
+          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
         }
-      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {
-        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
-      }
-
-      usedTokens.push({
-        token: firstCharacter,
-        fullToken: token
-      });
-      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);
-
-      if (!parseResult) {
-        return new Date(NaN);
-      }
-
-      setters.push({
-        priority: parser.priority,
-        subPriority: parser.subPriority || 0,
-        set: parser.set,
-        validate: parser.validate,
-        value: parseResult.value,
-        index: setters.length
-      });
-      dateString = parseResult.rest;
-    } else {
-      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
-        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
-      } // Replace two single quote characters with one single quote character
-
-
-      if (token === "''") {
-        token = "'";
-      } else if (firstCharacter === "'") {
-        token = cleanEscapedString(token);
-      } // Cut token from string, or, if string doesn't match the token, return Invalid Date
 
+        // Replace two single quote characters with one single quote character
+        if (token === "''") {
+          token = "'";
+        } else if (firstCharacter === "'") {
+          token = cleanEscapedString(token);
+        }
 
-      if (dateString.indexOf(token) === 0) {
-        dateString = dateString.slice(token.length);
-      } else {
-        return new Date(NaN);
+        // Cut token from string, or, if string doesn't match the token, return Invalid Date
+        if (dateString.indexOf(token) === 0) {
+          dateString = dateString.slice(token.length);
+        } else {
+          return {
+            v: new Date(NaN)
+          };
+        }
       }
+    };
+    for (_iterator.s(); !(_step = _iterator.n()).done;) {
+      var _ret = _loop();
+      if (_typeof(_ret) === "object") return _ret.v;
     }
-  } // Check if the remaining input contains something other than whitespace
-
 
+    // Check if the remaining input contains something other than whitespace
+  } catch (err) {
+    _iterator.e(err);
+  } finally {
+    _iterator.f();
+  }
   if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
     return new Date(NaN);
   }
-
   var uniquePrioritySetters = setters.map(function (setter) {
     return setter.priority;
   }).sort(function (a, b) {
@@ -8212,48 +8691,38 @@ function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOpti
     return setterArray[0];
   });
   var date = toDate(dirtyReferenceDate);
-
-  if (isNaN(date)) {
+  if (isNaN(date.getTime())) {
     return new Date(NaN);
-  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
-  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
-  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37
-
+  }
 
+  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
   var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
   var flags = {};
-
-  for (i = 0; i < uniquePrioritySetters.length; i++) {
-    var setter = uniquePrioritySetters[i];
-
-    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
-      return new Date(NaN);
-    }
-
-    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)
-
-    if (result[0]) {
-      utcDate = result[0];
-      assign(flags, result[1]); // Result is date
-    } else {
-      utcDate = result;
+  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters),
+    _step2;
+  try {
+    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
+      var setter = _step2.value;
+      if (!setter.validate(utcDate, subFnOptions)) {
+        return new Date(NaN);
+      }
+      var result = setter.set(utcDate, flags, subFnOptions);
+      // Result is tuple (date, flags)
+      if (Array.isArray(result)) {
+        utcDate = result[0];
+        assign(flags, result[1]);
+        // Result is date
+      } else {
+        utcDate = result;
+      }
     }
+  } catch (err) {
+    _iterator2.e(err);
+  } finally {
+    _iterator2.f();
   }
-
   return utcDate;
 }
-
-function dateToSystemTimezone(date, flags) {
-  if (flags.timestampIsSet) {
-    return date;
-  }
-
-  var convertedDate = new Date(0);
-  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
-  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
-  return convertedDate;
-}
-
 function cleanEscapedString(input) {
   return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
 }
@@ -8305,8 +8774,8 @@ date.format = function (v, column) {
 };
 
 var date$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': date
+	__proto__: null,
+	'default': date
 });
 
 const number = Object.assign({}, defaultType);
@@ -8334,8 +8803,8 @@ number.compare = function (x, y) {
 };
 
 var number$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': number
+	__proto__: null,
+	'default': number
 });
 
 const decimal = Object.assign({}, number);
@@ -8346,8 +8815,8 @@ decimal.format = function (v) {
 };
 
 var decimal$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': decimal
+	__proto__: null,
+	'default': decimal
 });
 
 const percentage = Object.assign({}, number);
@@ -8358,8 +8827,8 @@ percentage.format = function (v) {
 };
 
 var percentage$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': percentage
+	__proto__: null,
+	'default': percentage
 });
 
 const boolean = Object.assign({}, defaultType);
@@ -8386,8 +8855,8 @@ boolean.compare = function (x, y) {
 };
 
 var boolean$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': boolean
+	__proto__: null,
+	'default': boolean
 });
 
 var index$1 = {
@@ -8934,13 +9403,13 @@ const _sfc_main = {
 									sortValue =
 										sortValue ||
 										sortFn(xvalue, yvalue, column, xRow, yRow) *
-											(srt.type === SORT_TYPES.Descending ? -1 : 1);
+										(srt.type === SORT_TYPES.Descending ? -1 : 1);
 								} else {
 									//* else we use our own sort
 									sortValue =
 										sortValue ||
 										column.typeDef.compare(xvalue, yvalue, column) *
-											(srt.type === SORT_TYPES.Descending ? -1 : 1);
+										(srt.type === SORT_TYPES.Descending ? -1 : 1);
 								}
 							}
 						}
@@ -9524,7 +9993,7 @@ const _sfc_main = {
 									this.columnFilters[fieldKey(col.field)],
 									false,
 									col.filterOptions &&
-										typeof col.filterOptions.filterDropdownItems === "object"
+									typeof col.filterOptions.filterDropdownItems === "object"
 								);
 							});
 							// should we remove the header?
@@ -9911,20 +10380,24 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
               name: "internal-table-actions",
               fn: vue.withCtx(() => [
                 vue.renderSlot(_ctx.$slots, "table-actions")
-              ])
+              ]),
+              key: "0"
             }
           : undefined
       ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["onKeyup", "onEnter", "value", "search-enabled", "global-search-placeholder"]),
-      ($options.selectedRowCount && !_ctx.disableSelectInfo)
+      (!_ctx.disableSelectInfo)
         ? (vue.openBlock(), vue.createElementBlock("div", {
             key: 1,
             class: vue.normalizeClass(["vgt-selection-info-row clearfix", _ctx.selectionInfoClass])
           }, [
             vue.createTextVNode(vue.toDisplayString($options.selectionInfo) + " ", 1 /* TEXT */),
-            vue.createElementVNode("a", {
-              href: "",
-              onClick: _cache[1] || (_cache[1] = vue.withModifiers($event => ($options.unselectAllInternal(true)), ["prevent"]))
-            }, vue.toDisplayString(_ctx.clearSelectionText), 1 /* TEXT */),
+            (!!_ctx.clearSelectionText)
+              ? (vue.openBlock(), vue.createElementBlock("a", {
+                  key: 0,
+                  href: "",
+                  onClick: _cache[1] || (_cache[1] = vue.withModifiers($event => ($options.unselectAllInternal(true)), ["prevent"]))
+                }, vue.toDisplayString(_ctx.clearSelectionText), 1 /* TEXT */))
+              : vue.createCommentVNode("v-if", true),
             vue.createElementVNode("div", _hoisted_3, [
               vue.renderSlot(_ctx.$slots, "selected-row-actions")
             ])
@@ -10066,7 +10539,8 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               formattedRow: slotProps.formattedRow,
                               row: slotProps.row
                             })
-                          ])
+                          ]),
+                          key: "0"
                         }
                       : undefined
                   ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["onVgtExpand", "header-row", "columns", "line-numbers", "selectable", "select-all-by-group", "collapsable", "collect-formatted", "formatted-row", "class", "get-classes", "full-colspan", "groupIndex", "onSelectGroupChange"]))
@@ -10127,7 +10601,7 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               : vue.createCommentVNode("v-if", true)
                           ], 64 /* STABLE_FRAGMENT */))
                         }), 256 /* UNKEYED_FRAGMENT */))
-                      ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_7))
+                      ], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_7))
                     : vue.createCommentVNode("v-if", true),
                   (_ctx.expandedRowIndex === index)
                     ? (vue.openBlock(), vue.createElementBlock("tr", {
@@ -10177,7 +10651,8 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               formattedRow: slotProps.formattedRow,
                               row: slotProps.row
                             })
-                          ])
+                          ]),
+                          key: "0"
                         }
                       : undefined
                   ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["header-row", "columns", "line-numbers", "selectable", "select-all-by-group", "collect-formatted", "formatted-row", "get-classes", "full-colspan", "groupIndex", "onSelectGroupChange"]))
diff --git a/node_modules/vue-good-table-next/dist/vue-good-table.esm.js b/node_modules/vue-good-table-next/dist/vue-good-table.esm.js
index 0d8c95b..84e2544 100644
--- a/node_modules/vue-good-table-next/dist/vue-good-table.esm.js
+++ b/node_modules/vue-good-table-next/dist/vue-good-table.esm.js
@@ -1,23 +1,10 @@
 /*!
-  * vue-good-table-next v0.2.0
+  * vue-good-table-next v0.2.1
   * (c) 2021-present Boris Flesch <boris@singlequote.net>
   * (c) 2017-2021 xaksis <shay@crayonbits.com>
   * @license MIT
   */
-import { openBlock, createElementBlock, toDisplayString, withModifiers, createElementVNode, withKeys, resolveComponent, withDirectives, Fragment, renderList, createCommentVNode, vModelSelect, createVNode, normalizeClass, renderSlot, normalizeStyle, createTextVNode, withCtx, createSlots, createBlock } from 'vue';
-
-const DEFAULT_SORT_TYPE = 'asc';
-const SORT_TYPES = {
-  Ascending: 'asc',
-  Descending: 'desc',
-  None: 'none',
-};
-
-const PAGINATION_MODES = {
-  Pages: 'pages',
-  Records: 'records',
-};
-const DEFAULT_ROWS_PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];
+import { openBlock, createElementBlock, createElementVNode, withModifiers, withKeys, createCommentVNode, renderSlot, normalizeClass, toDisplayString, Fragment, renderList, resolveComponent, normalizeStyle, createTextVNode, createVNode, withCtx, withDirectives, vModelSelect, createSlots, createBlock } from 'vue';
 
 var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
 
@@ -1876,2575 +1863,2087 @@ module.exports = isEqual;
 
 var isEqual = lodash_isequal.exports;
 
-// all diacritics
-let diacritics = {
-  a: [
-    "a",
-    "à",
-    "á",
-    "â",
-    "ã",
-    "ä",
-    "å",
-    "æ",
-    "ā",
-    "ă",
-    "ą",
-    "ǎ",
-    "ǟ",
-    "ǡ",
-    "ǻ",
-    "ȁ",
-    "ȃ",
-    "ȧ",
-    "ɐ",
-    "ɑ",
-    "ɒ",
-    "ͣ",
-    "а",
-    "ӑ",
-    "ӓ",
-    "ᵃ",
-    "ᵄ",
-    "ᶏ",
-    "ḁ",
-    "ẚ",
-    "ạ",
-    "ả",
-    "ấ",
-    "ầ",
-    "ẩ",
-    "ẫ",
-    "ậ",
-    "ắ",
-    "ằ",
-    "ẳ",
-    "ẵ",
-    "ặ",
-    "ₐ",
-    "ⱥ",
-    "ａ",
+var _export_sfc = (sfc, props) => {
+  const target = sfc.__vccOpts || sfc;
+  for (const [key, val] of props) {
+    target[key] = val;
+  }
+  return target;
+};
+
+const _sfc_main$6 = {
+  name: 'VgtGlobalSearch',
+  props: [
+    'value',
+    'searchEnabled',
+    'globalSearchPlaceholder',
   ],
-  b: ["b", "ƀ", "ƃ", "ɓ", "ᖯ", "ᵇ", "ᵬ", "ᶀ", "ḃ", "ḅ", "ḇ", "ｂ"],
-  c: ["c", "ç", "ć", "ĉ", "ċ", "č", "ƈ", "ȼ", "ɕ", "ͨ", "ᴄ", "ᶜ", "ḉ", "ↄ", "ｃ"],
-  d: [
-    "d",
-    "ď",
-    "đ",
-    "Ƌ",
-    "ƌ",
-    "ȡ",
-    "ɖ",
-    "ɗ",
-    "ͩ",
-    "ᵈ",
-    "ᵭ",
-    "ᶁ",
-    "ᶑ",
-    "ḋ",
-    "ḍ",
-    "ḏ",
-    "ḑ",
-    "ḓ",
-    "ｄ",
+  emits: [
+    'input',
+    'keyup',
+    'enter',
   ],
-  e: [
-    "e",
-    "è",
-    "é",
-    "ê",
-    "ë",
-    "ē",
-    "ĕ",
-    "ė",
-    "ę",
-    "ě",
-    "ǝ",
-    "ȅ",
-    "ȇ",
-    "ȩ",
-    "ɇ",
-    "ɘ",
-    "ͤ",
-    "ᵉ",
-    "ᶒ",
-    "ḕ",
-    "ḗ",
-    "ḙ",
-    "ḛ",
-    "ḝ",
-    "ẹ",
-    "ẻ",
-    "ẽ",
-    "ế",
-    "ề",
-    "ể",
-    "ễ",
-    "ệ",
-    "ₑ",
-    "ｅ",
+  data() {
+    return {
+      globalSearchTerm: null,
+      id: this.getId(),
+    };
+  },
+  computed: {
+    showControlBar() {
+      if (this.searchEnabled) return true;
+      if (this.$slots && this.$slots['internal-table-actions']) return true;
+      return false;
+    },
+  },
+  methods: {
+    updateValue(value) {
+      this.$emit('input', value);
+      this.$emit('keyup', value);
+    },
+    entered(value) {
+      this.$emit('enter', value);
+    },
+    getId() {
+      return `vgt-search-${Math.floor(Math.random() * Date.now())}`;
+    },
+  },
+};
+
+const _hoisted_1$6 = {
+  key: 0,
+  class: "vgt-global-search vgt-clearfix"
+};
+const _hoisted_2$6 = { class: "vgt-global-search__input vgt-pull-left" };
+const _hoisted_3$6 = ["for"];
+const _hoisted_4$6 = /*#__PURE__*/createElementVNode("span", {
+  "aria-hidden": "true",
+  class: "input__icon"
+}, [
+  /*#__PURE__*/createElementVNode("div", { class: "magnifying-glass" })
+], -1 /* HOISTED */);
+const _hoisted_5$6 = /*#__PURE__*/createElementVNode("span", { class: "sr-only" }, "Search", -1 /* HOISTED */);
+const _hoisted_6$6 = [
+  _hoisted_4$6,
+  _hoisted_5$6
+];
+const _hoisted_7$5 = ["id", "placeholder", "value"];
+const _hoisted_8$3 = { class: "vgt-global-search__actions vgt-pull-right" };
+
+function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
+  return ($options.showControlBar)
+    ? (openBlock(), createElementBlock("div", _hoisted_1$6, [
+        createElementVNode("div", _hoisted_2$6, [
+          ($props.searchEnabled)
+            ? (openBlock(), createElementBlock("form", {
+                key: 0,
+                onSubmit: _cache[2] || (_cache[2] = withModifiers(() => {}, ["prevent"])),
+                role: "search"
+              }, [
+                createElementVNode("label", { for: $data.id }, [..._hoisted_6$6], 8 /* PROPS */, _hoisted_3$6),
+                createElementVNode("input", {
+                  id: $data.id,
+                  type: "text",
+                  class: "vgt-input vgt-pull-left",
+                  placeholder: $props.globalSearchPlaceholder,
+                  value: $props.value,
+                  onInput: _cache[0] || (_cache[0] = $event => ($options.updateValue($event.target.value))),
+                  onKeyup: _cache[1] || (_cache[1] = withKeys($event => ($options.entered($event.target.value)), ["enter"]))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$5)
+              ], 32 /* NEED_HYDRATION */))
+            : createCommentVNode("v-if", true)
+        ]),
+        createElementVNode("div", _hoisted_8$3, [
+          renderSlot(_ctx.$slots, "internal-table-actions")
+        ])
+      ]))
+    : createCommentVNode("v-if", true)
+}
+var VgtGlobalSearch = /*#__PURE__*/_export_sfc(_sfc_main$6, [['render',_sfc_render$6]]);
+
+const _sfc_main$5 = {
+  name: 'VgtHeaderRow',
+  props: {
+    headerRow: {
+      type: Object,
+    },
+    columns: {
+      type: Array,
+    },
+    lineNumbers: {
+      type: Boolean,
+    },
+    selectable: {
+      type: Boolean,
+    },
+    selectAllByGroup: {
+      type: Boolean
+    },
+    collapsable: {
+      type: [Boolean, Number],
+      default: false,
+    },
+    collectFormatted: {
+      type: Function,
+    },
+    formattedRow: {
+      type: Function,
+    },
+    getClasses: {
+      type: Function,
+    },
+    fullColspan: {
+      type: Number,
+    },
+    groupIndex: {
+      type: Number
+    },
+  },
+  emits: [
+    'vgtExpand',
+    'select-group-change',
   ],
-  f: ["f", "ƒ", "ᵮ", "ᶂ", "ᶠ", "ḟ", "ｆ"],
-  g: ["g", "ĝ", "ğ", "ġ", "ģ", "ǥ", "ǧ", "ǵ", "ɠ", "ɡ", "ᵍ", "ᵷ", "ᵹ", "ᶃ", "ᶢ", "ḡ", "ｇ"],
-  h: [
-    "h",
-    "ĥ",
-    "ħ",
-    "ƕ",
-    "ȟ",
-    "ɥ",
-    "ɦ",
-    "ʮ",
-    "ʯ",
-    "ʰ",
-    "ʱ",
-    "ͪ",
-    "Һ",
-    "һ",
-    "ᑋ",
-    "ᶣ",
-    "ḣ",
-    "ḥ",
-    "ḧ",
-    "ḩ",
-    "ḫ",
-    "ⱨ",
-    "ｈ",
-  ],
-  i: [
-    "i",
-    "ì",
-    "í",
-    "î",
-    "ï",
-    "ĩ",
-    "ī",
-    "ĭ",
-    "į",
-    "ǐ",
-    "ȉ",
-    "ȋ",
-    "ɨ",
-    "ͥ",
-    "ᴉ",
-    "ᵎ",
-    "ᵢ",
-    "ᶖ",
-    "ᶤ",
-    "ḭ",
-    "ḯ",
-    "ỉ",
-    "ị",
-    "ｉ",
-  ],
-  j: ["j", "ĵ", "ǰ", "ɉ", "ʝ", "ʲ", "ᶡ", "ᶨ", "ｊ"],
-  k: ["k", "ķ", "ƙ", "ǩ", "ʞ", "ᵏ", "ᶄ", "ḱ", "ḳ", "ḵ", "ⱪ", "ｋ"],
-  l: [
-    "l",
-    "ĺ",
-    "ļ",
-    "ľ",
-    "ŀ",
-    "ł",
-    "ƚ",
-    "ȴ",
-    "ɫ",
-    "ɬ",
-    "ɭ",
-    "ˡ",
-    "ᶅ",
-    "ᶩ",
-    "ᶪ",
-    "ḷ",
-    "ḹ",
-    "ḻ",
-    "ḽ",
-    "ℓ",
-    "ⱡ",
-  ],
-  m: ["m", "ɯ", "ɰ", "ɱ", "ͫ", "ᴟ", "ᵐ", "ᵚ", "ᵯ", "ᶆ", "ᶬ", "ᶭ", "ḿ", "ṁ", "ṃ", "㎡", "㎥", "ｍ"],
-  n: [
-    "n",
-    "ñ",
-    "ń",
-    "ņ",
-    "ň",
-    "ŉ",
-    "ƞ",
-    "ǹ",
-    "ȵ",
-    "ɲ",
-    "ɳ",
-    "ᵰ",
-    "ᶇ",
-    "ᶮ",
-    "ᶯ",
-    "ṅ",
-    "ṇ",
-    "ṉ",
-    "ṋ",
-    "ⁿ",
-    "ｎ",
+  data() {
+    return {
+    };
+  },
+  computed: {
+    allSelected() {
+      const { headerRow } = this;
+      return headerRow.children.filter((row) => row.vgtSelected).length === headerRow.children.length;
+    }
+  },
+  methods: {
+    columnCollapsable(currentIndex) {
+      if (this.collapsable === true) {
+        return currentIndex === 0;
+      }
+      return currentIndex === this.collapsable;
+    },
+    toggleSelectGroup(event) {
+      this.$emit('select-group-change', {
+        groupIndex: this.groupIndex, checked: event.target.checked
+      });
+    }
+  },
+
+  mounted() {
+  },
+  components: {
+  },
+};
+
+const _hoisted_1$5 = ["colspan"];
+const _hoisted_2$5 = ["checked"];
+const _hoisted_3$5 = ["innerHTML"];
+const _hoisted_4$5 = { key: 1 };
+const _hoisted_5$5 = {
+  key: 1,
+  class: "vgt-row-header"
+};
+const _hoisted_6$5 = {
+  key: 2,
+  class: "vgt-row-header"
+};
+const _hoisted_7$4 = ["checked"];
+const _hoisted_8$2 = ["onClick"];
+const _hoisted_9$2 = { key: 0 };
+const _hoisted_10$2 = ["innerHTML"];
+
+function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
+  return (openBlock(), createElementBlock("tr", null, [
+    ($props.headerRow.mode === 'span')
+      ? (openBlock(), createElementBlock("th", {
+          key: 0,
+          class: "vgt-left-align vgt-row-header",
+          colspan: $props.fullColspan
+        }, [
+          ($props.selectAllByGroup)
+            ? renderSlot(_ctx.$slots, "table-header-group-select", {
+                key: 0,
+                columns: $props.columns,
+                row: $props.headerRow
+              }, () => [
+                createElementVNode("input", {
+                  type: "checkbox",
+                  checked: $options.allSelected,
+                  onChange: _cache[0] || (_cache[0] = $event => ($options.toggleSelectGroup($event)))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2$5)
+              ])
+            : createCommentVNode("v-if", true),
+          createElementVNode("span", {
+            onClick: _cache[1] || (_cache[1] = $event => ($props.collapsable ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {}))
+          }, [
+            ($props.collapsable)
+              ? (openBlock(), createElementBlock("span", {
+                  key: 0,
+                  class: normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
+                }, null, 2 /* CLASS */))
+              : createCommentVNode("v-if", true),
+            renderSlot(_ctx.$slots, "table-header-row", { row: $props.headerRow }, () => [
+              ($props.headerRow.html)
+                ? (openBlock(), createElementBlock("span", {
+                    key: 0,
+                    innerHTML: $props.headerRow.label
+                  }, null, 8 /* PROPS */, _hoisted_3$5))
+                : (openBlock(), createElementBlock("span", _hoisted_4$5, toDisplayString($props.headerRow.label), 1 /* TEXT */))
+            ])
+          ])
+        ], 8 /* PROPS */, _hoisted_1$5))
+      : createCommentVNode("v-if", true),
+    createCommentVNode(" if the mode is not span, we display every column "),
+    ($props.headerRow.mode !== 'span' && $props.lineNumbers)
+      ? (openBlock(), createElementBlock("th", _hoisted_5$5))
+      : createCommentVNode("v-if", true),
+    ($props.headerRow.mode !== 'span' && $props.selectable)
+      ? (openBlock(), createElementBlock("th", _hoisted_6$5, [
+          ($props.selectAllByGroup)
+            ? renderSlot(_ctx.$slots, "table-header-group-select", {
+                key: 0,
+                columns: $props.columns,
+                row: $props.headerRow
+              }, () => [
+                createElementVNode("input", {
+                  type: "checkbox",
+                  checked: $options.allSelected,
+                  onChange: _cache[2] || (_cache[2] = $event => ($options.toggleSelectGroup($event)))
+                }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$4)
+              ])
+            : createCommentVNode("v-if", true)
+        ]))
+      : createCommentVNode("v-if", true),
+    (openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, (column, i) => {
+      return (openBlock(), createElementBlock(Fragment, { key: i }, [
+        ($props.headerRow.mode !== 'span' && !column.hidden)
+          ? (openBlock(), createElementBlock("th", {
+              key: 0,
+              class: normalizeClass(["vgt-row-header", $props.getClasses(i, 'td')]),
+              onClick: $event => ($options.columnCollapsable(i) ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {})
+            }, [
+              ($options.columnCollapsable(i))
+                ? (openBlock(), createElementBlock("span", {
+                    key: 0,
+                    class: normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
+                  }, null, 2 /* CLASS */))
+                : createCommentVNode("v-if", true),
+              renderSlot(_ctx.$slots, "table-header-row", {
+                row: $props.headerRow,
+                column: column,
+                formattedRow: $props.formattedRow($props.headerRow, true)
+              }, () => [
+                (!column.html)
+                  ? (openBlock(), createElementBlock("span", _hoisted_9$2, toDisplayString($props.collectFormatted($props.headerRow, column, true)), 1 /* TEXT */))
+                  : createCommentVNode("v-if", true),
+                (column.html)
+                  ? (openBlock(), createElementBlock("span", {
+                      key: 1,
+                      innerHTML: $props.collectFormatted($props.headerRow, column, true)
+                    }, null, 8 /* PROPS */, _hoisted_10$2))
+                  : createCommentVNode("v-if", true)
+              ])
+            ], 10 /* CLASS, PROPS */, _hoisted_8$2))
+          : createCommentVNode("v-if", true)
+      ], 64 /* STABLE_FRAGMENT */))
+    }), 128 /* KEYED_FRAGMENT */))
+  ]))
+}
+var VgtHeaderRow = /*#__PURE__*/_export_sfc(_sfc_main$5, [['render',_sfc_render$5]]);
+
+const _sfc_main$4 = {
+  name: 'VgtFilterRow',
+  props: [
+    'lineNumbers',
+    'columns',
+    'expandRowsEnabled',
+    'typedColumns',
+    'globalSearchEnabled',
+    'selectable',
+    'mode',
   ],
-  o: [
-    "o",
-    "ò",
-    "ó",
-    "ô",
-    "õ",
-    "ö",
-    "ø",
-    "ō",
-    "ŏ",
-    "ő",
-    "ơ",
-    "ǒ",
-    "ǫ",
-    "ǭ",
-    "ǿ",
-    "ȍ",
-    "ȏ",
-    "ȫ",
-    "ȭ",
-    "ȯ",
-    "ȱ",
-    "ɵ",
-    "ͦ",
-    "о",
-    "ӧ",
-    "ө",
-    "ᴏ",
-    "ᴑ",
-    "ᴓ",
-    "ᴼ",
-    "ᵒ",
-    "ᶱ",
-    "ṍ",
-    "ṏ",
-    "ṑ",
-    "ṓ",
-    "ọ",
-    "ỏ",
-    "ố",
-    "ồ",
-    "ổ",
-    "ỗ",
-    "ộ",
-    "ớ",
-    "ờ",
-    "ở",
-    "ỡ",
-    "ợ",
-    "ₒ",
-    "ｏ",
-    "𐐬",
-  ],
-  p: ["p", "ᵖ", "ᵱ", "ᵽ", "ᶈ", "ṕ", "ṗ", "ｐ"],
-  q: ["q", "ɋ", "ʠ", "ᛩ", "ｑ"],
-  r: [
-    "r",
-    "ŕ",
-    "ŗ",
-    "ř",
-    "ȑ",
-    "ȓ",
-    "ɍ",
-    "ɹ",
-    "ɻ",
-    "ʳ",
-    "ʴ",
-    "ʵ",
-    "ͬ",
-    "ᵣ",
-    "ᵲ",
-    "ᶉ",
-    "ṙ",
-    "ṛ",
-    "ṝ",
-    "ṟ",
-  ],
-  s: ["s", "ś", "ŝ", "ş", "š", "ș", "ʂ", "ᔆ", "ᶊ", "ṡ", "ṣ", "ṥ", "ṧ", "ṩ", "ｓ"],
-  t: [
-    "t",
-    "ţ",
-    "ť",
-    "ŧ",
-    "ƫ",
-    "ƭ",
-    "ț",
-    "ʇ",
-    "ͭ",
-    "ᵀ",
-    "ᵗ",
-    "ᵵ",
-    "ᶵ",
-    "ṫ",
-    "ṭ",
-    "ṯ",
-    "ṱ",
-    "ẗ",
-    "ｔ",
-  ],
-  u: [
-    "u",
-    "ù",
-    "ú",
-    "û",
-    "ü",
-    "ũ",
-    "ū",
-    "ŭ",
-    "ů",
-    "ű",
-    "ų",
-    "ư",
-    "ǔ",
-    "ǖ",
-    "ǘ",
-    "ǚ",
-    "ǜ",
-    "ȕ",
-    "ȗ",
-    "ͧ",
-    "ߎ",
-    "ᵘ",
-    "ᵤ",
-    "ṳ",
-    "ṵ",
-    "ṷ",
-    "ṹ",
-    "ṻ",
-    "ụ",
-    "ủ",
-    "ứ",
-    "ừ",
-    "ử",
-    "ữ",
-    "ự",
-    "ｕ",
-  ],
-  v: ["v", "ʋ", "ͮ", "ᵛ", "ᵥ", "ᶹ", "ṽ", "ṿ", "ⱱ", "ｖ", "ⱴ"],
-  w: ["w", "ŵ", "ʷ", "ᵂ", "ẁ", "ẃ", "ẅ", "ẇ", "ẉ", "ẘ", "ⱳ", "ｗ"],
-  x: ["x", "̽", "͓", "ᶍ", "ͯ", "ẋ", "ẍ", "ₓ", "ｘ"],
-  y: ["y", "ý", "ÿ", "ŷ", "ȳ", "ɏ", "ʸ", "ẏ", "ỳ", "ỵ", "ỷ", "ỹ", "ｙ"],
-  z: [
-    "z",
-    "ź",
-    "ż",
-    "ž",
-    "ƶ",
-    "ȥ",
-    "ɀ",
-    "ʐ",
-    "ʑ",
-    "ᙆ",
-    "ᙇ",
-    "ᶻ",
-    "ᶼ",
-    "ᶽ",
-    "ẑ",
-    "ẓ",
-    "ẕ",
-    "ⱬ",
-    "ｚ",
-  ],
-};
+  emits: ['filter-changed'],
+  watch: {
+    columns: {
+      handler(newValue, oldValue) {
+        this.populateInitialFilters();
+      },
+      deep: true,
+      immediate: true,
+    },
+  },
+  data() {
+    return {
+      columnFilters: {},
+      timer: null,
+    };
+  },
+  computed: {
 
-// Precompiled Object with { key = Diacritic, value = real-Character }
-const compiledDiactitics = (function() {
-  let x = {};
+    // to create a filter row, we need to
+    // make sure that there is atleast 1 column
+    // that requires filtering
+    hasFilterRow() {
+      // if (this.mode === 'remote' || !this.globalSearchEnabled) {
+      for (let i = 0; i < this.columns.length; i++) {
+        const col = this.columns[i];
+        if (col.filterOptions && col.filterOptions.enabled) {
+          return true;
+        }
+      }
+      // }
+      return false;
+    },
+  },
+  methods: {
 
-  for (let key in diacritics) {
-    let ok = diacritics[key];
+    fieldKey(field) {
+      if (typeof(field) === 'function' && field.name) {
+        return field.name;
+      }
+      return field;
+    },
 
-    for (let rval in ok) {
-      let val = ok[rval];
+    reset(emitEvent = false) {
+      this.columnFilters = {};
 
-      // Do not replace the char with itself
-      if (val !== key) {
-        x[val] = key;
+      if (emitEvent) {
+        this.$emit('filter-changed', this.columnFilters);
       }
-    }
-  }
+    },
 
-  return x;
-})();
+    isFilterable(column) {
+      return column.filterOptions
+        && column.filterOptions.enabled;
+    },
 
-// Regex for detecting non-ASCII-Characters in String
-const regexNonASCII = /[^a-z0-9\s,.-]/;
+    isDropdown(column) {
+      return this.isFilterable(column)
+        && column.filterOptions.filterDropdownItems
+        && column.filterOptions.filterDropdownItems.length;
+    },
 
-/*
- * Main function of the module which removes all diacritics from the received text
- */
-const diacriticless = (text) => {
-  // When there are only ascii-Characters in the string, skip processing and return text right away
-  if (text.search(regexNonASCII) === -1) {
-    return text;
-  }
+    isDropdownObjects(column) {
+      return this.isDropdown(column)
+        && typeof column.filterOptions.filterDropdownItems[0] === 'object';
+    },
 
-  let result = "";
+    isDropdownArray(column) {
+      return this.isDropdown(column)
+        && typeof column.filterOptions.filterDropdownItems[0] !== 'object';
+    },
 
-  let len = text.length;
-  for (var i = 0; i < len; i++) {
-    let searchChar = text.charAt(i);
+    getClasses(column) {
+      const firstClass = 'filter-th';
+      return (column.filterOptions && column.filterOptions.styleClass) ? [firstClass, ...column.filterOptions.styleClass.split(' ')].join(' ') : firstClass;
+    },
 
-    // If applicable replace the diacritic character with the real one or use the original value
-    result += searchChar in compiledDiactitics ? compiledDiactitics[searchChar] : searchChar;
-  }
+    // get column's defined placeholder or default one
+    getPlaceholder(column) {
+      const placeholder = (this.isFilterable(column) && column.filterOptions.placeholder) || `Filter ${column.label}`;
+      return placeholder;
+    },
 
-  return result;
-};
+    getName(column) {
+      return `vgt-${this.fieldKey(column.field)}`;
+    },
 
-const escapeRegExp = str => str.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
+    updateFiltersOnEnter(column, value) {
+      if (this.timer) clearTimeout(this.timer);
+      this.updateFiltersImmediately(column.field, value);
+    },
 
-var defaultType = {
-  format(x) {
-    return x;
-  },
-  filterPredicate(rowval, filter, skipDiacritics = false, fromDropdown = false) {
-    // take care of nulls
-    if (typeof rowval === 'undefined' || rowval === null) {
-      return false;
-    }
+    updateFiltersOnKeyup(column, value) {
+      // if the trigger is enter, we don't filter on keyup
+      if (column.filterOptions.trigger === 'enter') return;
+      this.updateFilters(column, value);
+    },
 
-    // row value
-    const rowValue = skipDiacritics
-      ? String(rowval).toLowerCase()
-      : diacriticless(escapeRegExp(String(rowval)).toLowerCase());
+    updateSlotFilter(column, value) {
+      let fieldToFilter = column.filterOptions.slotFilterField || column.field;
+      if (typeof column.filterOptions.formatValue === 'function') {
+        value = column.filterOptions.formatValue(value);
+      }
+      this.updateFiltersImmediately(fieldToFilter, value);
+    },
 
-    // search term
-    const searchTerm = skipDiacritics
-      ? filter.toLowerCase()
-      : diacriticless(escapeRegExp(filter).toLowerCase());
+    // since vue doesn't detect property addition and deletion, we
+    // need to create helper function to set property etc
+    updateFilters(column, value) {
+      if (this.timer) clearTimeout(this.timer);
+      this.timer = setTimeout(() => {
+        this.updateFiltersImmediately(column.field, value);
+      }, 400);
+    },
 
-    // comparison
-    return fromDropdown ? rowValue === searchTerm : (rowValue.indexOf(searchTerm) > -1);
-  },
+    updateFiltersImmediately(field, value) {
+      this.columnFilters[this.fieldKey(field)] = value;
+      this.$emit('filter-changed', this.columnFilters);
+    },
 
-  compare(x, y) {
-    function cook(d) {
-      if (typeof d === 'undefined' || d === null) return '';
-      return diacriticless(String(d).toLowerCase());
-    }
-    x = cook(x);
-    y = cook(y);
-    if (x < y) return -1;
-    if (x > y) return 1;
-    return 0;
+    populateInitialFilters() {
+      for (let i = 0; i < this.columns.length; i++) {
+        const col = this.columns[i];
+        // lets see if there are initial
+        // filters supplied by user
+        if (this.isFilterable(col)
+          && typeof col.filterOptions.filterValue !== 'undefined'
+          && col.filterOptions.filterValue !== null) {
+          this.columnFilters[this.fieldKey(col.field)] = col.filterOptions.filterValue;
+          // this.updateFilters(col, col.filterOptions.filterValue);
+          // this.$set(col.filterOptions, 'filterValue', undefined);
+        }
+      }
+      //* lets emit event once all filters are set
+      this.$emit('filter-changed', this.columnFilters);
+    },
   },
 };
 
-var _export_sfc = (sfc, props) => {
-  const target = sfc.__vccOpts || sfc;
-  for (const [key, val] of props) {
-    target[key] = val;
+const _hoisted_1$4 = { key: 0 };
+const _hoisted_2$4 = { key: 0 };
+const _hoisted_3$4 = { key: 1 };
+const _hoisted_4$4 = { key: 2 };
+const _hoisted_5$4 = { key: 0 };
+const _hoisted_6$4 = ["name", "placeholder", "value", "onKeyup", "onInput"];
+const _hoisted_7$3 = ["name", "value", "onChange"];
+const _hoisted_8$1 = {
+  value: "",
+  key: "-1"
+};
+const _hoisted_9$1 = ["value"];
+const _hoisted_10$1 = ["name", "value", "onChange"];
+const _hoisted_11$1 = {
+  value: "",
+  key: "-1"
+};
+const _hoisted_12$1 = ["value"];
+
+function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
+  return ($options.hasFilterRow)
+    ? (openBlock(), createElementBlock("tr", _hoisted_1$4, [
+        ($props.expandRowsEnabled)
+          ? (openBlock(), createElementBlock("th", _hoisted_2$4))
+          : createCommentVNode("v-if", true),
+        ($props.lineNumbers)
+          ? (openBlock(), createElementBlock("th", _hoisted_3$4))
+          : createCommentVNode("v-if", true),
+        ($props.selectable)
+          ? (openBlock(), createElementBlock("th", _hoisted_4$4))
+          : createCommentVNode("v-if", true),
+        (openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, (column, index) => {
+          return (openBlock(), createElementBlock(Fragment, { key: index }, [
+            (!column.hidden)
+              ? (openBlock(), createElementBlock("th", {
+                  key: 0,
+                  class: normalizeClass($options.getClasses(column))
+                }, [
+                  renderSlot(_ctx.$slots, "column-filter", {
+                    column: column,
+                    updateFilters: $options.updateSlotFilter
+                  }, () => [
+                    ($options.isFilterable(column))
+                      ? (openBlock(), createElementBlock("div", _hoisted_5$4, [
+                          (!$options.isDropdown(column))
+                            ? (openBlock(), createElementBlock("input", {
+                                key: 0,
+                                name: $options.getName(column),
+                                type: "text",
+                                class: "vgt-input",
+                                placeholder: $options.getPlaceholder(column),
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onKeyup: withKeys($event => ($options.updateFiltersOnEnter(column, $event.target.value)), ["enter"]),
+                                onInput: $event => ($options.updateFiltersOnKeyup(column, $event.target.value))
+                              }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6$4))
+                            : createCommentVNode("v-if", true),
+                          createCommentVNode(" options are a list of primitives "),
+                          ($options.isDropdownArray(column))
+                            ? (openBlock(), createElementBlock("select", {
+                                key: 1,
+                                name: $options.getName(column),
+                                class: "vgt-select",
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
+                              }, [
+                                createElementVNode("option", _hoisted_8$1, toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
+                                (openBlock(true), createElementBlock(Fragment, null, renderList(column.filterOptions.filterDropdownItems, (option, i) => {
+                                  return (openBlock(), createElementBlock("option", {
+                                    key: i,
+                                    value: option
+                                  }, toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_9$1))
+                                }), 128 /* KEYED_FRAGMENT */))
+                              ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_7$3))
+                            : createCommentVNode("v-if", true),
+                          createCommentVNode(" options are a list of objects with text and value "),
+                          ($options.isDropdownObjects(column))
+                            ? (openBlock(), createElementBlock("select", {
+                                key: 2,
+                                name: $options.getName(column),
+                                class: "vgt-select",
+                                value: $data.columnFilters[$options.fieldKey(column.field)],
+                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
+                              }, [
+                                createElementVNode("option", _hoisted_11$1, toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
+                                (openBlock(true), createElementBlock(Fragment, null, renderList(column.filterOptions.filterDropdownItems, (option, i) => {
+                                  return (openBlock(), createElementBlock("option", {
+                                    key: i,
+                                    value: option.value
+                                  }, toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_12$1))
+                                }), 128 /* KEYED_FRAGMENT */))
+                              ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_10$1))
+                            : createCommentVNode("v-if", true)
+                        ]))
+                      : createCommentVNode("v-if", true)
+                  ])
+                ], 2 /* CLASS */))
+              : createCommentVNode("v-if", true)
+          ], 64 /* STABLE_FRAGMENT */))
+        }), 128 /* KEYED_FRAGMENT */))
+      ]))
+    : createCommentVNode("v-if", true)
+}
+var VgtFilterRow = /*#__PURE__*/_export_sfc(_sfc_main$4, [['render',_sfc_render$4]]);
+
+const DEFAULT_SORT_TYPE = 'asc';
+const SORT_TYPES = {
+  Ascending: 'asc',
+  Descending: 'desc',
+  None: 'none',
+};
+
+const PAGINATION_MODES = {
+  Pages: 'pages',
+  Records: 'records',
+};
+const DEFAULT_ROWS_PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];
+
+function getColumnFirstSortType(column) {
+  return column.firstSortType || DEFAULT_SORT_TYPE;
+}
+
+function getCurrentPrimarySort(sortArray, column) {
+  return ( sortArray.length === 1 && sortArray[0].field === column.field )
+  ? sortArray[0].type
+  : undefined;
+}
+
+function getNextSort(currentSort, column) {
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.Ascending) {
+    return SORT_TYPES.None
+  } else if (currentSort === SORT_TYPES.Ascending) {
+    return SORT_TYPES.Descending;
   }
-  return target;
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.Descending) {
+    return SORT_TYPES.Ascending;
+  } else if (currentSort === SORT_TYPES.Descending) {
+    return SORT_TYPES.None;
+  }
+
+  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
+    && currentSort === SORT_TYPES.None) {
+    return SORT_TYPES.Descending;
+  } else {
+    return SORT_TYPES.Ascending;
+  }
+
+}
+
+function getIndex(sortArray, column) {
+  for (let i = 0; i < sortArray.length; i++) {
+    if (column.field === sortArray[i].field) return i;
+  }
+  return -1;
+}
+
+const primarySort = (sortArray, column) => {
+  const currentPrimarySort = getCurrentPrimarySort(sortArray, column);
+  const nextPrimarySort = getNextSort(currentPrimarySort, column);
+  return [{
+    field: column.field,
+    type: currentPrimarySort ? nextPrimarySort : getColumnFirstSortType(column),
+  }];
 };
 
-const _sfc_main$6 = {
-  name: 'VgtPaginationPageInfo',
+const secondarySort = (sortArray, column) => {
+  const index = getIndex(sortArray, column);
+  if (index === -1) {
+    sortArray.push({
+      field: column.field,
+      type: getColumnFirstSortType(column),
+    });
+  } else {
+    sortArray[index].type = getNextSort(sortArray[index].type, column);
+  }
+  return sortArray;
+};
+
+const _sfc_main$3 = {
+  name: 'VgtTableHeader',
   props: {
-    currentPage: {
-      default: 1,
+    lineNumbers: {
+      default: false,
+      type: Boolean,
     },
-    lastPage: {
-      default: 1,
+    selectable: {
+      default: false,
+      type: Boolean,
     },
-    totalRecords: {
-      default: 0,
+    allSelected: {
+      default: false,
+      type: Boolean,
     },
-    ofText: {
-      default: 'of',
-      type: String,
+    allSelectedIndeterminate: {
+      default: false,
+      type: Boolean,
     },
-    pageText: {
-      default: 'page',
-      type: String,
+    columns: {
+      type: Array,
+    },
+    expandRowsEnabled: {
+      default: false,
+      type: Boolean,
     },
-    currentPerPage: {},
     mode: {
-      default: PAGINATION_MODES.Records,
+      type: String,
     },
-    infoFn: { default: null },
-  },
-  data() {
-    return {
-      id: this.getId(),
-    };
-  },
-  computed: {
-    pageInfo() {
-      return `${this.ofText} ${this.lastPage}`;
-    },
-    firstRecordOnPage() {
-      return ((this.currentPage - 1) * this.currentPerPage) + 1;
-    },
-    lastRecordOnPage() {
-      return Math.min(this.totalRecords, this.currentPage * this.currentPerPage);
-    },
-    recordInfo() {
-      let first = this.firstRecordOnPage;
-      const last = this.lastRecordOnPage;
-
-      if (last === 0) {
-        first = 0;
-      }
+    typedColumns: {},
 
-      return `${first} - ${last} ${this.ofText} ${this.totalRecords}`;
-    },
-    infoParams() {
-      let first = this.firstRecordOnPage;
-      const last = this.lastRecordOnPage;
-      if (last === 0) {
-        first = 0;
-      }
-      return {
-        firstRecordOnPage: first,
-        lastRecordOnPage: last,
-        totalRecords: this.totalRecords,
-        currentPage: this.currentPage,
-        totalPages: this.lastPage,
-      };
+    //* Sort related
+    sortable: {
+      type: Boolean,
     },
-  },
-  methods: {
-    getId() {
-      return `vgt-page-input-${Math.floor(Math.random() * Date.now())}`;
+    multipleColumnSort: {
+      type: Boolean,
+      default: true,
     },
-    changePage(event) {
-      const value = parseInt(event.target.value, 10);
-
-      //! invalid number
-      if (Number.isNaN(value)
-        || value > this.lastPage
-        || value < 1) {
-        event.target.value = this.currentPage;
-        return false;
-      }
 
-      //* valid number
-      event.target.value = value;
-      this.$emit('page-changed', value);
+    getClasses: {
+      type: Function,
     },
-  },
-  mounted() {
-  },
-  components: {
-  },
-};
-
-const _hoisted_1$6 = { class: "footer__navigation__page-info" };
-const _hoisted_2$6 = { key: 0 };
-const _hoisted_3$6 = ["for"];
-const _hoisted_4$6 = ["id", "value"];
-const _hoisted_5$6 = /*#__PURE__*/createElementVNode("span", {
-  id: "change-page-hint",
-  style: {"display":"none"}
-}, " Type a page number and press Enter to change the page. ", -1 /* HOISTED */);
-const _hoisted_6$6 = { key: 2 };
-
-function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
-  return (openBlock(), createElementBlock("div", _hoisted_1$6, [
-    ($props.infoFn)
-      ? (openBlock(), createElementBlock("div", _hoisted_2$6, toDisplayString($props.infoFn($options.infoParams)), 1 /* TEXT */))
-      : ($props.mode === 'pages')
-        ? (openBlock(), createElementBlock("form", {
-            key: 1,
-            onSubmit: _cache[1] || (_cache[1] = withModifiers(() => {}, ["prevent"]))
-          }, [
-            createElementVNode("label", {
-              for: $data.id,
-              class: "page-info__label"
-            }, [
-              createElementVNode("span", null, toDisplayString($props.pageText), 1 /* TEXT */),
-              createElementVNode("input", {
-                id: $data.id,
-                "aria-describedby": "change-page-hint",
-                "aria-controls": "vgb-table",
-                class: "footer__navigation__page-info__current-entry",
-                type: "text",
-                onKeyup: _cache[0] || (_cache[0] = withKeys(withModifiers((...args) => ($options.changePage && $options.changePage(...args)), ["stop"]), ["enter"])),
-                value: $props.currentPage
-              }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4$6),
-              createElementVNode("span", null, toDisplayString($options.pageInfo), 1 /* TEXT */)
-            ], 8 /* PROPS */, _hoisted_3$6),
-            _hoisted_5$6
-          ], 32 /* HYDRATE_EVENTS */))
-        : (openBlock(), createElementBlock("div", _hoisted_6$6, toDisplayString($options.recordInfo), 1 /* TEXT */))
-  ]))
-}
-var VgtPaginationPageInfo = /*#__PURE__*/_export_sfc(_sfc_main$6, [['render',_sfc_render$6]]);
 
-const _sfc_main$5 = {
-  name: 'VgtPagination',
-  props: {
-    styleClass: { default: 'table table-bordered' },
-    total: { default: null },
-    perPage: {},
-    rtl: { default: false },
-    perPageDropdownEnabled: { default: true },
-    customRowsPerPageDropdown: { default() { return []; } },
-    paginateDropdownAllowAll: { default: true },
-    mode: { default: PAGINATION_MODES.Records },
+    //* search related
+    searchEnabled: {
+      type: Boolean,
+    },
 
-    // text options
-    nextText: { default: 'Next' },
-    prevText: { default: 'Prev' },
-    rowsPerPageText: { default: 'Rows per page:' },
-    ofText: { default: 'of' },
-    pageText: { default: 'page' },
-    allText: { default: 'All' },
-    infoFn: { default: null },
-  },
+    tableRef: {},
 
-  data() {
-    return {
-      id: this.getId(),
-      currentPage: 1,
-      prevPage: 0,
-      currentPerPage: 10,
-      rowsPerPageOptions: [],
-    };
+    paginated: {},
   },
+  emits: [
+    'toggle-select-all',
+    'toggle-expand-rows-all',
+    'sort-change',
+    'filter-changed',
+  ],
   watch: {
-    perPage: {
-      handler(newValue, oldValue) {
-        this.handlePerPage();
-        this.perPageChanged(oldValue);
+    columns: {
+      handler() {
+        this.setColumnStyles();
       },
       immediate: true,
+      deep: true
     },
-
-    customRowsPerPageDropdown: {
+    tableRef: {
       handler() {
-        this.handlePerPage();
+        this.setColumnStyles();
       },
-      deep: true,
+      immediate: true,
     },
-
-    total: {
-      handler(newValue, oldValue) {
-        if(this.rowsPerPageOptions.indexOf(this.currentPerPage) === -1) {
-          this.currentPerPage = newValue;
+    paginated: {
+      handler() {
+        if (this.tableRef) {
+          this.setColumnStyles();
         }
-      }
-    }
+      },
+      deep: true,
+    },
+  },
+  data() {
+    return {
+      checkBoxThStyle: {},
+      lineNumberThStyle: {},
+      columnStyles: [],
+      sorts: [],
+      ro: null
+    };
   },
-
   computed: {
-    // Number of pages
-    pagesCount() {
-      const quotient = Math.floor(this.total / this.currentPerPage);
-      const remainder = this.total % this.currentPerPage;
 
-      return remainder === 0 ? quotient : quotient + 1;
+  },
+  methods: {
+    reset() {
+      this.$refs['filter-row'].reset(true);
     },
-
-    // Can go to next page
-    nextIsPossible() {
-      return this.currentPage < this.pagesCount;
+    toggleExpandRowsAll() {
+      this.$emit('toggle-expand-rows-all');
     },
-
-    // Can go to previous page
-    prevIsPossible() {
-      return this.currentPage > 1;
+    toggleSelectAll() {
+      this.$emit('toggle-select-all');
     },
-  },
-
-  methods: {
-    getId() {
-      return `vgt-select-rpp-${Math.floor(Math.random() * Date.now())}`;
+    isSortableColumn(column) {
+      const { sortable } = column;
+      const isSortable = typeof sortable === 'boolean' ? sortable : this.sortable;
+      return isSortable;
     },
-    // Change current page
-    changePage(pageNumber, emit = true) {
-      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {
-        this.prevPage = this.currentPage;
-        this.currentPage = pageNumber;
-        this.pageChanged(emit);
+    sort(e, column) {
+      //* if column is not sortable, return right here
+      if (!this.isSortableColumn(column)) return;
+
+      if (e.shiftKey && this.multipleColumnSort) {
+        this.sorts = secondarySort(this.sorts, column);
+      } else {
+        this.sorts = primarySort(this.sorts, column);
       }
+      this.$emit('sort-change', this.sorts);
     },
 
-    // Go to next page
-    nextPage() {
-      if (this.nextIsPossible) {
-        this.prevPage = this.currentPage;
-        ++this.currentPage;
-        this.pageChanged();
-      }
+    setInitialSort(sorts) {
+      this.sorts = sorts;
+      this.$emit('sort-change', this.sorts);
     },
 
-    // Go to previous page
-    previousPage() {
-      if (this.prevIsPossible) {
-        this.prevPage = this.currentPage;
-        --this.currentPage;
-        this.pageChanged();
+    getColumnSort(column) {
+      for (let i = 0; i < this.sorts.length; i += 1) {
+        if (this.sorts[i].field === column.field) {
+          return this.sorts[i].type || 'asc';
+        }
       }
+      return null;
     },
 
-    // Indicate page changing
-    pageChanged(emit = true) {
-      const payload = {
-        currentPage: this.currentPage,
-        prevPage: this.prevPage,
-      };
-      if (!emit) payload.noEmit = true;
-      this.$emit('page-changed', payload);
+    getColumnSortLong(column) {
+      return this.getColumnSort(column) === 'asc'
+        ? 'ascending'
+        : 'descending'
     },
 
-    // Indicate per page changing
-    perPageChanged(oldValue) {
-      // go back to first page
-      if (oldValue) {
-        //* only emit if this isn't first initialization
-        this.$emit('per-page-changed', { currentPerPage: this.currentPerPage });
-      }
-      this.changePage(1, false);
+    getHeaderClasses(column, index) {
+      const classes = Object.assign({}, this.getClasses(index, 'th'), {
+        sortable: this.isSortableColumn(column),
+        'sorting sorting-desc': this.getColumnSort(column) === 'desc',
+        'sorting sorting-asc': this.getColumnSort(column) === 'asc',
+      });
+      return classes;
     },
 
-    // Handle per page changing
-    handlePerPage() {
-      //* if there's a custom dropdown then we use that
-      if (this.customRowsPerPageDropdown !== null
-        && (Array.isArray(this.customRowsPerPageDropdown)
-        && this.customRowsPerPageDropdown.length !== 0)) {
-        this.rowsPerPageOptions = JSON.parse(JSON.stringify(this.customRowsPerPageDropdown));
-      } else {
-        //* otherwise we use the default rows per page dropdown
-        this.rowsPerPageOptions = JSON.parse(JSON.stringify(DEFAULT_ROWS_PER_PAGE_DROPDOWN));
+    filterRows(columnFilters) {
+      this.$emit('filter-changed', columnFilters);
+    },
+
+    getWidthStyle(dom) {
+      if (window && window.getComputedStyle && dom) {
+        const cellStyle = window.getComputedStyle(dom, null);
+        return {
+          width: cellStyle.width,
+        };
       }
+      return {
+        width: 'auto',
+      };
+    },
 
-      if (this.perPage) {
-        this.currentPerPage = this.perPage;
-        // if perPage doesn't already exist, we add it
-        let found = false;
-        for (let i = 0; i < this.rowsPerPageOptions.length; i++) {
-          if (this.rowsPerPageOptions[i] === this.perPage) {
-            found = true;
-          }
-        }
-        if (!found && this.perPage !== -1) {
-          this.rowsPerPageOptions.unshift(this.perPage);
+    setColumnStyles() {
+      const colStyles = [];
+      for (let i = 0; i < this.columns.length; i++) {
+        if (this.tableRef) {
+          let skip = 0;
+          if (this.selectable) skip++;
+          if (this.lineNumbers) skip++;
+          const cell = this.tableRef.rows[0].cells[i + skip];
+          colStyles.push(this.getWidthStyle(cell));
+        } else {
+          colStyles.push({
+            minWidth: this.columns[i].width ? this.columns[i].width : 'auto',
+            maxWidth: this.columns[i].width ? this.columns[i].width : 'auto',
+            width: this.columns[i].width ? this.columns[i].width : 'auto',
+          });
         }
-      } else {
-        // reset to default
-        this.currentPerPage = 10;
       }
+      this.columnStyles = colStyles;
     },
-  },
 
-  mounted() {
-  },
+    getColumnStyle(column, index) {
+      const styleObject = {
+        minWidth: column.width ? column.width : 'auto',
+        maxWidth: column.width ? column.width : 'auto',
+        width: column.width ? column.width : 'auto',
+      };
+      //* if fixed header we need to get width from original table
+      if (this.tableRef) {
+        if (this.selectable) index++;
+        if (this.lineNumbers) index++;
 
-  components: {
-    'pagination-page-info': VgtPaginationPageInfo,
+        const cell = this.tableRef.rows[0].cells[index];
+        const cellStyle = window.getComputedStyle(cell, null);
+        styleObject.width = cellStyle.width;
+      }
+      return styleObject;
+    },
   },
-};
-
-const _hoisted_1$5 = { class: "vgt-wrap__footer vgt-clearfix" };
-const _hoisted_2$5 = {
-  key: 0,
-  class: "footer__row-count vgt-pull-left"
-};
-const _hoisted_3$5 = ["for"];
-const _hoisted_4$5 = ["id"];
-const _hoisted_5$5 = ["value"];
-const _hoisted_6$5 = ["value"];
-const _hoisted_7$5 = { class: "footer__navigation vgt-pull-right" };
-
-function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
-  const _component_pagination_page_info = resolveComponent("pagination-page-info");
-
-  return (openBlock(), createElementBlock("div", _hoisted_1$5, [
-    ($props.perPageDropdownEnabled)
-      ? (openBlock(), createElementBlock("div", _hoisted_2$5, [
-          createElementVNode("form", null, [
-            createElementVNode("label", {
-              for: $data.id,
-              class: "footer__row-count__label"
-            }, toDisplayString($props.rowsPerPageText) + ":", 9 /* TEXT, PROPS */, _hoisted_3$5),
-            withDirectives(createElementVNode("select", {
-              id: $data.id,
-              autocomplete: "off",
-              name: "perPageSelect",
-              class: "footer__row-count__select",
-              "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => (($data.currentPerPage) = $event)),
-              onChange: _cache[1] || (_cache[1] = (...args) => ($options.perPageChanged && $options.perPageChanged(...args))),
-              "aria-controls": "vgt-table"
-            }, [
-              (openBlock(true), createElementBlock(Fragment, null, renderList($data.rowsPerPageOptions, (option, idx) => {
-                return (openBlock(), createElementBlock("option", {
-                  key: idx,
-                  value: option
-                }, toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_5$5))
-              }), 128 /* KEYED_FRAGMENT */)),
-              ($props.paginateDropdownAllowAll)
-                ? (openBlock(), createElementBlock("option", {
-                    key: 0,
-                    value: $props.total
-                  }, toDisplayString($props.allText), 9 /* TEXT, PROPS */, _hoisted_6$5))
-                : createCommentVNode("v-if", true)
-            ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_4$5), [
-              [vModelSelect, $data.currentPerPage]
-            ])
-          ])
-        ]))
-      : createCommentVNode("v-if", true),
-    createElementVNode("div", _hoisted_7$5, [
-      createVNode(_component_pagination_page_info, {
-        onPageChanged: $options.changePage,
-        "total-records": $props.total,
-        "last-page": $options.pagesCount,
-        "current-page": $data.currentPage,
-        "current-per-page": $data.currentPerPage,
-        "of-text": $props.ofText,
-        "page-text": $props.pageText,
-        "info-fn": $props.infoFn,
-        mode: $props.mode
-      }, null, 8 /* PROPS */, ["onPageChanged", "total-records", "last-page", "current-page", "current-per-page", "of-text", "page-text", "info-fn", "mode"]),
-      createElementVNode("button", {
-        type: "button",
-        "aria-controls": "vgt-table",
-        class: normalizeClass(["footer__navigation__page-btn", { disabled: !$options.prevIsPossible }]),
-        onClick: _cache[2] || (_cache[2] = withModifiers((...args) => ($options.previousPage && $options.previousPage(...args)), ["prevent","stop"]))
-      }, [
-        createElementVNode("span", {
-          "aria-hidden": "true",
-          class: normalizeClass(["chevron", { 'left': !$props.rtl, 'right': $props.rtl }])
-        }, null, 2 /* CLASS */),
-        createElementVNode("span", null, toDisplayString($props.prevText), 1 /* TEXT */)
-      ], 2 /* CLASS */),
-      createElementVNode("button", {
-        type: "button",
-        "aria-controls": "vgt-table",
-        class: normalizeClass(["footer__navigation__page-btn", { disabled: !$options.nextIsPossible }]),
-        onClick: _cache[3] || (_cache[3] = withModifiers((...args) => ($options.nextPage && $options.nextPage(...args)), ["prevent","stop"]))
-      }, [
-        createElementVNode("span", null, toDisplayString($props.nextText), 1 /* TEXT */),
-        createElementVNode("span", {
-          "aria-hidden": "true",
-          class: normalizeClass(["chevron", { 'right': !$props.rtl, 'left': $props.rtl }])
-        }, null, 2 /* CLASS */)
-      ], 2 /* CLASS */)
-    ])
-  ]))
-}
-var VgtPagination = /*#__PURE__*/_export_sfc(_sfc_main$5, [['render',_sfc_render$5]]);
+  mounted() {
+    this.$nextTick(() => {
+      // We're going to watch the parent element for resize events, and calculate column widths if it changes
+      if ('ResizeObserver' in window) {
+        this.ro = new ResizeObserver(() => {
+            this.setColumnStyles();
+        });
+        this.ro.observe(this.$parent.$el);
 
-const _sfc_main$4 = {
-  name: 'VgtGlobalSearch',
-  props: [
-    'value',
-    'searchEnabled',
-    'globalSearchPlaceholder',
-  ],
-  emits: [
-    'input',
-    'keyup',
-    'enter',
-  ],
-  data() {
-    return {
-      globalSearchTerm: null,
-      id: this.getId(),
-    };
+        // If this is a fixed-header table, we want to observe each column header from the non-fixed header.
+        // You can imagine two columns swapping widths, which wouldn't cause the above to trigger.
+        // This gets the first tr element of the primary table header, and iterates through its children (the th elements)
+        if (this.tableRef) {
+          Array.from(this.$parent.$refs['table-header-primary'].$el.children[0].children).forEach((header) => {
+            this.ro.observe(header);
+          });
+        }
+      }
+    });
   },
-  computed: {
-    showControlBar() {
-      if (this.searchEnabled) return true;
-      if (this.$slots && this.$slots['internal-table-actions']) return true;
-      return false;
-    },
+  beforeUnmount() {
+    if (this.ro) {
+      this.ro.disconnect();
+    }
   },
-  methods: {
-    updateValue(value) {
-      this.$emit('input', value);
-      this.$emit('keyup', value);
-    },
-    entered(value) {
-      this.$emit('enter', value);
-    },
-    getId() {
-      return `vgt-search-${Math.floor(Math.random() * Date.now())}`;
-    },
+  components: {
+    'vgt-filter-row': VgtFilterRow,
   },
 };
 
-const _hoisted_1$4 = {
+const _hoisted_1$3 = {
   key: 0,
-  class: "vgt-global-search vgt-clearfix"
+  scope: "col",
+  class: "line-numbers"
 };
-const _hoisted_2$4 = { class: "vgt-global-search__input vgt-pull-left" };
-const _hoisted_3$4 = ["for"];
-const _hoisted_4$4 = /*#__PURE__*/createElementVNode("span", {
-  "aria-hidden": "true",
-  class: "input__icon"
-}, [
-  /*#__PURE__*/createElementVNode("div", { class: "magnifying-glass" })
-], -1 /* HOISTED */);
-const _hoisted_5$4 = /*#__PURE__*/createElementVNode("span", { class: "sr-only" }, "Search", -1 /* HOISTED */);
-const _hoisted_6$4 = [
-  _hoisted_4$4,
-  _hoisted_5$4
-];
-const _hoisted_7$4 = ["id", "placeholder", "value"];
-const _hoisted_8$3 = { class: "vgt-global-search__actions vgt-pull-right" };
+const _hoisted_2$3 = {
+  key: 1,
+  scope: "col",
+  class: "vgt-checkbox-col"
+};
+const _hoisted_3$3 = ["checked", ".indeterminate"];
+const _hoisted_4$3 = {
+  key: 2,
+  scope: "col",
+  class: "vgt-checkbox-col"
+};
+const _hoisted_5$3 = ["title", "aria-sort", "aria-controls"];
+const _hoisted_6$3 = ["onClick"];
+const _hoisted_7$2 = { class: "sr-only" };
 
-function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
-  return ($options.showControlBar)
-    ? (openBlock(), createElementBlock("div", _hoisted_1$4, [
-        createElementVNode("div", _hoisted_2$4, [
-          ($props.searchEnabled)
-            ? (openBlock(), createElementBlock("form", {
-                key: 0,
-                onSubmit: _cache[2] || (_cache[2] = withModifiers(() => {}, ["prevent"])),
-                role: "search"
-              }, [
-                createElementVNode("label", { for: $data.id }, _hoisted_6$4, 8 /* PROPS */, _hoisted_3$4),
-                createElementVNode("input", {
-                  id: $data.id,
-                  type: "text",
-                  class: "vgt-input vgt-pull-left",
-                  placeholder: $props.globalSearchPlaceholder,
-                  value: $props.value,
-                  onInput: _cache[0] || (_cache[0] = $event => ($options.updateValue($event.target.value))),
-                  onKeyup: _cache[1] || (_cache[1] = withKeys($event => ($options.entered($event.target.value)), ["enter"]))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$4)
-              ], 32 /* HYDRATE_EVENTS */))
+function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
+  const _component_vgt_filter_row = resolveComponent("vgt-filter-row");
+
+  return (openBlock(), createElementBlock("thead", null, [
+    createElementVNode("tr", null, [
+      ($props.lineNumbers)
+        ? (openBlock(), createElementBlock("th", _hoisted_1$3))
+        : createCommentVNode("v-if", true),
+      ($props.selectable)
+        ? (openBlock(), createElementBlock("th", _hoisted_2$3, [
+            createElementVNode("input", {
+              type: "checkbox",
+              checked: $props.allSelected,
+              ".indeterminate": $props.allSelectedIndeterminate,
+              onChange: _cache[0] || (_cache[0] = (...args) => ($options.toggleSelectAll && $options.toggleSelectAll(...args)))
+            }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_3$3)
+          ]))
+        : createCommentVNode("v-if", true),
+      ($props.expandRowsEnabled)
+        ? (openBlock(), createElementBlock("th", _hoisted_4$3, [
+            createElementVNode("a", {
+              href: "",
+              onClick: _cache[1] || (_cache[1] = withModifiers((...args) => ($options.toggleExpandRowsAll && $options.toggleExpandRowsAll(...args)), ["prevent"])),
+              class: "vgt-wrap__expander"
+            }, " (+) ")
+          ]))
+        : createCommentVNode("v-if", true),
+      (openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, (column, index) => {
+        return (openBlock(), createElementBlock(Fragment, { key: index }, [
+          (!column.hidden)
+            ? (openBlock(), createElementBlock("th", {
+                key: 0,
+                scope: "col",
+                title: column.tooltip,
+                class: normalizeClass($options.getHeaderClasses(column, index)),
+                style: normalizeStyle($data.columnStyles[index]),
+                "aria-sort": $options.getColumnSortLong(column),
+                "aria-controls": `col-${index}`
+              }, [
+                renderSlot(_ctx.$slots, "table-column", { column: column }, () => [
+                  createTextVNode(toDisplayString(column.label), 1 /* TEXT */)
+                ]),
+                ($options.isSortableColumn(column))
+                  ? (openBlock(), createElementBlock("button", {
+                      key: 0,
+                      onClick: $event => ($options.sort($event, column))
+                    }, [
+                      createElementVNode("span", _hoisted_7$2, " Sort table by " + toDisplayString(column.label) + " in " + toDisplayString($options.getColumnSortLong(column)) + " order ", 1 /* TEXT */)
+                    ], 8 /* PROPS */, _hoisted_6$3))
+                  : createCommentVNode("v-if", true)
+              ], 14 /* CLASS, STYLE, PROPS */, _hoisted_5$3))
             : createCommentVNode("v-if", true)
-        ]),
-        createElementVNode("div", _hoisted_8$3, [
-          renderSlot(_ctx.$slots, "internal-table-actions")
-        ])
-      ]))
-    : createCommentVNode("v-if", true)
+        ], 64 /* STABLE_FRAGMENT */))
+      }), 128 /* KEYED_FRAGMENT */))
+    ]),
+    createVNode(_component_vgt_filter_row, {
+      ref: "filter-row",
+      onFilterChanged: $options.filterRows,
+      "global-search-enabled": $props.searchEnabled,
+      "line-numbers": $props.lineNumbers,
+      "expand-rows-enabled": $props.expandRowsEnabled,
+      selectable: $props.selectable,
+      columns: $props.columns,
+      mode: $props.mode,
+      "typed-columns": $props.typedColumns
+    }, {
+      "column-filter": withCtx((slotProps) => [
+        renderSlot(_ctx.$slots, "column-filter", {
+          column: slotProps.column,
+          updateFilters: slotProps.updateFilters
+        })
+      ]),
+      _: 3 /* FORWARDED */
+    }, 8 /* PROPS */, ["onFilterChanged", "global-search-enabled", "line-numbers", "expand-rows-enabled", "selectable", "columns", "mode", "typed-columns"])
+  ]))
 }
-var VgtGlobalSearch = /*#__PURE__*/_export_sfc(_sfc_main$4, [['render',_sfc_render$4]]);
+var VgtTableHeader = /*#__PURE__*/_export_sfc(_sfc_main$3, [['render',_sfc_render$3]]);
 
-const _sfc_main$3 = {
-  name: 'VgtFilterRow',
-  props: [
-    'lineNumbers',
-    'columns',
-    'expandRowsEnabled',
-    'typedColumns',
-    'globalSearchEnabled',
-    'selectable',
-    'mode',
-  ],
-  emits: ['filter-changed'],
-  watch: {
-    columns: {
-      handler(newValue, oldValue) {
-        this.populateInitialFilters();
-      },
-      deep: true,
-      immediate: true,
+const _sfc_main$2 = {
+  name: 'VgtPaginationPageInfo',
+  props: {
+    currentPage: {
+      default: 1,
+    },
+    lastPage: {
+      default: 1,
+    },
+    totalRecords: {
+      default: 0,
+    },
+    ofText: {
+      default: 'of',
+      type: String,
+    },
+    pageText: {
+      default: 'page',
+      type: String,
     },
+    currentPerPage: {},
+    mode: {
+      default: PAGINATION_MODES.Records,
+    },
+    infoFn: { default: null },
   },
   data() {
     return {
-      columnFilters: {},
-      timer: null,
+      id: this.getId(),
     };
   },
   computed: {
-
-    // to create a filter row, we need to
-    // make sure that there is atleast 1 column
-    // that requires filtering
-    hasFilterRow() {
-      // if (this.mode === 'remote' || !this.globalSearchEnabled) {
-      for (let i = 0; i < this.columns.length; i++) {
-        const col = this.columns[i];
-        if (col.filterOptions && col.filterOptions.enabled) {
-          return true;
-        }
-      }
-      // }
-      return false;
+    pageInfo() {
+      return `${this.ofText} ${this.lastPage}`;
     },
-  },
-  methods: {
-
-    fieldKey(field) {
-      if (typeof(field) === 'function' && field.name) {
-        return field.name;
-      }
-      return field;
+    firstRecordOnPage() {
+      return ((this.currentPage - 1) * this.currentPerPage) + 1;
     },
-
-    reset(emitEvent = false) {
-      this.columnFilters = {};
-
-      if (emitEvent) {
-        this.$emit('filter-changed', this.columnFilters);
-      }
+    lastRecordOnPage() {
+      return Math.min(this.totalRecords, this.currentPage * this.currentPerPage);
     },
+    recordInfo() {
+      let first = this.firstRecordOnPage;
+      const last = this.lastRecordOnPage;
 
-    isFilterable(column) {
-      return column.filterOptions
-        && column.filterOptions.enabled;
-    },
+      if (last === 0) {
+        first = 0;
+      }
 
-    isDropdown(column) {
-      return this.isFilterable(column)
-        && column.filterOptions.filterDropdownItems
-        && column.filterOptions.filterDropdownItems.length;
+      return `${first} - ${last} ${this.ofText} ${this.totalRecords}`;
     },
-
-    isDropdownObjects(column) {
-      return this.isDropdown(column)
-        && typeof column.filterOptions.filterDropdownItems[0] === 'object';
+    infoParams() {
+      let first = this.firstRecordOnPage;
+      const last = this.lastRecordOnPage;
+      if (last === 0) {
+        first = 0;
+      }
+      return {
+        firstRecordOnPage: first,
+        lastRecordOnPage: last,
+        totalRecords: this.totalRecords,
+        currentPage: this.currentPage,
+        totalPages: this.lastPage,
+      };
     },
-
-    isDropdownArray(column) {
-      return this.isDropdown(column)
-        && typeof column.filterOptions.filterDropdownItems[0] !== 'object';
+  },
+  methods: {
+    getId() {
+      return `vgt-page-input-${Math.floor(Math.random() * Date.now())}`;
     },
+    changePage(event) {
+      const value = parseInt(event.target.value, 10);
 
-    getClasses(column) {
-      const firstClass = 'filter-th';
-      return (column.filterOptions && column.filterOptions.styleClass) ? [firstClass, ...column.filterOptions.styleClass.split(' ')].join(' ') : firstClass;
-    },
+      //! invalid number
+      if (Number.isNaN(value)
+        || value > this.lastPage
+        || value < 1) {
+        event.target.value = this.currentPage;
+        return false;
+      }
 
-    // get column's defined placeholder or default one
-    getPlaceholder(column) {
-      const placeholder = (this.isFilterable(column) && column.filterOptions.placeholder) || `Filter ${column.label}`;
-      return placeholder;
+      //* valid number
+      event.target.value = value;
+      this.$emit('page-changed', value);
     },
+  },
+  mounted() {
+  },
+  components: {
+  },
+};
 
-    getName(column) {
-      return `vgt-${this.fieldKey(column.field)}`;
-    },
+const _hoisted_1$2 = { class: "footer__navigation__page-info" };
+const _hoisted_2$2 = { key: 0 };
+const _hoisted_3$2 = ["for"];
+const _hoisted_4$2 = ["id", "value"];
+const _hoisted_5$2 = /*#__PURE__*/createElementVNode("span", {
+  id: "change-page-hint",
+  style: {"display":"none"}
+}, " Type a page number and press Enter to change the page. ", -1 /* HOISTED */);
+const _hoisted_6$2 = { key: 2 };
 
-    updateFiltersOnEnter(column, value) {
-      if (this.timer) clearTimeout(this.timer);
-      this.updateFiltersImmediately(column.field, value);
-    },
+function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
+  return (openBlock(), createElementBlock("div", _hoisted_1$2, [
+    ($props.infoFn)
+      ? (openBlock(), createElementBlock("div", _hoisted_2$2, toDisplayString($props.infoFn($options.infoParams)), 1 /* TEXT */))
+      : ($props.mode === 'pages')
+        ? (openBlock(), createElementBlock("form", {
+            key: 1,
+            onSubmit: _cache[1] || (_cache[1] = withModifiers(() => {}, ["prevent"]))
+          }, [
+            createElementVNode("label", {
+              for: $data.id,
+              class: "page-info__label"
+            }, [
+              createElementVNode("span", null, toDisplayString($props.pageText), 1 /* TEXT */),
+              createElementVNode("input", {
+                id: $data.id,
+                "aria-describedby": "change-page-hint",
+                "aria-controls": "vgb-table",
+                class: "footer__navigation__page-info__current-entry",
+                type: "text",
+                onKeyup: _cache[0] || (_cache[0] = withKeys(withModifiers((...args) => ($options.changePage && $options.changePage(...args)), ["stop"]), ["enter"])),
+                value: $props.currentPage
+              }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_4$2),
+              createElementVNode("span", null, toDisplayString($options.pageInfo), 1 /* TEXT */)
+            ], 8 /* PROPS */, _hoisted_3$2),
+            _hoisted_5$2
+          ], 32 /* NEED_HYDRATION */))
+        : (openBlock(), createElementBlock("div", _hoisted_6$2, toDisplayString($options.recordInfo), 1 /* TEXT */))
+  ]))
+}
+var VgtPaginationPageInfo = /*#__PURE__*/_export_sfc(_sfc_main$2, [['render',_sfc_render$2]]);
 
-    updateFiltersOnKeyup(column, value) {
-      // if the trigger is enter, we don't filter on keyup
-      if (column.filterOptions.trigger === 'enter') return;
-      this.updateFilters(column, value);
-    },
+const _sfc_main$1 = {
+  name: 'VgtPagination',
+  props: {
+    styleClass: { default: 'table table-bordered' },
+    total: { default: null },
+    perPage: {},
+    rtl: { default: false },
+    perPageDropdownEnabled: { default: true },
+    customRowsPerPageDropdown: { default() { return []; } },
+    paginateDropdownAllowAll: { default: true },
+    mode: { default: PAGINATION_MODES.Records },
 
-    updateSlotFilter(column, value) {
-      let fieldToFilter = column.filterOptions.slotFilterField || column.field;
-      if (typeof column.filterOptions.formatValue === 'function') {
-        value = column.filterOptions.formatValue(value);
-      }
-      this.updateFiltersImmediately(fieldToFilter, value);
-    },
+    // text options
+    nextText: { default: 'Next' },
+    prevText: { default: 'Prev' },
+    rowsPerPageText: { default: 'Rows per page:' },
+    ofText: { default: 'of' },
+    pageText: { default: 'page' },
+    allText: { default: 'All' },
+    infoFn: { default: null },
+  },
 
-    // since vue doesn't detect property addition and deletion, we
-    // need to create helper function to set property etc
-    updateFilters(column, value) {
-      if (this.timer) clearTimeout(this.timer);
-      this.timer = setTimeout(() => {
-        this.updateFiltersImmediately(column.field, value);
-      }, 400);
+  data() {
+    return {
+      id: this.getId(),
+      currentPage: 1,
+      prevPage: 0,
+      currentPerPage: 10,
+      rowsPerPageOptions: [],
+    };
+  },
+  watch: {
+    perPage: {
+      handler(newValue, oldValue) {
+        this.handlePerPage();
+        this.perPageChanged(oldValue);
+      },
+      immediate: true,
     },
 
-    updateFiltersImmediately(field, value) {
-      this.columnFilters[this.fieldKey(field)] = value;
-      this.$emit('filter-changed', this.columnFilters);
+    customRowsPerPageDropdown: {
+      handler() {
+        this.handlePerPage();
+      },
+      deep: true,
     },
 
-    populateInitialFilters() {
-      for (let i = 0; i < this.columns.length; i++) {
-        const col = this.columns[i];
-        // lets see if there are initial
-        // filters supplied by user
-        if (this.isFilterable(col)
-          && typeof col.filterOptions.filterValue !== 'undefined'
-          && col.filterOptions.filterValue !== null) {
-          this.columnFilters[this.fieldKey(col.field)] = col.filterOptions.filterValue;
-          // this.updateFilters(col, col.filterOptions.filterValue);
-          // this.$set(col.filterOptions, 'filterValue', undefined);
+    total: {
+      handler(newValue, oldValue) {
+        if(this.rowsPerPageOptions.indexOf(this.currentPerPage) === -1) {
+          this.currentPerPage = newValue;
         }
       }
-      //* lets emit event once all filters are set
-      this.$emit('filter-changed', this.columnFilters);
-    },
+    }
   },
-};
 
-const _hoisted_1$3 = { key: 0 };
-const _hoisted_2$3 = { key: 0 };
-const _hoisted_3$3 = { key: 1 };
-const _hoisted_4$3 = { key: 2 };
-const _hoisted_5$3 = { key: 0 };
-const _hoisted_6$3 = ["name", "placeholder", "value", "onKeyup", "onInput"];
-const _hoisted_7$3 = ["name", "value", "onChange"];
-const _hoisted_8$2 = {
-  value: "",
-  key: "-1"
-};
-const _hoisted_9$2 = ["value"];
-const _hoisted_10$2 = ["name", "value", "onChange"];
-const _hoisted_11$1 = {
-  value: "",
-  key: "-1"
-};
-const _hoisted_12$1 = ["value"];
+  computed: {
+    // Number of pages
+    pagesCount() {
+      const quotient = Math.floor(this.total / this.currentPerPage);
+      const remainder = this.total % this.currentPerPage;
 
-function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
-  return ($options.hasFilterRow)
-    ? (openBlock(), createElementBlock("tr", _hoisted_1$3, [
-        ($props.expandRowsEnabled)
-          ? (openBlock(), createElementBlock("th", _hoisted_2$3))
-          : createCommentVNode("v-if", true),
-        ($props.lineNumbers)
-          ? (openBlock(), createElementBlock("th", _hoisted_3$3))
-          : createCommentVNode("v-if", true),
-        ($props.selectable)
-          ? (openBlock(), createElementBlock("th", _hoisted_4$3))
-          : createCommentVNode("v-if", true),
-        (openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, (column, index) => {
-          return (openBlock(), createElementBlock(Fragment, { key: index }, [
-            (!column.hidden)
-              ? (openBlock(), createElementBlock("th", {
-                  key: 0,
-                  class: normalizeClass($options.getClasses(column))
-                }, [
-                  renderSlot(_ctx.$slots, "column-filter", {
-                    column: column,
-                    updateFilters: $options.updateSlotFilter
-                  }, () => [
-                    ($options.isFilterable(column))
-                      ? (openBlock(), createElementBlock("div", _hoisted_5$3, [
-                          (!$options.isDropdown(column))
-                            ? (openBlock(), createElementBlock("input", {
-                                key: 0,
-                                name: $options.getName(column),
-                                type: "text",
-                                class: "vgt-input",
-                                placeholder: $options.getPlaceholder(column),
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onKeyup: withKeys($event => ($options.updateFiltersOnEnter(column, $event.target.value)), ["enter"]),
-                                onInput: $event => ($options.updateFiltersOnKeyup(column, $event.target.value))
-                              }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_6$3))
-                            : createCommentVNode("v-if", true),
-                          createCommentVNode(" options are a list of primitives "),
-                          ($options.isDropdownArray(column))
-                            ? (openBlock(), createElementBlock("select", {
-                                key: 1,
-                                name: $options.getName(column),
-                                class: "vgt-select",
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
-                              }, [
-                                createElementVNode("option", _hoisted_8$2, toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
-                                (openBlock(true), createElementBlock(Fragment, null, renderList(column.filterOptions.filterDropdownItems, (option, i) => {
-                                  return (openBlock(), createElementBlock("option", {
-                                    key: i,
-                                    value: option
-                                  }, toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_9$2))
-                                }), 128 /* KEYED_FRAGMENT */))
-                              ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$3))
-                            : createCommentVNode("v-if", true),
-                          createCommentVNode(" options are a list of objects with text and value "),
-                          ($options.isDropdownObjects(column))
-                            ? (openBlock(), createElementBlock("select", {
-                                key: 2,
-                                name: $options.getName(column),
-                                class: "vgt-select",
-                                value: $data.columnFilters[$options.fieldKey(column.field)],
-                                onChange: $event => ($options.updateFiltersImmediately(column.field, $event.target.value))
-                              }, [
-                                createElementVNode("option", _hoisted_11$1, toDisplayString($options.getPlaceholder(column)), 1 /* TEXT */),
-                                (openBlock(true), createElementBlock(Fragment, null, renderList(column.filterOptions.filterDropdownItems, (option, i) => {
-                                  return (openBlock(), createElementBlock("option", {
-                                    key: i,
-                                    value: option.value
-                                  }, toDisplayString(option.text), 9 /* TEXT, PROPS */, _hoisted_12$1))
-                                }), 128 /* KEYED_FRAGMENT */))
-                              ], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_10$2))
-                            : createCommentVNode("v-if", true)
-                        ]))
-                      : createCommentVNode("v-if", true)
-                  ])
-                ], 2 /* CLASS */))
-              : createCommentVNode("v-if", true)
-          ], 64 /* STABLE_FRAGMENT */))
-        }), 128 /* KEYED_FRAGMENT */))
-      ]))
-    : createCommentVNode("v-if", true)
-}
-var VgtFilterRow = /*#__PURE__*/_export_sfc(_sfc_main$3, [['render',_sfc_render$3]]);
+      return remainder === 0 ? quotient : quotient + 1;
+    },
 
-function getColumnFirstSortType(column) {
-  return column.firstSortType || DEFAULT_SORT_TYPE;
-}
+    // Can go to next page
+    nextIsPossible() {
+      return this.currentPage < this.pagesCount;
+    },
 
-function getCurrentPrimarySort(sortArray, column) {
-  return ( sortArray.length === 1 && sortArray[0].field === column.field )
-  ? sortArray[0].type
-  : undefined;
-}
+    // Can go to previous page
+    prevIsPossible() {
+      return this.currentPage > 1;
+    },
+  },
 
-function getNextSort(currentSort, column) {
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.Ascending) {
-    return SORT_TYPES.None
-  } else if (currentSort === SORT_TYPES.Ascending) {
-    return SORT_TYPES.Descending;
-  }
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.Descending) {
-    return SORT_TYPES.Ascending;
-  } else if (currentSort === SORT_TYPES.Descending) {
-    return SORT_TYPES.None;
-  }
+  methods: {
+    getId() {
+      return `vgt-select-rpp-${Math.floor(Math.random() * Date.now())}`;
+    },
+    // Change current page
+    changePage(pageNumber, emit = true) {
+      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {
+        this.prevPage = this.currentPage;
+        this.currentPage = pageNumber;
+        this.pageChanged(emit);
+      }
+    },
 
-  if (SORT_TYPES.Descending === getColumnFirstSortType(column)
-    && currentSort === SORT_TYPES.None) {
-    return SORT_TYPES.Descending;
-  } else {
-    return SORT_TYPES.Ascending;
-  }
+    // Go to next page
+    nextPage() {
+      if (this.nextIsPossible) {
+        this.prevPage = this.currentPage;
+        ++this.currentPage;
+        this.pageChanged();
+      }
+    },
 
-}
+    // Go to previous page
+    previousPage() {
+      if (this.prevIsPossible) {
+        this.prevPage = this.currentPage;
+        --this.currentPage;
+        this.pageChanged();
+      }
+    },
 
-function getIndex(sortArray, column) {
-  for (let i = 0; i < sortArray.length; i++) {
-    if (column.field === sortArray[i].field) return i;
-  }
-  return -1;
-}
+    // Indicate page changing
+    pageChanged(emit = true) {
+      const payload = {
+        currentPage: this.currentPage,
+        prevPage: this.prevPage,
+      };
+      if (!emit) payload.noEmit = true;
+      this.$emit('page-changed', payload);
+    },
 
-const primarySort = (sortArray, column) => {
-  const currentPrimarySort = getCurrentPrimarySort(sortArray, column);
-  const nextPrimarySort = getNextSort(currentPrimarySort, column);
-  return [{
-    field: column.field,
-    type: currentPrimarySort ? nextPrimarySort : getColumnFirstSortType(column),
-  }];
-};
-
-const secondarySort = (sortArray, column) => {
-  const index = getIndex(sortArray, column);
-  if (index === -1) {
-    sortArray.push({
-      field: column.field,
-      type: getColumnFirstSortType(column),
-    });
-  } else {
-    sortArray[index].type = getNextSort(sortArray[index].type, column);
-  }
-  return sortArray;
-};
-
-const _sfc_main$2 = {
-  name: 'VgtTableHeader',
-  props: {
-    lineNumbers: {
-      default: false,
-      type: Boolean,
-    },
-    selectable: {
-      default: false,
-      type: Boolean,
-    },
-    allSelected: {
-      default: false,
-      type: Boolean,
-    },
-    allSelectedIndeterminate: {
-      default: false,
-      type: Boolean,
-    },
-    columns: {
-      type: Array,
-    },
-    expandRowsEnabled: {
-      default: false,
-      type: Boolean,
-    },
-    mode: {
-      type: String,
-    },
-    typedColumns: {},
-
-    //* Sort related
-    sortable: {
-      type: Boolean,
-    },
-    multipleColumnSort: {
-      type: Boolean,
-      default: true,
-    },
-
-    getClasses: {
-      type: Function,
-    },
-
-    //* search related
-    searchEnabled: {
-      type: Boolean,
-    },
-
-    tableRef: {},
-
-    paginated: {},
-  },
-  emits: [
-    'toggle-select-all',
-    'toggle-expand-rows-all',
-    'sort-change',
-    'filter-changed',
-  ],
-  watch: {
-    columns: {
-      handler() {
-        this.setColumnStyles();
-      },
-      immediate: true,
-      deep: true
-    },
-    tableRef: {
-      handler() {
-        this.setColumnStyles();
-      },
-      immediate: true,
-    },
-    paginated: {
-      handler() {
-        if (this.tableRef) {
-          this.setColumnStyles();
-        }
-      },
-      deep: true,
-    },
-  },
-  data() {
-    return {
-      checkBoxThStyle: {},
-      lineNumberThStyle: {},
-      columnStyles: [],
-      sorts: [],
-      ro: null
-    };
-  },
-  computed: {
-
-  },
-  methods: {
-    reset() {
-      this.$refs['filter-row'].reset(true);
-    },
-    toggleExpandRowsAll() {
-      this.$emit('toggle-expand-rows-all');
-    },
-    toggleSelectAll() {
-      this.$emit('toggle-select-all');
-    },
-    isSortableColumn(column) {
-      const { sortable } = column;
-      const isSortable = typeof sortable === 'boolean' ? sortable : this.sortable;
-      return isSortable;
+    // Indicate per page changing
+    perPageChanged(oldValue) {
+      // go back to first page
+      if (oldValue) {
+        //* only emit if this isn't first initialization
+        this.$emit('per-page-changed', { currentPerPage: this.currentPerPage });
+      }
+      this.changePage(1, false);
     },
-    sort(e, column) {
-      //* if column is not sortable, return right here
-      if (!this.isSortableColumn(column)) return;
 
-      if (e.shiftKey && this.multipleColumnSort) {
-        this.sorts = secondarySort(this.sorts, column);
+    // Handle per page changing
+    handlePerPage() {
+      //* if there's a custom dropdown then we use that
+      if (this.customRowsPerPageDropdown !== null
+        && (Array.isArray(this.customRowsPerPageDropdown)
+        && this.customRowsPerPageDropdown.length !== 0)) {
+        this.rowsPerPageOptions = JSON.parse(JSON.stringify(this.customRowsPerPageDropdown));
       } else {
-        this.sorts = primarySort(this.sorts, column);
+        //* otherwise we use the default rows per page dropdown
+        this.rowsPerPageOptions = JSON.parse(JSON.stringify(DEFAULT_ROWS_PER_PAGE_DROPDOWN));
       }
-      this.$emit('sort-change', this.sorts);
-    },
-
-    setInitialSort(sorts) {
-      this.sorts = sorts;
-      this.$emit('sort-change', this.sorts);
-    },
 
-    getColumnSort(column) {
-      for (let i = 0; i < this.sorts.length; i += 1) {
-        if (this.sorts[i].field === column.field) {
-          return this.sorts[i].type || 'asc';
+      if (this.perPage) {
+        this.currentPerPage = this.perPage;
+        // if perPage doesn't already exist, we add it
+        let found = false;
+        for (let i = 0; i < this.rowsPerPageOptions.length; i++) {
+          if (this.rowsPerPageOptions[i] === this.perPage) {
+            found = true;
+          }
         }
-      }
-      return null;
-    },
-
-    getColumnSortLong(column) {
-      return this.getColumnSort(column) === 'asc'
-        ? 'ascending'
-        : 'descending'
-    },
-
-    getHeaderClasses(column, index) {
-      const classes = Object.assign({}, this.getClasses(index, 'th'), {
-        sortable: this.isSortableColumn(column),
-        'sorting sorting-desc': this.getColumnSort(column) === 'desc',
-        'sorting sorting-asc': this.getColumnSort(column) === 'asc',
-      });
-      return classes;
-    },
-
-    filterRows(columnFilters) {
-      this.$emit('filter-changed', columnFilters);
-    },
-
-    getWidthStyle(dom) {
-      if (window && window.getComputedStyle && dom) {
-        const cellStyle = window.getComputedStyle(dom, null);
-        return {
-          width: cellStyle.width,
-        };
-      }
-      return {
-        width: 'auto',
-      };
-    },
-
-    setColumnStyles() {
-      const colStyles = [];
-      for (let i = 0; i < this.columns.length; i++) {
-        if (this.tableRef) {
-          let skip = 0;
-          if (this.selectable) skip++;
-          if (this.lineNumbers) skip++;
-          const cell = this.tableRef.rows[0].cells[i + skip];
-          colStyles.push(this.getWidthStyle(cell));
-        } else {
-          colStyles.push({
-            minWidth: this.columns[i].width ? this.columns[i].width : 'auto',
-            maxWidth: this.columns[i].width ? this.columns[i].width : 'auto',
-            width: this.columns[i].width ? this.columns[i].width : 'auto',
-          });
+        if (!found && this.perPage !== -1) {
+          this.rowsPerPageOptions.unshift(this.perPage);
         }
+      } else {
+        // reset to default
+        this.currentPerPage = 10;
       }
-      this.columnStyles = colStyles;
     },
+  },
 
-    getColumnStyle(column, index) {
-      const styleObject = {
-        minWidth: column.width ? column.width : 'auto',
-        maxWidth: column.width ? column.width : 'auto',
-        width: column.width ? column.width : 'auto',
-      };
-      //* if fixed header we need to get width from original table
-      if (this.tableRef) {
-        if (this.selectable) index++;
-        if (this.lineNumbers) index++;
+  mounted() {
+  },
 
-        const cell = this.tableRef.rows[0].cells[index];
-        const cellStyle = window.getComputedStyle(cell, null);
-        styleObject.width = cellStyle.width;
-      }
-      return styleObject;
-    },
+  components: {
+    'pagination-page-info': VgtPaginationPageInfo,
   },
-  mounted() {
-    this.$nextTick(() => {
-      // We're going to watch the parent element for resize events, and calculate column widths if it changes
-      if ('ResizeObserver' in window) {
-        this.ro = new ResizeObserver(() => {
-            this.setColumnStyles();
-        });
-        this.ro.observe(this.$parent.$el);
+};
 
-        // If this is a fixed-header table, we want to observe each column header from the non-fixed header.
-        // You can imagine two columns swapping widths, which wouldn't cause the above to trigger.
-        // This gets the first tr element of the primary table header, and iterates through its children (the th elements)
-        if (this.tableRef) {
-          Array.from(this.$parent.$refs['table-header-primary'].$el.children[0].children).forEach((header) => {
-            this.ro.observe(header);
-          });
-        }
-      }
-    });
-  },
-  beforeUnmount() {
-    if (this.ro) {
-      this.ro.disconnect();
-    }
-  },
-  components: {
-    'vgt-filter-row': VgtFilterRow,
-  },
-};
-
-const _hoisted_1$2 = {
+const _hoisted_1$1 = { class: "vgt-wrap__footer vgt-clearfix" };
+const _hoisted_2$1 = {
   key: 0,
-  scope: "col",
-  class: "line-numbers"
-};
-const _hoisted_2$2 = {
-  key: 1,
-  scope: "col",
-  class: "vgt-checkbox-col"
-};
-const _hoisted_3$2 = ["checked", ".indeterminate"];
-const _hoisted_4$2 = {
-  key: 2,
-  scope: "col",
-  class: "vgt-checkbox-col"
-};
-const _hoisted_5$2 = ["title", "aria-sort", "aria-controls"];
-const _hoisted_6$2 = ["onClick"];
-const _hoisted_7$2 = { class: "sr-only" };
-
-function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
-  const _component_vgt_filter_row = resolveComponent("vgt-filter-row");
-
-  return (openBlock(), createElementBlock("thead", null, [
-    createElementVNode("tr", null, [
-      ($props.lineNumbers)
-        ? (openBlock(), createElementBlock("th", _hoisted_1$2))
-        : createCommentVNode("v-if", true),
-      ($props.selectable)
-        ? (openBlock(), createElementBlock("th", _hoisted_2$2, [
-            createElementVNode("input", {
-              type: "checkbox",
-              checked: $props.allSelected,
-              ".indeterminate": $props.allSelectedIndeterminate,
-              onChange: _cache[0] || (_cache[0] = (...args) => ($options.toggleSelectAll && $options.toggleSelectAll(...args)))
-            }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3$2)
-          ]))
-        : createCommentVNode("v-if", true),
-      ($props.expandRowsEnabled)
-        ? (openBlock(), createElementBlock("th", _hoisted_4$2, [
-            createElementVNode("a", {
-              href: "",
-              onClick: _cache[1] || (_cache[1] = withModifiers((...args) => ($options.toggleExpandRowsAll && $options.toggleExpandRowsAll(...args)), ["prevent"])),
-              class: "vgt-wrap__expander"
-            }, " (+) ")
-          ]))
-        : createCommentVNode("v-if", true),
-      (openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, (column, index) => {
-        return (openBlock(), createElementBlock(Fragment, { key: index }, [
-          (!column.hidden)
-            ? (openBlock(), createElementBlock("th", {
-                key: 0,
-                scope: "col",
-                title: column.tooltip,
-                class: normalizeClass($options.getHeaderClasses(column, index)),
-                style: normalizeStyle($data.columnStyles[index]),
-                "aria-sort": $options.getColumnSortLong(column),
-                "aria-controls": `col-${index}`
-              }, [
-                renderSlot(_ctx.$slots, "table-column", { column: column }, () => [
-                  createTextVNode(toDisplayString(column.label), 1 /* TEXT */)
-                ]),
-                ($options.isSortableColumn(column))
-                  ? (openBlock(), createElementBlock("button", {
-                      key: 0,
-                      onClick: $event => ($options.sort($event, column))
-                    }, [
-                      createElementVNode("span", _hoisted_7$2, " Sort table by " + toDisplayString(column.label) + " in " + toDisplayString($options.getColumnSortLong(column)) + " order ", 1 /* TEXT */)
-                    ], 8 /* PROPS */, _hoisted_6$2))
-                  : createCommentVNode("v-if", true)
-              ], 14 /* CLASS, STYLE, PROPS */, _hoisted_5$2))
-            : createCommentVNode("v-if", true)
-        ], 64 /* STABLE_FRAGMENT */))
-      }), 128 /* KEYED_FRAGMENT */))
-    ]),
-    createVNode(_component_vgt_filter_row, {
-      ref: "filter-row",
-      onFilterChanged: $options.filterRows,
-      "global-search-enabled": $props.searchEnabled,
-      "line-numbers": $props.lineNumbers,
-      "expand-rows-enabled": $props.expandRowsEnabled,
-      selectable: $props.selectable,
-      columns: $props.columns,
-      mode: $props.mode,
-      "typed-columns": $props.typedColumns
-    }, {
-      "column-filter": withCtx((slotProps) => [
-        renderSlot(_ctx.$slots, "column-filter", {
-          column: slotProps.column,
-          updateFilters: slotProps.updateFilters
-        })
-      ]),
-      _: 3 /* FORWARDED */
-    }, 8 /* PROPS */, ["onFilterChanged", "global-search-enabled", "line-numbers", "expand-rows-enabled", "selectable", "columns", "mode", "typed-columns"])
-  ]))
-}
-var VgtTableHeader = /*#__PURE__*/_export_sfc(_sfc_main$2, [['render',_sfc_render$2]]);
-
-const _sfc_main$1 = {
-  name: 'VgtHeaderRow',
-  props: {
-    headerRow: {
-      type: Object,
-    },
-    columns: {
-      type: Array,
-    },
-    lineNumbers: {
-      type: Boolean,
-    },
-    selectable: {
-      type: Boolean,
-    },
-    selectAllByGroup: {
-      type: Boolean
-    },
-    collapsable: {
-      type: [Boolean, Number],
-      default: false,
-    },
-    collectFormatted: {
-      type: Function,
-    },
-    formattedRow: {
-      type: Function,
-    },
-    getClasses: {
-      type: Function,
-    },
-    fullColspan: {
-      type: Number,
-    },
-    groupIndex: {
-      type: Number
-    },
-  },
-  emits: [
-    'vgtExpand',
-    'select-group-change',
-  ],
-  data() {
-    return {
-    };
-  },
-  computed: {
-    allSelected() {
-      const { headerRow } = this;
-      return headerRow.children.filter((row) => row.vgtSelected).length === headerRow.children.length;
-    }
-  },
-  methods: {
-    columnCollapsable(currentIndex) {
-      if (this.collapsable === true) {
-        return currentIndex === 0;
-      }
-      return currentIndex === this.collapsable;
-    },
-    toggleSelectGroup(event) {
-      this.$emit('select-group-change', {
-        groupIndex: this.groupIndex, checked: event.target.checked
-      });
-    }
-  },
-
-  mounted() {
-  },
-  components: {
-  },
-};
-
-const _hoisted_1$1 = ["colspan"];
-const _hoisted_2$1 = ["checked"];
-const _hoisted_3$1 = ["innerHTML"];
-const _hoisted_4$1 = { key: 1 };
-const _hoisted_5$1 = {
-  key: 1,
-  class: "vgt-row-header"
-};
-const _hoisted_6$1 = {
-  key: 2,
-  class: "vgt-row-header"
+  class: "footer__row-count vgt-pull-left"
 };
-const _hoisted_7$1 = ["checked"];
-const _hoisted_8$1 = ["onClick"];
-const _hoisted_9$1 = { key: 0 };
-const _hoisted_10$1 = ["innerHTML"];
+const _hoisted_3$1 = ["for"];
+const _hoisted_4$1 = ["id"];
+const _hoisted_5$1 = ["value"];
+const _hoisted_6$1 = ["value"];
+const _hoisted_7$1 = { class: "footer__navigation vgt-pull-right" };
 
 function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
-  return (openBlock(), createElementBlock("tr", null, [
-    ($props.headerRow.mode === 'span')
-      ? (openBlock(), createElementBlock("th", {
-          key: 0,
-          class: "vgt-left-align vgt-row-header",
-          colspan: $props.fullColspan
-        }, [
-          ($props.selectAllByGroup)
-            ? renderSlot(_ctx.$slots, "table-header-group-select", {
-                key: 0,
-                columns: $props.columns,
-                row: $props.headerRow
-              }, () => [
-                createElementVNode("input", {
-                  type: "checkbox",
-                  checked: $options.allSelected,
-                  onChange: _cache[0] || (_cache[0] = $event => ($options.toggleSelectGroup($event)))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2$1)
-              ])
-            : createCommentVNode("v-if", true),
-          createElementVNode("span", {
-            onClick: _cache[1] || (_cache[1] = $event => ($props.collapsable ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {}))
-          }, [
-            ($props.collapsable)
-              ? (openBlock(), createElementBlock("span", {
-                  key: 0,
-                  class: normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
-                }, null, 2 /* CLASS */))
-              : createCommentVNode("v-if", true),
-            renderSlot(_ctx.$slots, "table-header-row", { row: $props.headerRow }, () => [
-              ($props.headerRow.html)
-                ? (openBlock(), createElementBlock("span", {
+  const _component_pagination_page_info = resolveComponent("pagination-page-info");
+
+  return (openBlock(), createElementBlock("div", _hoisted_1$1, [
+    ($props.perPageDropdownEnabled)
+      ? (openBlock(), createElementBlock("div", _hoisted_2$1, [
+          createElementVNode("form", null, [
+            createElementVNode("label", {
+              for: $data.id,
+              class: "footer__row-count__label"
+            }, toDisplayString($props.rowsPerPageText) + ":", 9 /* TEXT, PROPS */, _hoisted_3$1),
+            withDirectives(createElementVNode("select", {
+              id: $data.id,
+              autocomplete: "off",
+              name: "perPageSelect",
+              class: "footer__row-count__select",
+              "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => (($data.currentPerPage) = $event)),
+              onChange: _cache[1] || (_cache[1] = (...args) => ($options.perPageChanged && $options.perPageChanged(...args))),
+              "aria-controls": "vgt-table"
+            }, [
+              (openBlock(true), createElementBlock(Fragment, null, renderList($data.rowsPerPageOptions, (option, idx) => {
+                return (openBlock(), createElementBlock("option", {
+                  key: idx,
+                  value: option
+                }, toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_5$1))
+              }), 128 /* KEYED_FRAGMENT */)),
+              ($props.paginateDropdownAllowAll)
+                ? (openBlock(), createElementBlock("option", {
                     key: 0,
-                    innerHTML: $props.headerRow.label
-                  }, null, 8 /* PROPS */, _hoisted_3$1))
-                : (openBlock(), createElementBlock("span", _hoisted_4$1, toDisplayString($props.headerRow.label), 1 /* TEXT */))
+                    value: $props.total
+                  }, toDisplayString($props.allText), 9 /* TEXT, PROPS */, _hoisted_6$1))
+                : createCommentVNode("v-if", true)
+            ], 40 /* PROPS, NEED_HYDRATION */, _hoisted_4$1), [
+              [vModelSelect, $data.currentPerPage]
             ])
           ])
-        ], 8 /* PROPS */, _hoisted_1$1))
-      : createCommentVNode("v-if", true),
-    createCommentVNode(" if the mode is not span, we display every column "),
-    ($props.headerRow.mode !== 'span' && $props.lineNumbers)
-      ? (openBlock(), createElementBlock("th", _hoisted_5$1))
-      : createCommentVNode("v-if", true),
-    ($props.headerRow.mode !== 'span' && $props.selectable)
-      ? (openBlock(), createElementBlock("th", _hoisted_6$1, [
-          ($props.selectAllByGroup)
-            ? renderSlot(_ctx.$slots, "table-header-group-select", {
-                key: 0,
-                columns: $props.columns,
-                row: $props.headerRow
-              }, () => [
-                createElementVNode("input", {
-                  type: "checkbox",
-                  checked: $options.allSelected,
-                  onChange: _cache[2] || (_cache[2] = $event => ($options.toggleSelectGroup($event)))
-                }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_7$1)
-              ])
-            : createCommentVNode("v-if", true)
         ]))
       : createCommentVNode("v-if", true),
-    (openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, (column, i) => {
-      return (openBlock(), createElementBlock(Fragment, { key: i }, [
-        ($props.headerRow.mode !== 'span' && !column.hidden)
-          ? (openBlock(), createElementBlock("th", {
-              key: 0,
-              class: normalizeClass(["vgt-row-header", $props.getClasses(i, 'td')]),
-              onClick: $event => ($options.columnCollapsable(i) ? _ctx.$emit('vgtExpand', !$props.headerRow.vgtIsExpanded) : () => {})
-            }, [
-              ($options.columnCollapsable(i))
-                ? (openBlock(), createElementBlock("span", {
-                    key: 0,
-                    class: normalizeClass(["triangle", { 'expand': $props.headerRow.vgtIsExpanded }])
-                  }, null, 2 /* CLASS */))
-                : createCommentVNode("v-if", true),
-              renderSlot(_ctx.$slots, "table-header-row", {
-                row: $props.headerRow,
-                column: column,
-                formattedRow: $props.formattedRow($props.headerRow, true)
-              }, () => [
-                (!column.html)
-                  ? (openBlock(), createElementBlock("span", _hoisted_9$1, toDisplayString($props.collectFormatted($props.headerRow, column, true)), 1 /* TEXT */))
-                  : createCommentVNode("v-if", true),
-                (column.html)
-                  ? (openBlock(), createElementBlock("span", {
-                      key: 1,
-                      innerHTML: $props.collectFormatted($props.headerRow, column, true)
-                    }, null, 8 /* PROPS */, _hoisted_10$1))
-                  : createCommentVNode("v-if", true)
-              ])
-            ], 10 /* CLASS, PROPS */, _hoisted_8$1))
-          : createCommentVNode("v-if", true)
-      ], 64 /* STABLE_FRAGMENT */))
-    }), 128 /* KEYED_FRAGMENT */))
+    createElementVNode("div", _hoisted_7$1, [
+      createVNode(_component_pagination_page_info, {
+        onPageChanged: $options.changePage,
+        "total-records": $props.total,
+        "last-page": $options.pagesCount,
+        "current-page": $data.currentPage,
+        "current-per-page": $data.currentPerPage,
+        "of-text": $props.ofText,
+        "page-text": $props.pageText,
+        "info-fn": $props.infoFn,
+        mode: $props.mode
+      }, null, 8 /* PROPS */, ["onPageChanged", "total-records", "last-page", "current-page", "current-per-page", "of-text", "page-text", "info-fn", "mode"]),
+      createElementVNode("button", {
+        type: "button",
+        "aria-controls": "vgt-table",
+        class: normalizeClass(["footer__navigation__page-btn", { disabled: !$options.prevIsPossible }]),
+        onClick: _cache[2] || (_cache[2] = withModifiers((...args) => ($options.previousPage && $options.previousPage(...args)), ["prevent","stop"]))
+      }, [
+        createElementVNode("span", {
+          "aria-hidden": "true",
+          class: normalizeClass(["chevron", { 'left': !$props.rtl, 'right': $props.rtl }])
+        }, null, 2 /* CLASS */),
+        createElementVNode("span", null, toDisplayString($props.prevText), 1 /* TEXT */)
+      ], 2 /* CLASS */),
+      createElementVNode("button", {
+        type: "button",
+        "aria-controls": "vgt-table",
+        class: normalizeClass(["footer__navigation__page-btn", { disabled: !$options.nextIsPossible }]),
+        onClick: _cache[3] || (_cache[3] = withModifiers((...args) => ($options.nextPage && $options.nextPage(...args)), ["prevent","stop"]))
+      }, [
+        createElementVNode("span", null, toDisplayString($props.nextText), 1 /* TEXT */),
+        createElementVNode("span", {
+          "aria-hidden": "true",
+          class: normalizeClass(["chevron", { 'right': !$props.rtl, 'left': $props.rtl }])
+        }, null, 2 /* CLASS */)
+      ], 2 /* CLASS */)
+    ])
   ]))
 }
-var VgtHeaderRow = /*#__PURE__*/_export_sfc(_sfc_main$1, [['render',_sfc_render$1]]);
-
-function toInteger(dirtyNumber) {
-  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
-    return NaN;
-  }
-
-  var number = Number(dirtyNumber);
-
-  if (isNaN(number)) {
-    return number;
-  }
-
-  return number < 0 ? Math.ceil(number) : Math.floor(number);
-}
-
-function requiredArgs(required, args) {
-  if (args.length < required) {
-    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
-  }
-}
-
-/**
- * @name toDate
- * @category Common Helpers
- * @summary Convert the given argument to an instance of Date.
- *
- * @description
- * Convert the given argument to an instance of Date.
- *
- * If the argument is an instance of Date, the function returns its clone.
- *
- * If the argument is a number, it is treated as a timestamp.
- *
- * If the argument is none of the above, the function returns Invalid Date.
- *
- * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
- *
- * @param {Date|Number} argument - the value to convert
- * @returns {Date} the parsed date in the local time zone
- * @throws {TypeError} 1 argument required
- *
- * @example
- * // Clone the date:
- * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
- * //=> Tue Feb 11 2014 11:30:30
- *
- * @example
- * // Convert the timestamp to date:
- * const result = toDate(1392098430000)
- * //=> Tue Feb 11 2014 11:30:30
- */
-
-function toDate(argument) {
-  requiredArgs(1, arguments);
-  var argStr = Object.prototype.toString.call(argument); // Clone the date
-
-  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
-    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
-    return new Date(argument.getTime());
-  } else if (typeof argument === 'number' || argStr === '[object Number]') {
-    return new Date(argument);
-  } else {
-    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
-      // eslint-disable-next-line no-console
-      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console
-
-      console.warn(new Error().stack);
-    }
-
-    return new Date(NaN);
-  }
-}
-
-/**
- * @name addMilliseconds
- * @category Millisecond Helpers
- * @summary Add the specified number of milliseconds to the given date.
- *
- * @description
- * Add the specified number of milliseconds to the given date.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {Date|Number} date - the date to be changed
- * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
- * @returns {Date} the new date with the milliseconds added
- * @throws {TypeError} 2 arguments required
- *
- * @example
- * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
- * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
- * //=> Thu Jul 10 2014 12:45:30.750
- */
-
-function addMilliseconds(dirtyDate, dirtyAmount) {
-  requiredArgs(2, arguments);
-  var timestamp = toDate(dirtyDate).getTime();
-  var amount = toInteger(dirtyAmount);
-  return new Date(timestamp + amount);
-}
-
-/**
- * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
- * They usually appear for dates that denote time before the timezones were introduced
- * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
- * and GMT+01:00:00 after that date)
- *
- * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
- * which would lead to incorrect calculations.
- *
- * This function returns the timezone offset in milliseconds that takes seconds in account.
- */
-function getTimezoneOffsetInMilliseconds(date) {
-  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
-  utcDate.setUTCFullYear(date.getFullYear());
-  return date.getTime() - utcDate.getTime();
-}
-
-/**
- * @name compareAsc
- * @category Common Helpers
- * @summary Compare the two dates and return -1, 0 or 1.
- *
- * @description
- * Compare the two dates and return 1 if the first date is after the second,
- * -1 if the first date is before the second or 0 if dates are equal.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {Date|Number} dateLeft - the first date to compare
- * @param {Date|Number} dateRight - the second date to compare
- * @returns {Number} the result of the comparison
- * @throws {TypeError} 2 arguments required
- *
- * @example
- * // Compare 11 February 1987 and 10 July 1989:
- * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
- * //=> -1
- *
- * @example
- * // Sort the array of dates:
- * const result = [
- *   new Date(1995, 6, 2),
- *   new Date(1987, 1, 11),
- *   new Date(1989, 6, 10)
- * ].sort(compareAsc)
- * //=> [
- * //   Wed Feb 11 1987 00:00:00,
- * //   Mon Jul 10 1989 00:00:00,
- * //   Sun Jul 02 1995 00:00:00
- * // ]
- */
-
-function compareAsc(dirtyDateLeft, dirtyDateRight) {
-  requiredArgs(2, arguments);
-  var dateLeft = toDate(dirtyDateLeft);
-  var dateRight = toDate(dirtyDateRight);
-  var diff = dateLeft.getTime() - dateRight.getTime();
-
-  if (diff < 0) {
-    return -1;
-  } else if (diff > 0) {
-    return 1; // Return 0 if diff is 0; return NaN if diff is NaN
-  } else {
-    return diff;
-  }
-}
+var VgtPagination = /*#__PURE__*/_export_sfc(_sfc_main$1, [['render',_sfc_render$1]]);
 
-/**
- * @name isDate
- * @category Common Helpers
- * @summary Is the given value a date?
- *
- * @description
- * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * @param {*} value - the value to check
- * @returns {boolean} true if the given value is a date
- * @throws {TypeError} 1 arguments required
- *
- * @example
- * // For a valid date:
- * const result = isDate(new Date())
- * //=> true
- *
- * @example
- * // For an invalid date:
- * const result = isDate(new Date(NaN))
- * //=> true
- *
- * @example
- * // For some value:
- * const result = isDate('2014-02-31')
- * //=> false
- *
- * @example
- * // For an object:
- * const result = isDate({})
- * //=> false
- */
-
-function isDate(value) {
-  requiredArgs(1, arguments);
-  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
-}
-
-/**
- * @name isValid
- * @category Common Helpers
- * @summary Is the given date valid?
- *
- * @description
- * Returns false if argument is Invalid Date and true otherwise.
- * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
- * Invalid Date is a Date, whose time value is NaN.
- *
- * Time value of Date: http://es5.github.io/#x15.9.1.1
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - Now `isValid` doesn't throw an exception
- *   if the first argument is not an instance of Date.
- *   Instead, argument is converted beforehand using `toDate`.
- *
- *   Examples:
- *
- *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
- *   |---------------------------|---------------|---------------|
- *   | `new Date()`              | `true`        | `true`        |
- *   | `new Date('2016-01-01')`  | `true`        | `true`        |
- *   | `new Date('')`            | `false`       | `false`       |
- *   | `new Date(1488370835081)` | `true`        | `true`        |
- *   | `new Date(NaN)`           | `false`       | `false`       |
- *   | `'2016-01-01'`            | `TypeError`   | `false`       |
- *   | `''`                      | `TypeError`   | `false`       |
- *   | `1488370835081`           | `TypeError`   | `true`        |
- *   | `NaN`                     | `TypeError`   | `false`       |
- *
- *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
- *   that try to coerce arguments to the expected type
- *   (which is also the case with other *date-fns* functions).
- *
- * @param {*} date - the date to check
- * @returns {Boolean} the date is valid
- * @throws {TypeError} 1 argument required
- *
- * @example
- * // For the valid date:
- * const result = isValid(new Date(2014, 1, 31))
- * //=> true
- *
- * @example
- * // For the value, convertable into a date:
- * const result = isValid(1393804800000)
- * //=> true
- *
- * @example
- * // For the invalid date:
- * const result = isValid(new Date(''))
- * //=> false
- */
-
-function isValid(dirtyDate) {
-  requiredArgs(1, arguments);
-
-  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
-    return false;
-  }
-
-  var date = toDate(dirtyDate);
-  return !isNaN(Number(date));
-}
-
-var formatDistanceLocale = {
-  lessThanXSeconds: {
-    one: 'less than a second',
-    other: 'less than {{count}} seconds'
-  },
-  xSeconds: {
-    one: '1 second',
-    other: '{{count}} seconds'
-  },
-  halfAMinute: 'half a minute',
-  lessThanXMinutes: {
-    one: 'less than a minute',
-    other: 'less than {{count}} minutes'
-  },
-  xMinutes: {
-    one: '1 minute',
-    other: '{{count}} minutes'
-  },
-  aboutXHours: {
-    one: 'about 1 hour',
-    other: 'about {{count}} hours'
-  },
-  xHours: {
-    one: '1 hour',
-    other: '{{count}} hours'
-  },
-  xDays: {
-    one: '1 day',
-    other: '{{count}} days'
-  },
-  aboutXWeeks: {
-    one: 'about 1 week',
-    other: 'about {{count}} weeks'
-  },
-  xWeeks: {
-    one: '1 week',
-    other: '{{count}} weeks'
-  },
-  aboutXMonths: {
-    one: 'about 1 month',
-    other: 'about {{count}} months'
-  },
-  xMonths: {
-    one: '1 month',
-    other: '{{count}} months'
-  },
-  aboutXYears: {
-    one: 'about 1 year',
-    other: 'about {{count}} years'
-  },
-  xYears: {
-    one: '1 year',
-    other: '{{count}} years'
-  },
-  overXYears: {
-    one: 'over 1 year',
-    other: 'over {{count}} years'
-  },
-  almostXYears: {
-    one: 'almost 1 year',
-    other: 'almost {{count}} years'
-  }
-};
-
-var formatDistance = function (token, count, options) {
-  var result;
-  var tokenValue = formatDistanceLocale[token];
-
-  if (typeof tokenValue === 'string') {
-    result = tokenValue;
-  } else if (count === 1) {
-    result = tokenValue.one;
-  } else {
-    result = tokenValue.other.replace('{{count}}', count.toString());
-  }
-
-  if (options !== null && options !== void 0 && options.addSuffix) {
-    if (options.comparison && options.comparison > 0) {
-      return 'in ' + result;
-    } else {
-      return result + ' ago';
-    }
-  }
-
-  return result;
-};
-
-var formatDistance$1 = formatDistance;
-
-function buildFormatLongFn(args) {
-  return function () {
-    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
-    // TODO: Remove String()
-    var width = options.width ? String(options.width) : args.defaultWidth;
-    var format = args.formats[width] || args.formats[args.defaultWidth];
-    return format;
-  };
-}
-
-var dateFormats = {
-  full: 'EEEE, MMMM do, y',
-  long: 'MMMM do, y',
-  medium: 'MMM d, y',
-  short: 'MM/dd/yyyy'
-};
-var timeFormats = {
-  full: 'h:mm:ss a zzzz',
-  long: 'h:mm:ss a z',
-  medium: 'h:mm:ss a',
-  short: 'h:mm a'
-};
-var dateTimeFormats = {
-  full: "{{date}} 'at' {{time}}",
-  long: "{{date}} 'at' {{time}}",
-  medium: '{{date}}, {{time}}',
-  short: '{{date}}, {{time}}'
-};
-var formatLong = {
-  date: buildFormatLongFn({
-    formats: dateFormats,
-    defaultWidth: 'full'
-  }),
-  time: buildFormatLongFn({
-    formats: timeFormats,
-    defaultWidth: 'full'
-  }),
-  dateTime: buildFormatLongFn({
-    formats: dateTimeFormats,
-    defaultWidth: 'full'
-  })
-};
-var formatLong$1 = formatLong;
-
-var formatRelativeLocale = {
-  lastWeek: "'last' eeee 'at' p",
-  yesterday: "'yesterday at' p",
-  today: "'today at' p",
-  tomorrow: "'tomorrow at' p",
-  nextWeek: "eeee 'at' p",
-  other: 'P'
-};
-
-var formatRelative = function (token, _date, _baseDate, _options) {
-  return formatRelativeLocale[token];
+// all diacritics
+let diacritics = {
+  a: [
+    "a",
+    "à",
+    "á",
+    "â",
+    "ã",
+    "ä",
+    "å",
+    "æ",
+    "ā",
+    "ă",
+    "ą",
+    "ǎ",
+    "ǟ",
+    "ǡ",
+    "ǻ",
+    "ȁ",
+    "ȃ",
+    "ȧ",
+    "ɐ",
+    "ɑ",
+    "ɒ",
+    "ͣ",
+    "а",
+    "ӑ",
+    "ӓ",
+    "ᵃ",
+    "ᵄ",
+    "ᶏ",
+    "ḁ",
+    "ẚ",
+    "ạ",
+    "ả",
+    "ấ",
+    "ầ",
+    "ẩ",
+    "ẫ",
+    "ậ",
+    "ắ",
+    "ằ",
+    "ẳ",
+    "ẵ",
+    "ặ",
+    "ₐ",
+    "ⱥ",
+    "ａ",
+  ],
+  b: ["b", "ƀ", "ƃ", "ɓ", "ᖯ", "ᵇ", "ᵬ", "ᶀ", "ḃ", "ḅ", "ḇ", "ｂ"],
+  c: ["c", "ç", "ć", "ĉ", "ċ", "č", "ƈ", "ȼ", "ɕ", "ͨ", "ᴄ", "ᶜ", "ḉ", "ↄ", "ｃ"],
+  d: [
+    "d",
+    "ď",
+    "đ",
+    "Ƌ",
+    "ƌ",
+    "ȡ",
+    "ɖ",
+    "ɗ",
+    "ͩ",
+    "ᵈ",
+    "ᵭ",
+    "ᶁ",
+    "ᶑ",
+    "ḋ",
+    "ḍ",
+    "ḏ",
+    "ḑ",
+    "ḓ",
+    "ｄ",
+  ],
+  e: [
+    "e",
+    "è",
+    "é",
+    "ê",
+    "ë",
+    "ē",
+    "ĕ",
+    "ė",
+    "ę",
+    "ě",
+    "ǝ",
+    "ȅ",
+    "ȇ",
+    "ȩ",
+    "ɇ",
+    "ɘ",
+    "ͤ",
+    "ᵉ",
+    "ᶒ",
+    "ḕ",
+    "ḗ",
+    "ḙ",
+    "ḛ",
+    "ḝ",
+    "ẹ",
+    "ẻ",
+    "ẽ",
+    "ế",
+    "ề",
+    "ể",
+    "ễ",
+    "ệ",
+    "ₑ",
+    "ｅ",
+  ],
+  f: ["f", "ƒ", "ᵮ", "ᶂ", "ᶠ", "ḟ", "ｆ"],
+  g: ["g", "ĝ", "ğ", "ġ", "ģ", "ǥ", "ǧ", "ǵ", "ɠ", "ɡ", "ᵍ", "ᵷ", "ᵹ", "ᶃ", "ᶢ", "ḡ", "ｇ"],
+  h: [
+    "h",
+    "ĥ",
+    "ħ",
+    "ƕ",
+    "ȟ",
+    "ɥ",
+    "ɦ",
+    "ʮ",
+    "ʯ",
+    "ʰ",
+    "ʱ",
+    "ͪ",
+    "Һ",
+    "һ",
+    "ᑋ",
+    "ᶣ",
+    "ḣ",
+    "ḥ",
+    "ḧ",
+    "ḩ",
+    "ḫ",
+    "ⱨ",
+    "ｈ",
+  ],
+  i: [
+    "i",
+    "ì",
+    "í",
+    "î",
+    "ï",
+    "ĩ",
+    "ī",
+    "ĭ",
+    "į",
+    "ǐ",
+    "ȉ",
+    "ȋ",
+    "ɨ",
+    "ͥ",
+    "ᴉ",
+    "ᵎ",
+    "ᵢ",
+    "ᶖ",
+    "ᶤ",
+    "ḭ",
+    "ḯ",
+    "ỉ",
+    "ị",
+    "ｉ",
+  ],
+  j: ["j", "ĵ", "ǰ", "ɉ", "ʝ", "ʲ", "ᶡ", "ᶨ", "ｊ"],
+  k: ["k", "ķ", "ƙ", "ǩ", "ʞ", "ᵏ", "ᶄ", "ḱ", "ḳ", "ḵ", "ⱪ", "ｋ"],
+  l: [
+    "l",
+    "ĺ",
+    "ļ",
+    "ľ",
+    "ŀ",
+    "ł",
+    "ƚ",
+    "ȴ",
+    "ɫ",
+    "ɬ",
+    "ɭ",
+    "ˡ",
+    "ᶅ",
+    "ᶩ",
+    "ᶪ",
+    "ḷ",
+    "ḹ",
+    "ḻ",
+    "ḽ",
+    "ℓ",
+    "ⱡ",
+  ],
+  m: ["m", "ɯ", "ɰ", "ɱ", "ͫ", "ᴟ", "ᵐ", "ᵚ", "ᵯ", "ᶆ", "ᶬ", "ᶭ", "ḿ", "ṁ", "ṃ", "㎡", "㎥", "ｍ"],
+  n: [
+    "n",
+    "ñ",
+    "ń",
+    "ņ",
+    "ň",
+    "ŉ",
+    "ƞ",
+    "ǹ",
+    "ȵ",
+    "ɲ",
+    "ɳ",
+    "ᵰ",
+    "ᶇ",
+    "ᶮ",
+    "ᶯ",
+    "ṅ",
+    "ṇ",
+    "ṉ",
+    "ṋ",
+    "ⁿ",
+    "ｎ",
+  ],
+  o: [
+    "o",
+    "ò",
+    "ó",
+    "ô",
+    "õ",
+    "ö",
+    "ø",
+    "ō",
+    "ŏ",
+    "ő",
+    "ơ",
+    "ǒ",
+    "ǫ",
+    "ǭ",
+    "ǿ",
+    "ȍ",
+    "ȏ",
+    "ȫ",
+    "ȭ",
+    "ȯ",
+    "ȱ",
+    "ɵ",
+    "ͦ",
+    "о",
+    "ӧ",
+    "ө",
+    "ᴏ",
+    "ᴑ",
+    "ᴓ",
+    "ᴼ",
+    "ᵒ",
+    "ᶱ",
+    "ṍ",
+    "ṏ",
+    "ṑ",
+    "ṓ",
+    "ọ",
+    "ỏ",
+    "ố",
+    "ồ",
+    "ổ",
+    "ỗ",
+    "ộ",
+    "ớ",
+    "ờ",
+    "ở",
+    "ỡ",
+    "ợ",
+    "ₒ",
+    "ｏ",
+    "𐐬",
+  ],
+  p: ["p", "ᵖ", "ᵱ", "ᵽ", "ᶈ", "ṕ", "ṗ", "ｐ"],
+  q: ["q", "ɋ", "ʠ", "ᛩ", "ｑ"],
+  r: [
+    "r",
+    "ŕ",
+    "ŗ",
+    "ř",
+    "ȑ",
+    "ȓ",
+    "ɍ",
+    "ɹ",
+    "ɻ",
+    "ʳ",
+    "ʴ",
+    "ʵ",
+    "ͬ",
+    "ᵣ",
+    "ᵲ",
+    "ᶉ",
+    "ṙ",
+    "ṛ",
+    "ṝ",
+    "ṟ",
+  ],
+  s: ["s", "ś", "ŝ", "ş", "š", "ș", "ʂ", "ᔆ", "ᶊ", "ṡ", "ṣ", "ṥ", "ṧ", "ṩ", "ｓ"],
+  t: [
+    "t",
+    "ţ",
+    "ť",
+    "ŧ",
+    "ƫ",
+    "ƭ",
+    "ț",
+    "ʇ",
+    "ͭ",
+    "ᵀ",
+    "ᵗ",
+    "ᵵ",
+    "ᶵ",
+    "ṫ",
+    "ṭ",
+    "ṯ",
+    "ṱ",
+    "ẗ",
+    "ｔ",
+  ],
+  u: [
+    "u",
+    "ù",
+    "ú",
+    "û",
+    "ü",
+    "ũ",
+    "ū",
+    "ŭ",
+    "ů",
+    "ű",
+    "ų",
+    "ư",
+    "ǔ",
+    "ǖ",
+    "ǘ",
+    "ǚ",
+    "ǜ",
+    "ȕ",
+    "ȗ",
+    "ͧ",
+    "ߎ",
+    "ᵘ",
+    "ᵤ",
+    "ṳ",
+    "ṵ",
+    "ṷ",
+    "ṹ",
+    "ṻ",
+    "ụ",
+    "ủ",
+    "ứ",
+    "ừ",
+    "ử",
+    "ữ",
+    "ự",
+    "ｕ",
+  ],
+  v: ["v", "ʋ", "ͮ", "ᵛ", "ᵥ", "ᶹ", "ṽ", "ṿ", "ⱱ", "ｖ", "ⱴ"],
+  w: ["w", "ŵ", "ʷ", "ᵂ", "ẁ", "ẃ", "ẅ", "ẇ", "ẉ", "ẘ", "ⱳ", "ｗ"],
+  x: ["x", "̽", "͓", "ᶍ", "ͯ", "ẋ", "ẍ", "ₓ", "ｘ"],
+  y: ["y", "ý", "ÿ", "ŷ", "ȳ", "ɏ", "ʸ", "ẏ", "ỳ", "ỵ", "ỷ", "ỹ", "ｙ"],
+  z: [
+    "z",
+    "ź",
+    "ż",
+    "ž",
+    "ƶ",
+    "ȥ",
+    "ɀ",
+    "ʐ",
+    "ʑ",
+    "ᙆ",
+    "ᙇ",
+    "ᶻ",
+    "ᶼ",
+    "ᶽ",
+    "ẑ",
+    "ẓ",
+    "ẕ",
+    "ⱬ",
+    "ｚ",
+  ],
 };
 
-var formatRelative$1 = formatRelative;
-
-function buildLocalizeFn(args) {
-  return function (dirtyIndex, dirtyOptions) {
-    var options = dirtyOptions || {};
-    var context = options.context ? String(options.context) : 'standalone';
-    var valuesArray;
+// Precompiled Object with { key = Diacritic, value = real-Character }
+const compiledDiactitics = (function() {
+  let x = {};
 
-    if (context === 'formatting' && args.formattingValues) {
-      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
-      var width = options.width ? String(options.width) : defaultWidth;
-      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
-    } else {
-      var _defaultWidth = args.defaultWidth;
+  for (let key in diacritics) {
+    let ok = diacritics[key];
 
-      var _width = options.width ? String(options.width) : args.defaultWidth;
+    for (let rval in ok) {
+      let val = ok[rval];
 
-      valuesArray = args.values[_width] || args.values[_defaultWidth];
+      // Do not replace the char with itself
+      if (val !== key) {
+        x[val] = key;
+      }
     }
+  }
 
-    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
-
-    return valuesArray[index];
-  };
-}
+  return x;
+})();
 
-var eraValues = {
-  narrow: ['B', 'A'],
-  abbreviated: ['BC', 'AD'],
-  wide: ['Before Christ', 'Anno Domini']
-};
-var quarterValues = {
-  narrow: ['1', '2', '3', '4'],
-  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
-  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
-}; // Note: in English, the names of days of the week and months are capitalized.
-// If you are making a new locale based on this one, check if the same is true for the language you're working on.
-// Generally, formatted dates should look like they are in the middle of a sentence,
-// e.g. in Spanish language the weekdays and months should be in the lowercase.
+// Regex for detecting non-ASCII-Characters in String
+const regexNonASCII = /[^a-z0-9\s,.-]/;
 
-var monthValues = {
-  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
-  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
-  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
-};
-var dayValues = {
-  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
-  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
-  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
-  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
-};
-var dayPeriodValues = {
-  narrow: {
-    am: 'a',
-    pm: 'p',
-    midnight: 'mi',
-    noon: 'n',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  },
-  abbreviated: {
-    am: 'AM',
-    pm: 'PM',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  },
-  wide: {
-    am: 'a.m.',
-    pm: 'p.m.',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'morning',
-    afternoon: 'afternoon',
-    evening: 'evening',
-    night: 'night'
-  }
-};
-var formattingDayPeriodValues = {
-  narrow: {
-    am: 'a',
-    pm: 'p',
-    midnight: 'mi',
-    noon: 'n',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
-  },
-  abbreviated: {
-    am: 'AM',
-    pm: 'PM',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
-  },
-  wide: {
-    am: 'a.m.',
-    pm: 'p.m.',
-    midnight: 'midnight',
-    noon: 'noon',
-    morning: 'in the morning',
-    afternoon: 'in the afternoon',
-    evening: 'in the evening',
-    night: 'at night'
+/*
+ * Main function of the module which removes all diacritics from the received text
+ */
+const diacriticless = (text) => {
+  // When there are only ascii-Characters in the string, skip processing and return text right away
+  if (text.search(regexNonASCII) === -1) {
+    return text;
   }
-};
 
-var ordinalNumber = function (dirtyNumber, _options) {
-  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
-  // if they are different for different grammatical genders,
-  // use `options.unit`.
-  //
-  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
-  // 'day', 'hour', 'minute', 'second'.
+  let result = "";
 
-  var rem100 = number % 100;
+  let len = text.length;
+  for (var i = 0; i < len; i++) {
+    let searchChar = text.charAt(i);
 
-  if (rem100 > 20 || rem100 < 10) {
-    switch (rem100 % 10) {
-      case 1:
-        return number + 'st';
+    // If applicable replace the diacritic character with the real one or use the original value
+    result += searchChar in compiledDiactitics ? compiledDiactitics[searchChar] : searchChar;
+  }
 
-      case 2:
-        return number + 'nd';
+  return result;
+};
 
-      case 3:
-        return number + 'rd';
+const escapeRegExp = str => str.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
+
+var defaultType = {
+  format(x) {
+    return x;
+  },
+  filterPredicate(rowval, filter, skipDiacritics = false, fromDropdown = false) {
+    // take care of nulls
+    if (typeof rowval === 'undefined' || rowval === null) {
+      return false;
     }
-  }
 
-  return number + 'th';
-};
+    // row value
+    const rowValue = skipDiacritics
+      ? String(rowval).toLowerCase()
+      : diacriticless(escapeRegExp(String(rowval)).toLowerCase());
 
-var localize = {
-  ordinalNumber: ordinalNumber,
-  era: buildLocalizeFn({
-    values: eraValues,
-    defaultWidth: 'wide'
-  }),
-  quarter: buildLocalizeFn({
-    values: quarterValues,
-    defaultWidth: 'wide',
-    argumentCallback: function (quarter) {
-      return quarter - 1;
+    // search term
+    const searchTerm = skipDiacritics
+      ? filter.toLowerCase()
+      : diacriticless(escapeRegExp(filter).toLowerCase());
+
+    // comparison
+    return fromDropdown ? rowValue === searchTerm : (rowValue.indexOf(searchTerm) > -1);
+  },
+
+  compare(x, y) {
+    function cook(d) {
+      if (typeof d === 'undefined' || d === null) return '';
+      return diacriticless(String(d).toLowerCase());
     }
-  }),
-  month: buildLocalizeFn({
-    values: monthValues,
-    defaultWidth: 'wide'
-  }),
-  day: buildLocalizeFn({
-    values: dayValues,
-    defaultWidth: 'wide'
-  }),
-  dayPeriod: buildLocalizeFn({
-    values: dayPeriodValues,
-    defaultWidth: 'wide',
-    formattingValues: formattingDayPeriodValues,
-    defaultFormattingWidth: 'wide'
-  })
+    x = cook(x);
+    y = cook(y);
+    if (x < y) return -1;
+    if (x > y) return 1;
+    return 0;
+  },
 };
-var localize$1 = localize;
 
-function buildMatchFn(args) {
-  return function (string) {
-    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-    var width = options.width;
-    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
-    var matchResult = string.match(matchPattern);
+function _typeof(o) {
+  "@babel/helpers - typeof";
 
-    if (!matchResult) {
-      return null;
-    }
+  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
+    return typeof o;
+  } : function (o) {
+    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
+  }, _typeof(o);
+}
 
-    var matchedString = matchResult[0];
-    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
-    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
-      return pattern.test(matchedString);
-    }) : findKey(parsePatterns, function (pattern) {
-      return pattern.test(matchedString);
-    });
-    var value;
-    value = args.valueCallback ? args.valueCallback(key) : key;
-    value = options.valueCallback ? options.valueCallback(value) : value;
-    var rest = string.slice(matchedString.length);
-    return {
-      value: value,
-      rest: rest
-    };
-  };
+function toInteger(dirtyNumber) {
+  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
+    return NaN;
+  }
+  var number = Number(dirtyNumber);
+  if (isNaN(number)) {
+    return number;
+  }
+  return number < 0 ? Math.ceil(number) : Math.floor(number);
 }
 
-function findKey(object, predicate) {
-  for (var key in object) {
-    if (object.hasOwnProperty(key) && predicate(object[key])) {
-      return key;
+function requiredArgs(required, args) {
+  if (args.length < required) {
+    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
+  }
+}
+
+/**
+ * @name toDate
+ * @category Common Helpers
+ * @summary Convert the given argument to an instance of Date.
+ *
+ * @description
+ * Convert the given argument to an instance of Date.
+ *
+ * If the argument is an instance of Date, the function returns its clone.
+ *
+ * If the argument is a number, it is treated as a timestamp.
+ *
+ * If the argument is none of the above, the function returns Invalid Date.
+ *
+ * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
+ *
+ * @param {Date|Number} argument - the value to convert
+ * @returns {Date} the parsed date in the local time zone
+ * @throws {TypeError} 1 argument required
+ *
+ * @example
+ * // Clone the date:
+ * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
+ * //=> Tue Feb 11 2014 11:30:30
+ *
+ * @example
+ * // Convert the timestamp to date:
+ * const result = toDate(1392098430000)
+ * //=> Tue Feb 11 2014 11:30:30
+ */
+function toDate(argument) {
+  requiredArgs(1, arguments);
+  var argStr = Object.prototype.toString.call(argument);
+
+  // Clone the date
+  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
+    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
+    return new Date(argument.getTime());
+  } else if (typeof argument === 'number' || argStr === '[object Number]') {
+    return new Date(argument);
+  } else {
+    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
+      // eslint-disable-next-line no-console
+      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
+      // eslint-disable-next-line no-console
+      console.warn(new Error().stack);
     }
+    return new Date(NaN);
   }
+}
 
-  return undefined;
+/**
+ * @name addMilliseconds
+ * @category Millisecond Helpers
+ * @summary Add the specified number of milliseconds to the given date.
+ *
+ * @description
+ * Add the specified number of milliseconds to the given date.
+ *
+ * @param {Date|Number} date - the date to be changed
+ * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
+ * @returns {Date} the new date with the milliseconds added
+ * @throws {TypeError} 2 arguments required
+ *
+ * @example
+ * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
+ * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
+ * //=> Thu Jul 10 2014 12:45:30.750
+ */
+function addMilliseconds(dirtyDate, dirtyAmount) {
+  requiredArgs(2, arguments);
+  var timestamp = toDate(dirtyDate).getTime();
+  var amount = toInteger(dirtyAmount);
+  return new Date(timestamp + amount);
 }
 
-function findIndex(array, predicate) {
-  for (var key = 0; key < array.length; key++) {
-    if (predicate(array[key])) {
-      return key;
-    }
+var defaultOptions = {};
+function getDefaultOptions() {
+  return defaultOptions;
+}
+
+/**
+ * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
+ * They usually appear for dates that denote time before the timezones were introduced
+ * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
+ * and GMT+01:00:00 after that date)
+ *
+ * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
+ * which would lead to incorrect calculations.
+ *
+ * This function returns the timezone offset in milliseconds that takes seconds in account.
+ */
+function getTimezoneOffsetInMilliseconds(date) {
+  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
+  utcDate.setUTCFullYear(date.getFullYear());
+  return date.getTime() - utcDate.getTime();
+}
+
+/**
+ * @name compareAsc
+ * @category Common Helpers
+ * @summary Compare the two dates and return -1, 0 or 1.
+ *
+ * @description
+ * Compare the two dates and return 1 if the first date is after the second,
+ * -1 if the first date is before the second or 0 if dates are equal.
+ *
+ * @param {Date|Number} dateLeft - the first date to compare
+ * @param {Date|Number} dateRight - the second date to compare
+ * @returns {Number} the result of the comparison
+ * @throws {TypeError} 2 arguments required
+ *
+ * @example
+ * // Compare 11 February 1987 and 10 July 1989:
+ * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
+ * //=> -1
+ *
+ * @example
+ * // Sort the array of dates:
+ * const result = [
+ *   new Date(1995, 6, 2),
+ *   new Date(1987, 1, 11),
+ *   new Date(1989, 6, 10)
+ * ].sort(compareAsc)
+ * //=> [
+ * //   Wed Feb 11 1987 00:00:00,
+ * //   Mon Jul 10 1989 00:00:00,
+ * //   Sun Jul 02 1995 00:00:00
+ * // ]
+ */
+function compareAsc(dirtyDateLeft, dirtyDateRight) {
+  requiredArgs(2, arguments);
+  var dateLeft = toDate(dirtyDateLeft);
+  var dateRight = toDate(dirtyDateRight);
+  var diff = dateLeft.getTime() - dateRight.getTime();
+  if (diff < 0) {
+    return -1;
+  } else if (diff > 0) {
+    return 1;
+    // Return 0 if diff is 0; return NaN if diff is NaN
+  } else {
+    return diff;
   }
+}
+
+/**
+ * Days in 1 week.
+ *
+ * @name daysInWeek
+ * @constant
+ * @type {number}
+ * @default
+ */
+
+/**
+ * Milliseconds in 1 minute
+ *
+ * @name millisecondsInMinute
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInMinute = 60000;
 
-  return undefined;
-}
+/**
+ * Milliseconds in 1 hour
+ *
+ * @name millisecondsInHour
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInHour = 3600000;
 
-function buildMatchPatternFn(args) {
-  return function (string) {
-    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
-    var matchResult = string.match(args.matchPattern);
-    if (!matchResult) return null;
-    var matchedString = matchResult[0];
-    var parseResult = string.match(args.parsePattern);
-    if (!parseResult) return null;
-    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
-    value = options.valueCallback ? options.valueCallback(value) : value;
-    var rest = string.slice(matchedString.length);
-    return {
-      value: value,
-      rest: rest
-    };
-  };
-}
+/**
+ * Milliseconds in 1 second
+ *
+ * @name millisecondsInSecond
+ * @constant
+ * @type {number}
+ * @default
+ */
+var millisecondsInSecond = 1000;
 
-var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
-var parseOrdinalNumberPattern = /\d+/i;
-var matchEraPatterns = {
-  narrow: /^(b|a)/i,
-  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
-  wide: /^(before christ|before common era|anno domini|common era)/i
-};
-var parseEraPatterns = {
-  any: [/^b/i, /^(a|c)/i]
-};
-var matchQuarterPatterns = {
-  narrow: /^[1234]/i,
-  abbreviated: /^q[1234]/i,
-  wide: /^[1234](th|st|nd|rd)? quarter/i
-};
-var parseQuarterPatterns = {
-  any: [/1/i, /2/i, /3/i, /4/i]
-};
-var matchMonthPatterns = {
-  narrow: /^[jfmasond]/i,
-  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
-  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
-};
-var parseMonthPatterns = {
-  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
-  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
-};
-var matchDayPatterns = {
-  narrow: /^[smtwf]/i,
-  short: /^(su|mo|tu|we|th|fr|sa)/i,
-  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
-  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
-};
-var parseDayPatterns = {
-  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
-  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
-};
-var matchDayPeriodPatterns = {
-  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
-  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
-};
-var parseDayPeriodPatterns = {
-  any: {
-    am: /^a/i,
-    pm: /^p/i,
-    midnight: /^mi/i,
-    noon: /^no/i,
-    morning: /morning/i,
-    afternoon: /afternoon/i,
-    evening: /evening/i,
-    night: /night/i
-  }
-};
-var match = {
-  ordinalNumber: buildMatchPatternFn({
-    matchPattern: matchOrdinalNumberPattern,
-    parsePattern: parseOrdinalNumberPattern,
-    valueCallback: function (value) {
-      return parseInt(value, 10);
-    }
-  }),
-  era: buildMatchFn({
-    matchPatterns: matchEraPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseEraPatterns,
-    defaultParseWidth: 'any'
-  }),
-  quarter: buildMatchFn({
-    matchPatterns: matchQuarterPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseQuarterPatterns,
-    defaultParseWidth: 'any',
-    valueCallback: function (index) {
-      return index + 1;
-    }
-  }),
-  month: buildMatchFn({
-    matchPatterns: matchMonthPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseMonthPatterns,
-    defaultParseWidth: 'any'
-  }),
-  day: buildMatchFn({
-    matchPatterns: matchDayPatterns,
-    defaultMatchWidth: 'wide',
-    parsePatterns: parseDayPatterns,
-    defaultParseWidth: 'any'
-  }),
-  dayPeriod: buildMatchFn({
-    matchPatterns: matchDayPeriodPatterns,
-    defaultMatchWidth: 'any',
-    parsePatterns: parseDayPeriodPatterns,
-    defaultParseWidth: 'any'
-  })
-};
-var match$1 = match;
+/**
+ * @name isDate
+ * @category Common Helpers
+ * @summary Is the given value a date?
+ *
+ * @description
+ * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
+ *
+ * @param {*} value - the value to check
+ * @returns {boolean} true if the given value is a date
+ * @throws {TypeError} 1 arguments required
+ *
+ * @example
+ * // For a valid date:
+ * const result = isDate(new Date())
+ * //=> true
+ *
+ * @example
+ * // For an invalid date:
+ * const result = isDate(new Date(NaN))
+ * //=> true
+ *
+ * @example
+ * // For some value:
+ * const result = isDate('2014-02-31')
+ * //=> false
+ *
+ * @example
+ * // For an object:
+ * const result = isDate({})
+ * //=> false
+ */
+function isDate(value) {
+  requiredArgs(1, arguments);
+  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
+}
 
 /**
- * @type {Locale}
- * @category Locales
- * @summary English locale (United States).
- * @language English
- * @iso-639-2 eng
- * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
- * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
+ * @name isValid
+ * @category Common Helpers
+ * @summary Is the given date valid?
+ *
+ * @description
+ * Returns false if argument is Invalid Date and true otherwise.
+ * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
+ * Invalid Date is a Date, whose time value is NaN.
+ *
+ * Time value of Date: http://es5.github.io/#x15.9.1.1
+ *
+ * @param {*} date - the date to check
+ * @returns {Boolean} the date is valid
+ * @throws {TypeError} 1 argument required
+ *
+ * @example
+ * // For the valid date:
+ * const result = isValid(new Date(2014, 1, 31))
+ * //=> true
+ *
+ * @example
+ * // For the value, convertable into a date:
+ * const result = isValid(1393804800000)
+ * //=> true
+ *
+ * @example
+ * // For the invalid date:
+ * const result = isValid(new Date(''))
+ * //=> false
  */
-var locale = {
-  code: 'en-US',
-  formatDistance: formatDistance$1,
-  formatLong: formatLong$1,
-  formatRelative: formatRelative$1,
-  localize: localize$1,
-  match: match$1,
-  options: {
-    weekStartsOn: 0
-    /* Sunday */
-    ,
-    firstWeekContainsDate: 1
+function isValid(dirtyDate) {
+  requiredArgs(1, arguments);
+  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
+    return false;
   }
-};
-var defaultLocale = locale;
+  var date = toDate(dirtyDate);
+  return !isNaN(Number(date));
+}
 
 /**
  * @name subMilliseconds
@@ -4454,10 +3953,6 @@ var defaultLocale = locale;
  * @description
  * Subtract the specified number of milliseconds from the given date.
  *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
  * @param {Date|Number} date - the date to be changed
  * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
  * @returns {Date} the new date with the milliseconds subtracted
@@ -4468,16 +3963,13 @@ var defaultLocale = locale;
  * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
  * //=> Thu Jul 10 2014 12:45:29.250
  */
-
 function subMilliseconds(dirtyDate, dirtyAmount) {
   requiredArgs(2, arguments);
   var amount = toInteger(dirtyAmount);
   return addMilliseconds(dirtyDate, -amount);
 }
 
-var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_DAY = 86400000;
 function getUTCDayOfYear(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
@@ -4489,8 +3981,6 @@ function getUTCDayOfYear(dirtyDate) {
   return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function startOfUTCISOWeek(dirtyDate) {
   requiredArgs(1, arguments);
   var weekStartsOn = 1;
@@ -4502,8 +3992,6 @@ function startOfUTCISOWeek(dirtyDate) {
   return date;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function getUTCISOWeekYear(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
@@ -4516,7 +4004,6 @@ function getUTCISOWeekYear(dirtyDate) {
   fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
   fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
   var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
-
   if (date.getTime() >= startOfNextYear.getTime()) {
     return year + 1;
   } else if (date.getTime() >= startOfThisYear.getTime()) {
@@ -4526,8 +4013,6 @@ function getUTCISOWeekYear(dirtyDate) {
   }
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
 function startOfUTCISOWeekYear(dirtyDate) {
   requiredArgs(1, arguments);
   var year = getUTCISOWeekYear(dirtyDate);
@@ -4538,33 +4023,28 @@ function startOfUTCISOWeekYear(dirtyDate) {
   return date;
 }
 
-var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_WEEK$1 = 604800000;
 function getUTCISOWeek(dirtyDate) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
-  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
+  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
+
+  // Round the number of days to the nearest integer
   // because the number of milliseconds in a week is not constant
   // (e.g. it's different in the week of the daylight saving time clock shift)
-
   return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function startOfUTCWeek(dirtyDate, dirtyOptions) {
+function startOfUTCWeek(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
 
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   var date = toDate(dirtyDate);
   var day = date.getUTCDay();
   var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
@@ -4573,31 +4053,26 @@ function startOfUTCWeek(dirtyDate, dirtyOptions) {
   return date;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function getUTCWeekYear(dirtyDate, dirtyOptions) {
+function getUTCWeekYear(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
   var year = date.getUTCFullYear();
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
 
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
-
   var firstWeekOfNextYear = new Date(0);
   firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
   firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
-  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
+  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
   var firstWeekOfThisYear = new Date(0);
   firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
   firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
-  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
-
+  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
   if (date.getTime() >= startOfNextYear.getTime()) {
     return year + 1;
   } else if (date.getTime() >= startOfThisYear.getTime()) {
@@ -4607,44 +4082,37 @@ function getUTCWeekYear(dirtyDate, dirtyOptions) {
   }
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
-function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
+function startOfUTCWeekYear(dirtyDate, options) {
+  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
   requiredArgs(1, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
-  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
+  var defaultOptions = getDefaultOptions();
+  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
+  var year = getUTCWeekYear(dirtyDate, options);
   var firstWeek = new Date(0);
   firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
   firstWeek.setUTCHours(0, 0, 0, 0);
-  var date = startOfUTCWeek(firstWeek, dirtyOptions);
+  var date = startOfUTCWeek(firstWeek, options);
   return date;
 }
 
-var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
-// See issue: https://github.com/date-fns/date-fns/issues/376
-
+var MILLISECONDS_IN_WEEK = 604800000;
 function getUTCWeek(dirtyDate, options) {
   requiredArgs(1, arguments);
   var date = toDate(dirtyDate);
-  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
+  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
+
+  // Round the number of days to the nearest integer
   // because the number of milliseconds in a week is not constant
   // (e.g. it's different in the week of the daylight saving time clock shift)
-
   return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
 }
 
 function addLeadingZeros(number, targetLength) {
   var sign = number < 0 ? '-' : '';
   var output = Math.abs(number).toString();
-
   while (output.length < targetLength) {
     output = '0' + output;
   }
-
   return sign + output;
 }
 
@@ -4660,10 +4128,9 @@ function addLeadingZeros(number, targetLength) {
  *
  * Letters marked by * are not implemented but reserved by Unicode standard.
  */
-
 var formatters$2 = {
   // Year
-  y: function (date, token) {
+  y: function y(date, token) {
     // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
     // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
     // |----------|-------|----|-------|-------|-------|
@@ -4672,58 +4139,55 @@ var formatters$2 = {
     // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
     // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
     // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
-    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)
 
+    var signedYear = date.getUTCFullYear();
+    // Returns 1 for 1 BC (which is year 0 in JavaScript)
     var year = signedYear > 0 ? signedYear : 1 - signedYear;
     return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
   },
   // Month
-  M: function (date, token) {
+  M: function M(date, token) {
     var month = date.getUTCMonth();
     return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
   },
   // Day of the month
-  d: function (date, token) {
+  d: function d(date, token) {
     return addLeadingZeros(date.getUTCDate(), token.length);
   },
   // AM or PM
-  a: function (date, token) {
+  a: function a(date, token) {
     var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
-
     switch (token) {
       case 'a':
       case 'aa':
         return dayPeriodEnumValue.toUpperCase();
-
       case 'aaa':
         return dayPeriodEnumValue;
-
       case 'aaaaa':
         return dayPeriodEnumValue[0];
-
       case 'aaaa':
       default:
         return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
     }
   },
   // Hour [1-12]
-  h: function (date, token) {
+  h: function h(date, token) {
     return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
   },
   // Hour [0-23]
-  H: function (date, token) {
+  H: function H(date, token) {
     return addLeadingZeros(date.getUTCHours(), token.length);
   },
   // Minute
-  m: function (date, token) {
+  m: function m(date, token) {
     return addLeadingZeros(date.getUTCMinutes(), token.length);
   },
   // Second
-  s: function (date, token) {
+  s: function s(date, token) {
     return addLeadingZeros(date.getUTCSeconds(), token.length);
   },
   // Fraction of second
-  S: function (date, token) {
+  S: function S(date, token) {
     var numberOfDigits = token.length;
     var milliseconds = date.getUTCMilliseconds();
     var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
@@ -4790,9 +4254,8 @@ var dayPeriodEnum = {
 
 var formatters = {
   // Era
-  G: function (date, token, localize) {
+  G: function G(date, token, localize) {
     var era = date.getUTCFullYear() > 0 ? 1 : 0;
-
     switch (token) {
       // AD, BC
       case 'G':
@@ -4802,13 +4265,11 @@ var formatters = {
           width: 'abbreviated'
         });
       // A, B
-
       case 'GGGGG':
         return localize.era(era, {
           width: 'narrow'
         });
       // Anno Domini, Before Christ
-
       case 'GGGG':
       default:
         return localize.era(era, {
@@ -4817,44 +4278,45 @@ var formatters = {
     }
   },
   // Year
-  y: function (date, token, localize) {
+  y: function y(date, token, localize) {
     // Ordinal number
     if (token === 'yo') {
-      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)
-
+      var signedYear = date.getUTCFullYear();
+      // Returns 1 for 1 BC (which is year 0 in JavaScript)
       var year = signedYear > 0 ? signedYear : 1 - signedYear;
       return localize.ordinalNumber(year, {
         unit: 'year'
       });
     }
-
     return formatters$3.y(date, token);
   },
   // Local week-numbering year
-  Y: function (date, token, localize, options) {
-    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)
-
-    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year
+  Y: function Y(date, token, localize, options) {
+    var signedWeekYear = getUTCWeekYear(date, options);
+    // Returns 1 for 1 BC (which is year 0 in JavaScript)
+    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
 
+    // Two digit year
     if (token === 'YY') {
       var twoDigitYear = weekYear % 100;
       return addLeadingZeros(twoDigitYear, 2);
-    } // Ordinal number
-
+    }
 
+    // Ordinal number
     if (token === 'Yo') {
       return localize.ordinalNumber(weekYear, {
         unit: 'year'
       });
-    } // Padding
-
+    }
 
+    // Padding
     return addLeadingZeros(weekYear, token.length);
   },
   // ISO week-numbering year
-  R: function (date, token) {
-    var isoWeekYear = getUTCISOWeekYear(date); // Padding
+  R: function R(date, token) {
+    var isoWeekYear = getUTCISOWeekYear(date);
 
+    // Padding
     return addLeadingZeros(isoWeekYear, token.length);
   },
   // Extended year. This is a single number designating the year of this calendar system.
@@ -4866,44 +4328,38 @@ var formatters = {
   // | BC 2 |   2 |  -1 |
   // Also `yy` always returns the last two digits of a year,
   // while `uu` pads single digit years to 2 characters and returns other years unchanged.
-  u: function (date, token) {
+  u: function u(date, token) {
     var year = date.getUTCFullYear();
     return addLeadingZeros(year, token.length);
   },
   // Quarter
-  Q: function (date, token, localize) {
+  Q: function Q(date, token, localize) {
     var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
-
     switch (token) {
       // 1, 2, 3, 4
       case 'Q':
         return String(quarter);
       // 01, 02, 03, 04
-
       case 'QQ':
         return addLeadingZeros(quarter, 2);
       // 1st, 2nd, 3rd, 4th
-
       case 'Qo':
         return localize.ordinalNumber(quarter, {
           unit: 'quarter'
         });
       // Q1, Q2, Q3, Q4
-
       case 'QQQ':
         return localize.quarter(quarter, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
       case 'QQQQQ':
         return localize.quarter(quarter, {
           width: 'narrow',
           context: 'formatting'
         });
       // 1st quarter, 2nd quarter, ...
-
       case 'QQQQ':
       default:
         return localize.quarter(quarter, {
@@ -4913,39 +4369,33 @@ var formatters = {
     }
   },
   // Stand-alone quarter
-  q: function (date, token, localize) {
+  q: function q(date, token, localize) {
     var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
-
     switch (token) {
       // 1, 2, 3, 4
       case 'q':
         return String(quarter);
       // 01, 02, 03, 04
-
       case 'qq':
         return addLeadingZeros(quarter, 2);
       // 1st, 2nd, 3rd, 4th
-
       case 'qo':
         return localize.ordinalNumber(quarter, {
           unit: 'quarter'
         });
       // Q1, Q2, Q3, Q4
-
       case 'qqq':
         return localize.quarter(quarter, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
       case 'qqqqq':
         return localize.quarter(quarter, {
           width: 'narrow',
           context: 'standalone'
         });
       // 1st quarter, 2nd quarter, ...
-
       case 'qqqq':
       default:
         return localize.quarter(quarter, {
@@ -4955,35 +4405,30 @@ var formatters = {
     }
   },
   // Month
-  M: function (date, token, localize) {
+  M: function M(date, token, localize) {
     var month = date.getUTCMonth();
-
     switch (token) {
       case 'M':
       case 'MM':
         return formatters$3.M(date, token);
       // 1st, 2nd, ..., 12th
-
       case 'Mo':
         return localize.ordinalNumber(month + 1, {
           unit: 'month'
         });
       // Jan, Feb, ..., Dec
-
       case 'MMM':
         return localize.month(month, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // J, F, ..., D
-
       case 'MMMMM':
         return localize.month(month, {
           width: 'narrow',
           context: 'formatting'
         });
       // January, February, ..., December
-
       case 'MMMM':
       default:
         return localize.month(month, {
@@ -4993,39 +4438,33 @@ var formatters = {
     }
   },
   // Stand-alone month
-  L: function (date, token, localize) {
+  L: function L(date, token, localize) {
     var month = date.getUTCMonth();
-
     switch (token) {
       // 1, 2, ..., 12
       case 'L':
         return String(month + 1);
       // 01, 02, ..., 12
-
       case 'LL':
         return addLeadingZeros(month + 1, 2);
       // 1st, 2nd, ..., 12th
-
       case 'Lo':
         return localize.ordinalNumber(month + 1, {
           unit: 'month'
         });
       // Jan, Feb, ..., Dec
-
       case 'LLL':
         return localize.month(month, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // J, F, ..., D
-
       case 'LLLLL':
         return localize.month(month, {
           width: 'narrow',
           context: 'standalone'
         });
       // January, February, ..., December
-
       case 'LLLL':
       default:
         return localize.month(month, {
@@ -5035,55 +4474,47 @@ var formatters = {
     }
   },
   // Local week of year
-  w: function (date, token, localize, options) {
+  w: function w(date, token, localize, options) {
     var week = getUTCWeek(date, options);
-
     if (token === 'wo') {
       return localize.ordinalNumber(week, {
         unit: 'week'
       });
     }
-
     return addLeadingZeros(week, token.length);
   },
   // ISO week of year
-  I: function (date, token, localize) {
+  I: function I(date, token, localize) {
     var isoWeek = getUTCISOWeek(date);
-
     if (token === 'Io') {
       return localize.ordinalNumber(isoWeek, {
         unit: 'week'
       });
     }
-
     return addLeadingZeros(isoWeek, token.length);
   },
   // Day of the month
-  d: function (date, token, localize) {
+  d: function d(date, token, localize) {
     if (token === 'do') {
       return localize.ordinalNumber(date.getUTCDate(), {
         unit: 'date'
       });
     }
-
     return formatters$3.d(date, token);
   },
   // Day of year
-  D: function (date, token, localize) {
+  D: function D(date, token, localize) {
     var dayOfYear = getUTCDayOfYear(date);
-
     if (token === 'Do') {
       return localize.ordinalNumber(dayOfYear, {
         unit: 'dayOfYear'
       });
     }
-
     return addLeadingZeros(dayOfYear, token.length);
   },
   // Day of week
-  E: function (date, token, localize) {
+  E: function E(date, token, localize) {
     var dayOfWeek = date.getUTCDay();
-
     switch (token) {
       // Tue
       case 'E':
@@ -5094,21 +4525,18 @@ var formatters = {
           context: 'formatting'
         });
       // T
-
       case 'EEEEE':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'EEEEEE':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'EEEE':
       default:
         return localize.day(dayOfWeek, {
@@ -5118,46 +4546,39 @@ var formatters = {
     }
   },
   // Local day of week
-  e: function (date, token, localize, options) {
+  e: function e(date, token, localize, options) {
     var dayOfWeek = date.getUTCDay();
     var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
-
     switch (token) {
       // Numerical value (Nth day of week with current locale or weekStartsOn)
       case 'e':
         return String(localDayOfWeek);
       // Padded numerical value
-
       case 'ee':
         return addLeadingZeros(localDayOfWeek, 2);
       // 1st, 2nd, ..., 7th
-
       case 'eo':
         return localize.ordinalNumber(localDayOfWeek, {
           unit: 'day'
         });
-
       case 'eee':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // T
-
       case 'eeeee':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'eeeeee':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'eeee':
       default:
         return localize.day(dayOfWeek, {
@@ -5167,46 +4588,39 @@ var formatters = {
     }
   },
   // Stand-alone local day of week
-  c: function (date, token, localize, options) {
+  c: function c(date, token, localize, options) {
     var dayOfWeek = date.getUTCDay();
     var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
-
     switch (token) {
       // Numerical value (same as in `e`)
       case 'c':
         return String(localDayOfWeek);
       // Padded numerical value
-
       case 'cc':
         return addLeadingZeros(localDayOfWeek, token.length);
       // 1st, 2nd, ..., 7th
-
       case 'co':
         return localize.ordinalNumber(localDayOfWeek, {
           unit: 'day'
         });
-
       case 'ccc':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'standalone'
         });
       // T
-
       case 'ccccc':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'standalone'
         });
       // Tu
-
       case 'cccccc':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'standalone'
         });
       // Tuesday
-
       case 'cccc':
       default:
         return localize.day(dayOfWeek, {
@@ -5216,47 +4630,40 @@ var formatters = {
     }
   },
   // ISO day of week
-  i: function (date, token, localize) {
+  i: function i(date, token, localize) {
     var dayOfWeek = date.getUTCDay();
     var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
-
     switch (token) {
       // 2
       case 'i':
         return String(isoDayOfWeek);
       // 02
-
       case 'ii':
         return addLeadingZeros(isoDayOfWeek, token.length);
       // 2nd
-
       case 'io':
         return localize.ordinalNumber(isoDayOfWeek, {
           unit: 'day'
         });
       // Tue
-
       case 'iii':
         return localize.day(dayOfWeek, {
           width: 'abbreviated',
           context: 'formatting'
         });
       // T
-
       case 'iiiii':
         return localize.day(dayOfWeek, {
           width: 'narrow',
           context: 'formatting'
         });
       // Tu
-
       case 'iiiiii':
         return localize.day(dayOfWeek, {
           width: 'short',
           context: 'formatting'
         });
       // Tuesday
-
       case 'iiii':
       default:
         return localize.day(dayOfWeek, {
@@ -5266,10 +4673,9 @@ var formatters = {
     }
   },
   // AM or PM
-  a: function (date, token, localize) {
+  a: function a(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
-
     switch (token) {
       case 'a':
       case 'aa':
@@ -5277,19 +4683,16 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'aaa':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'abbreviated',
           context: 'formatting'
         }).toLowerCase();
-
       case 'aaaaa':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'aaaa':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5299,10 +4702,9 @@ var formatters = {
     }
   },
   // AM, PM, midnight, noon
-  b: function (date, token, localize) {
+  b: function b(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue;
-
     if (hours === 12) {
       dayPeriodEnumValue = dayPeriodEnum.noon;
     } else if (hours === 0) {
@@ -5310,7 +4712,6 @@ var formatters = {
     } else {
       dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
     }
-
     switch (token) {
       case 'b':
       case 'bb':
@@ -5318,19 +4719,16 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'bbb':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'abbreviated',
           context: 'formatting'
         }).toLowerCase();
-
       case 'bbbbb':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'bbbb':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5340,10 +4738,9 @@ var formatters = {
     }
   },
   // in the morning, in the afternoon, in the evening, at night
-  B: function (date, token, localize) {
+  B: function B(date, token, localize) {
     var hours = date.getUTCHours();
     var dayPeriodEnumValue;
-
     if (hours >= 17) {
       dayPeriodEnumValue = dayPeriodEnum.evening;
     } else if (hours >= 12) {
@@ -5353,7 +4750,6 @@ var formatters = {
     } else {
       dayPeriodEnumValue = dayPeriodEnum.night;
     }
-
     switch (token) {
       case 'B':
       case 'BB':
@@ -5362,13 +4758,11 @@ var formatters = {
           width: 'abbreviated',
           context: 'formatting'
         });
-
       case 'BBBBB':
         return localize.dayPeriod(dayPeriodEnumValue, {
           width: 'narrow',
           context: 'formatting'
         });
-
       case 'BBBB':
       default:
         return localize.dayPeriod(dayPeriodEnumValue, {
@@ -5378,7 +4772,7 @@ var formatters = {
     }
   },
   // Hour [1-12]
-  h: function (date, token, localize) {
+  h: function h(date, token, localize) {
     if (token === 'ho') {
       var hours = date.getUTCHours() % 12;
       if (hours === 0) hours = 12;
@@ -5386,133 +4780,119 @@ var formatters = {
         unit: 'hour'
       });
     }
-
     return formatters$3.h(date, token);
   },
   // Hour [0-23]
-  H: function (date, token, localize) {
+  H: function H(date, token, localize) {
     if (token === 'Ho') {
       return localize.ordinalNumber(date.getUTCHours(), {
         unit: 'hour'
       });
     }
-
     return formatters$3.H(date, token);
   },
   // Hour [0-11]
-  K: function (date, token, localize) {
+  K: function K(date, token, localize) {
     var hours = date.getUTCHours() % 12;
-
     if (token === 'Ko') {
       return localize.ordinalNumber(hours, {
         unit: 'hour'
       });
     }
-
     return addLeadingZeros(hours, token.length);
   },
   // Hour [1-24]
-  k: function (date, token, localize) {
+  k: function k(date, token, localize) {
     var hours = date.getUTCHours();
     if (hours === 0) hours = 24;
-
     if (token === 'ko') {
       return localize.ordinalNumber(hours, {
         unit: 'hour'
       });
     }
-
     return addLeadingZeros(hours, token.length);
   },
   // Minute
-  m: function (date, token, localize) {
+  m: function m(date, token, localize) {
     if (token === 'mo') {
       return localize.ordinalNumber(date.getUTCMinutes(), {
         unit: 'minute'
       });
     }
-
     return formatters$3.m(date, token);
   },
   // Second
-  s: function (date, token, localize) {
+  s: function s(date, token, localize) {
     if (token === 'so') {
       return localize.ordinalNumber(date.getUTCSeconds(), {
         unit: 'second'
       });
     }
-
     return formatters$3.s(date, token);
   },
   // Fraction of second
-  S: function (date, token) {
+  S: function S(date, token) {
     return formatters$3.S(date, token);
   },
   // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
-  X: function (date, token, _localize, options) {
+  X: function X(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     if (timezoneOffset === 0) {
       return 'Z';
     }
-
     switch (token) {
       // Hours and optional minutes
       case 'X':
         return formatTimezoneWithOptionalMinutes(timezoneOffset);
+
       // Hours, minutes and optional seconds without `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `XX`
-
       case 'XXXX':
       case 'XX':
         // Hours and minutes without `:` delimiter
         return formatTimezone(timezoneOffset);
+
       // Hours, minutes and optional seconds with `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `XXX`
-
       case 'XXXXX':
       case 'XXX': // Hours and minutes with `:` delimiter
-
       default:
         return formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
-  x: function (date, token, _localize, options) {
+  x: function x(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Hours and optional minutes
       case 'x':
         return formatTimezoneWithOptionalMinutes(timezoneOffset);
+
       // Hours, minutes and optional seconds without `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `xx`
-
       case 'xxxx':
       case 'xx':
         // Hours and minutes without `:` delimiter
         return formatTimezone(timezoneOffset);
+
       // Hours, minutes and optional seconds with `:` delimiter
       // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
       // so this token always has the same output as `xxx`
-
       case 'xxxxx':
       case 'xxx': // Hours and minutes with `:` delimiter
-
       default:
         return formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (GMT)
-  O: function (date, token, _localize, options) {
+  O: function O(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Short
       case 'O':
@@ -5520,17 +4900,15 @@ var formatters = {
       case 'OOO':
         return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
       // Long
-
       case 'OOOO':
       default:
         return 'GMT' + formatTimezone(timezoneOffset, ':');
     }
   },
   // Timezone (specific non-location)
-  z: function (date, token, _localize, options) {
+  z: function z(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timezoneOffset = originalDate.getTimezoneOffset();
-
     switch (token) {
       // Short
       case 'z':
@@ -5538,49 +4916,42 @@ var formatters = {
       case 'zzz':
         return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
       // Long
-
       case 'zzzz':
       default:
         return 'GMT' + formatTimezone(timezoneOffset, ':');
     }
   },
   // Seconds timestamp
-  t: function (date, token, _localize, options) {
+  t: function t(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timestamp = Math.floor(originalDate.getTime() / 1000);
     return addLeadingZeros(timestamp, token.length);
   },
   // Milliseconds timestamp
-  T: function (date, token, _localize, options) {
+  T: function T(date, token, _localize, options) {
     var originalDate = options._originalDate || date;
     var timestamp = originalDate.getTime();
     return addLeadingZeros(timestamp, token.length);
   }
 };
-
 function formatTimezoneShort(offset, dirtyDelimiter) {
   var sign = offset > 0 ? '-' : '+';
   var absOffset = Math.abs(offset);
   var hours = Math.floor(absOffset / 60);
   var minutes = absOffset % 60;
-
   if (minutes === 0) {
     return sign + String(hours);
   }
-
   var delimiter = dirtyDelimiter || '';
   return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
 }
-
 function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
   if (offset % 60 === 0) {
     var sign = offset > 0 ? '-' : '+';
     return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
   }
-
   return formatTimezone(offset, dirtyDelimiter);
 }
-
 function formatTimezone(offset, dirtyDelimiter) {
   var delimiter = dirtyDelimiter || '';
   var sign = offset > 0 ? '-' : '+';
@@ -5589,125 +4960,592 @@ function formatTimezone(offset, dirtyDelimiter) {
   var minutes = addLeadingZeros(absOffset % 60, 2);
   return sign + hours + delimiter + minutes;
 }
-
 var formatters$1 = formatters;
 
-function dateLongFormatter(pattern, formatLong) {
+var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
   switch (pattern) {
     case 'P':
       return formatLong.date({
         width: 'short'
       });
-
     case 'PP':
       return formatLong.date({
         width: 'medium'
       });
-
     case 'PPP':
       return formatLong.date({
         width: 'long'
       });
-
     case 'PPPP':
     default:
       return formatLong.date({
         width: 'full'
       });
   }
-}
-
-function timeLongFormatter(pattern, formatLong) {
+};
+var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
   switch (pattern) {
     case 'p':
       return formatLong.time({
         width: 'short'
       });
+    case 'pp':
+      return formatLong.time({
+        width: 'medium'
+      });
+    case 'ppp':
+      return formatLong.time({
+        width: 'long'
+      });
+    case 'pppp':
+    default:
+      return formatLong.time({
+        width: 'full'
+      });
+  }
+};
+var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
+  var matchResult = pattern.match(/(P+)(p+)?/) || [];
+  var datePattern = matchResult[1];
+  var timePattern = matchResult[2];
+  if (!timePattern) {
+    return dateLongFormatter(pattern, formatLong);
+  }
+  var dateTimeFormat;
+  switch (datePattern) {
+    case 'P':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'short'
+      });
+      break;
+    case 'PP':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'medium'
+      });
+      break;
+    case 'PPP':
+      dateTimeFormat = formatLong.dateTime({
+        width: 'long'
+      });
+      break;
+    case 'PPPP':
+    default:
+      dateTimeFormat = formatLong.dateTime({
+        width: 'full'
+      });
+      break;
+  }
+  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
+};
+var longFormatters = {
+  p: timeLongFormatter,
+  P: dateTimeLongFormatter
+};
+var longFormatters$1 = longFormatters;
+
+var protectedDayOfYearTokens = ['D', 'DD'];
+var protectedWeekYearTokens = ['YY', 'YYYY'];
+function isProtectedDayOfYearToken(token) {
+  return protectedDayOfYearTokens.indexOf(token) !== -1;
+}
+function isProtectedWeekYearToken(token) {
+  return protectedWeekYearTokens.indexOf(token) !== -1;
+}
+function throwProtectedError(token, format, input) {
+  if (token === 'YYYY') {
+    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'YY') {
+    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'D') {
+    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  } else if (token === 'DD') {
+    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
+  }
+}
+
+var formatDistanceLocale = {
+  lessThanXSeconds: {
+    one: 'less than a second',
+    other: 'less than {{count}} seconds'
+  },
+  xSeconds: {
+    one: '1 second',
+    other: '{{count}} seconds'
+  },
+  halfAMinute: 'half a minute',
+  lessThanXMinutes: {
+    one: 'less than a minute',
+    other: 'less than {{count}} minutes'
+  },
+  xMinutes: {
+    one: '1 minute',
+    other: '{{count}} minutes'
+  },
+  aboutXHours: {
+    one: 'about 1 hour',
+    other: 'about {{count}} hours'
+  },
+  xHours: {
+    one: '1 hour',
+    other: '{{count}} hours'
+  },
+  xDays: {
+    one: '1 day',
+    other: '{{count}} days'
+  },
+  aboutXWeeks: {
+    one: 'about 1 week',
+    other: 'about {{count}} weeks'
+  },
+  xWeeks: {
+    one: '1 week',
+    other: '{{count}} weeks'
+  },
+  aboutXMonths: {
+    one: 'about 1 month',
+    other: 'about {{count}} months'
+  },
+  xMonths: {
+    one: '1 month',
+    other: '{{count}} months'
+  },
+  aboutXYears: {
+    one: 'about 1 year',
+    other: 'about {{count}} years'
+  },
+  xYears: {
+    one: '1 year',
+    other: '{{count}} years'
+  },
+  overXYears: {
+    one: 'over 1 year',
+    other: 'over {{count}} years'
+  },
+  almostXYears: {
+    one: 'almost 1 year',
+    other: 'almost {{count}} years'
+  }
+};
+var formatDistance = function formatDistance(token, count, options) {
+  var result;
+  var tokenValue = formatDistanceLocale[token];
+  if (typeof tokenValue === 'string') {
+    result = tokenValue;
+  } else if (count === 1) {
+    result = tokenValue.one;
+  } else {
+    result = tokenValue.other.replace('{{count}}', count.toString());
+  }
+  if (options !== null && options !== void 0 && options.addSuffix) {
+    if (options.comparison && options.comparison > 0) {
+      return 'in ' + result;
+    } else {
+      return result + ' ago';
+    }
+  }
+  return result;
+};
+var formatDistance$1 = formatDistance;
+
+function buildFormatLongFn(args) {
+  return function () {
+    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
+    // TODO: Remove String()
+    var width = options.width ? String(options.width) : args.defaultWidth;
+    var format = args.formats[width] || args.formats[args.defaultWidth];
+    return format;
+  };
+}
 
-    case 'pp':
-      return formatLong.time({
-        width: 'medium'
-      });
+var dateFormats = {
+  full: 'EEEE, MMMM do, y',
+  long: 'MMMM do, y',
+  medium: 'MMM d, y',
+  short: 'MM/dd/yyyy'
+};
+var timeFormats = {
+  full: 'h:mm:ss a zzzz',
+  long: 'h:mm:ss a z',
+  medium: 'h:mm:ss a',
+  short: 'h:mm a'
+};
+var dateTimeFormats = {
+  full: "{{date}} 'at' {{time}}",
+  long: "{{date}} 'at' {{time}}",
+  medium: '{{date}}, {{time}}',
+  short: '{{date}}, {{time}}'
+};
+var formatLong = {
+  date: buildFormatLongFn({
+    formats: dateFormats,
+    defaultWidth: 'full'
+  }),
+  time: buildFormatLongFn({
+    formats: timeFormats,
+    defaultWidth: 'full'
+  }),
+  dateTime: buildFormatLongFn({
+    formats: dateTimeFormats,
+    defaultWidth: 'full'
+  })
+};
+var formatLong$1 = formatLong;
 
-    case 'ppp':
-      return formatLong.time({
-        width: 'long'
-      });
+var formatRelativeLocale = {
+  lastWeek: "'last' eeee 'at' p",
+  yesterday: "'yesterday at' p",
+  today: "'today at' p",
+  tomorrow: "'tomorrow at' p",
+  nextWeek: "eeee 'at' p",
+  other: 'P'
+};
+var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
+  return formatRelativeLocale[token];
+};
+var formatRelative$1 = formatRelative;
 
-    case 'pppp':
-    default:
-      return formatLong.time({
-        width: 'full'
-      });
-  }
+function buildLocalizeFn(args) {
+  return function (dirtyIndex, options) {
+    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
+    var valuesArray;
+    if (context === 'formatting' && args.formattingValues) {
+      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
+      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
+      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
+    } else {
+      var _defaultWidth = args.defaultWidth;
+      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
+      valuesArray = args.values[_width] || args.values[_defaultWidth];
+    }
+    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
+    // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
+    return valuesArray[index];
+  };
 }
 
-function dateTimeLongFormatter(pattern, formatLong) {
-  var matchResult = pattern.match(/(P+)(p+)?/) || [];
-  var datePattern = matchResult[1];
-  var timePattern = matchResult[2];
+var eraValues = {
+  narrow: ['B', 'A'],
+  abbreviated: ['BC', 'AD'],
+  wide: ['Before Christ', 'Anno Domini']
+};
+var quarterValues = {
+  narrow: ['1', '2', '3', '4'],
+  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
+  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
+};
 
-  if (!timePattern) {
-    return dateLongFormatter(pattern, formatLong);
+// Note: in English, the names of days of the week and months are capitalized.
+// If you are making a new locale based on this one, check if the same is true for the language you're working on.
+// Generally, formatted dates should look like they are in the middle of a sentence,
+// e.g. in Spanish language the weekdays and months should be in the lowercase.
+var monthValues = {
+  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
+  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
+};
+var dayValues = {
+  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
+  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
+  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
+  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
+};
+var dayPeriodValues = {
+  narrow: {
+    am: 'a',
+    pm: 'p',
+    midnight: 'mi',
+    noon: 'n',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
+  },
+  abbreviated: {
+    am: 'AM',
+    pm: 'PM',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
+  },
+  wide: {
+    am: 'a.m.',
+    pm: 'p.m.',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'morning',
+    afternoon: 'afternoon',
+    evening: 'evening',
+    night: 'night'
   }
+};
+var formattingDayPeriodValues = {
+  narrow: {
+    am: 'a',
+    pm: 'p',
+    midnight: 'mi',
+    noon: 'n',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  },
+  abbreviated: {
+    am: 'AM',
+    pm: 'PM',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  },
+  wide: {
+    am: 'a.m.',
+    pm: 'p.m.',
+    midnight: 'midnight',
+    noon: 'noon',
+    morning: 'in the morning',
+    afternoon: 'in the afternoon',
+    evening: 'in the evening',
+    night: 'at night'
+  }
+};
+var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
+  var number = Number(dirtyNumber);
 
-  var dateTimeFormat;
-
-  switch (datePattern) {
-    case 'P':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'short'
-      });
-      break;
-
-    case 'PP':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'medium'
-      });
-      break;
+  // If ordinal numbers depend on context, for example,
+  // if they are different for different grammatical genders,
+  // use `options.unit`.
+  //
+  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
+  // 'day', 'hour', 'minute', 'second'.
 
-    case 'PPP':
-      dateTimeFormat = formatLong.dateTime({
-        width: 'long'
-      });
-      break;
+  var rem100 = number % 100;
+  if (rem100 > 20 || rem100 < 10) {
+    switch (rem100 % 10) {
+      case 1:
+        return number + 'st';
+      case 2:
+        return number + 'nd';
+      case 3:
+        return number + 'rd';
+    }
+  }
+  return number + 'th';
+};
+var localize = {
+  ordinalNumber: ordinalNumber,
+  era: buildLocalizeFn({
+    values: eraValues,
+    defaultWidth: 'wide'
+  }),
+  quarter: buildLocalizeFn({
+    values: quarterValues,
+    defaultWidth: 'wide',
+    argumentCallback: function argumentCallback(quarter) {
+      return quarter - 1;
+    }
+  }),
+  month: buildLocalizeFn({
+    values: monthValues,
+    defaultWidth: 'wide'
+  }),
+  day: buildLocalizeFn({
+    values: dayValues,
+    defaultWidth: 'wide'
+  }),
+  dayPeriod: buildLocalizeFn({
+    values: dayPeriodValues,
+    defaultWidth: 'wide',
+    formattingValues: formattingDayPeriodValues,
+    defaultFormattingWidth: 'wide'
+  })
+};
+var localize$1 = localize;
 
-    case 'PPPP':
-    default:
-      dateTimeFormat = formatLong.dateTime({
-        width: 'full'
-      });
-      break;
+function buildMatchFn(args) {
+  return function (string) {
+    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+    var width = options.width;
+    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
+    var matchResult = string.match(matchPattern);
+    if (!matchResult) {
+      return null;
+    }
+    var matchedString = matchResult[0];
+    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
+    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
+      return pattern.test(matchedString);
+    }) : findKey(parsePatterns, function (pattern) {
+      return pattern.test(matchedString);
+    });
+    var value;
+    value = args.valueCallback ? args.valueCallback(key) : key;
+    value = options.valueCallback ? options.valueCallback(value) : value;
+    var rest = string.slice(matchedString.length);
+    return {
+      value: value,
+      rest: rest
+    };
+  };
+}
+function findKey(object, predicate) {
+  for (var key in object) {
+    if (object.hasOwnProperty(key) && predicate(object[key])) {
+      return key;
+    }
+  }
+  return undefined;
+}
+function findIndex(array, predicate) {
+  for (var key = 0; key < array.length; key++) {
+    if (predicate(array[key])) {
+      return key;
+    }
   }
+  return undefined;
+}
 
-  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
+function buildMatchPatternFn(args) {
+  return function (string) {
+    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+    var matchResult = string.match(args.matchPattern);
+    if (!matchResult) return null;
+    var matchedString = matchResult[0];
+    var parseResult = string.match(args.parsePattern);
+    if (!parseResult) return null;
+    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
+    value = options.valueCallback ? options.valueCallback(value) : value;
+    var rest = string.slice(matchedString.length);
+    return {
+      value: value,
+      rest: rest
+    };
+  };
 }
 
-var longFormatters = {
-  p: timeLongFormatter,
-  P: dateTimeLongFormatter
+var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
+var parseOrdinalNumberPattern = /\d+/i;
+var matchEraPatterns = {
+  narrow: /^(b|a)/i,
+  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
+  wide: /^(before christ|before common era|anno domini|common era)/i
 };
-var longFormatters$1 = longFormatters;
+var parseEraPatterns = {
+  any: [/^b/i, /^(a|c)/i]
+};
+var matchQuarterPatterns = {
+  narrow: /^[1234]/i,
+  abbreviated: /^q[1234]/i,
+  wide: /^[1234](th|st|nd|rd)? quarter/i
+};
+var parseQuarterPatterns = {
+  any: [/1/i, /2/i, /3/i, /4/i]
+};
+var matchMonthPatterns = {
+  narrow: /^[jfmasond]/i,
+  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
+  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
+};
+var parseMonthPatterns = {
+  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
+  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
+};
+var matchDayPatterns = {
+  narrow: /^[smtwf]/i,
+  short: /^(su|mo|tu|we|th|fr|sa)/i,
+  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
+  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
+};
+var parseDayPatterns = {
+  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
+  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
+};
+var matchDayPeriodPatterns = {
+  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
+  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
+};
+var parseDayPeriodPatterns = {
+  any: {
+    am: /^a/i,
+    pm: /^p/i,
+    midnight: /^mi/i,
+    noon: /^no/i,
+    morning: /morning/i,
+    afternoon: /afternoon/i,
+    evening: /evening/i,
+    night: /night/i
+  }
+};
+var match = {
+  ordinalNumber: buildMatchPatternFn({
+    matchPattern: matchOrdinalNumberPattern,
+    parsePattern: parseOrdinalNumberPattern,
+    valueCallback: function valueCallback(value) {
+      return parseInt(value, 10);
+    }
+  }),
+  era: buildMatchFn({
+    matchPatterns: matchEraPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseEraPatterns,
+    defaultParseWidth: 'any'
+  }),
+  quarter: buildMatchFn({
+    matchPatterns: matchQuarterPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseQuarterPatterns,
+    defaultParseWidth: 'any',
+    valueCallback: function valueCallback(index) {
+      return index + 1;
+    }
+  }),
+  month: buildMatchFn({
+    matchPatterns: matchMonthPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseMonthPatterns,
+    defaultParseWidth: 'any'
+  }),
+  day: buildMatchFn({
+    matchPatterns: matchDayPatterns,
+    defaultMatchWidth: 'wide',
+    parsePatterns: parseDayPatterns,
+    defaultParseWidth: 'any'
+  }),
+  dayPeriod: buildMatchFn({
+    matchPatterns: matchDayPeriodPatterns,
+    defaultMatchWidth: 'any',
+    parsePatterns: parseDayPeriodPatterns,
+    defaultParseWidth: 'any'
+  })
+};
+var match$1 = match;
 
-var protectedDayOfYearTokens = ['D', 'DD'];
-var protectedWeekYearTokens = ['YY', 'YYYY'];
-function isProtectedDayOfYearToken(token) {
-  return protectedDayOfYearTokens.indexOf(token) !== -1;
-}
-function isProtectedWeekYearToken(token) {
-  return protectedWeekYearTokens.indexOf(token) !== -1;
-}
-function throwProtectedError(token, format, input) {
-  if (token === 'YYYY') {
-    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'YY') {
-    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'D') {
-    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
-  } else if (token === 'DD') {
-    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
+/**
+ * @type {Locale}
+ * @category Locales
+ * @summary English locale (United States).
+ * @language English
+ * @iso-639-2 eng
+ * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
+ * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
+ */
+var locale = {
+  code: 'en-US',
+  formatDistance: formatDistance$1,
+  formatLong: formatLong$1,
+  formatRelative: formatRelative$1,
+  localize: localize$1,
+  match: match$1,
+  options: {
+    weekStartsOn: 0 /* Sunday */,
+    firstWeekContainsDate: 1
   }
-}
+};
+var defaultLocale = locale;
 
 // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
 //   (one of the certain letters followed by `o`)
@@ -5719,14 +5557,15 @@ function throwProtectedError(token, format, input) {
 //   If there is no matching single quote
 //   then the sequence will continue until the end of the string.
 // - . matches any single character unmatched by previous parts of the RegExps
+var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
 
-var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
+// This RegExp catches symbols escaped by quotes, and also
 // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
-
 var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
 var escapedStringRegExp$1 = /^'([^]*?)'?$/;
 var doubleQuoteRegExp$1 = /''/g;
 var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
+
 /**
  * @name format
  * @category Common Helpers
@@ -5736,7 +5575,7 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * Return the formatted date string in the given format. The result may vary by locale.
  *
  * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
- * > See: https://git.io/fxCyr
+ * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * The characters wrapped between two single quotes characters (') are escaped.
  * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
@@ -5972,30 +5811,10 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  *    - `p`: long localized time
  *
  * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
- *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
- *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
- *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - The second argument is now required for the sake of explicitness.
- *
- *   ```javascript
- *   // Before v2.0.0
- *   format(new Date(2016, 0, 1))
- *
- *   // v2.0.0 onward
- *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
- *   ```
- *
- * - New format string API for `format` function
- *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
- *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
- *
- * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
+ *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * @param {Date|Number} date - the original date
  * @param {String} format - the string of tokens
@@ -6004,9 +5823,9 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
  * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
  * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @returns {String} the formatted date string
  * @throws {TypeError} 2 arguments required
  * @throws {RangeError} `date` must not be Invalid Date
@@ -6014,69 +5833,63 @@ var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
  * @throws {RangeError} `options.locale` must contain `formatLong` property
  * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
  * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
- * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
+ * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @throws {RangeError} format string contains an unescaped latin alphabet character
  *
  * @example
  * // Represent 11 February 2014 in middle-endian format:
- * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
+ * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
  * //=> '02/11/2014'
  *
  * @example
  * // Represent 2 July 2014 in Esperanto:
  * import { eoLocale } from 'date-fns/locale/eo'
- * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
+ * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
  *   locale: eoLocale
  * })
  * //=> '2-a de julio 2014'
  *
  * @example
  * // Escape string by single quote characters:
- * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
+ * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
  * //=> "3 o'clock"
  */
 
-function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
+function format(dirtyDate, dirtyFormatStr, options) {
+  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
   requiredArgs(2, arguments);
   var formatStr = String(dirtyFormatStr);
-  var options = dirtyOptions || {};
-  var locale = options.locale || defaultLocale;
-  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
+  var defaultOptions = getDefaultOptions();
+  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
+  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
 
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
+  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
 
-  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
-
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   if (!locale.localize) {
     throw new RangeError('locale must contain localize property');
   }
-
   if (!locale.formatLong) {
     throw new RangeError('locale must contain formatLong property');
   }
-
   var originalDate = toDate(dirtyDate);
-
   if (!isValid(originalDate)) {
     throw new RangeError('Invalid time value');
-  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
+  }
+
+  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
   // This ensures that when UTC functions will be implemented, locales will be compatible with them.
   // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
-
-
   var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
   var utcDate = subMilliseconds(originalDate, timezoneOffset);
   var formatterOptions = {
@@ -6087,137 +5900,376 @@ function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
   };
   var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
     var firstCharacter = substring[0];
-
     if (firstCharacter === 'p' || firstCharacter === 'P') {
       var longFormatter = longFormatters$1[firstCharacter];
-      return longFormatter(substring, locale.formatLong, formatterOptions);
+      return longFormatter(substring, locale.formatLong);
     }
-
     return substring;
   }).join('').match(formattingTokensRegExp$1).map(function (substring) {
     // Replace two single quote characters with one single quote character
     if (substring === "''") {
       return "'";
     }
-
     var firstCharacter = substring[0];
-
     if (firstCharacter === "'") {
       return cleanEscapedString$1(substring);
     }
-
     var formatter = formatters$1[firstCharacter];
-
     if (formatter) {
-      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
-        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
+      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
+        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
       }
-
-      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
-        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
+      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
+        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
       }
-
       return formatter(utcDate, substring, locale.localize, formatterOptions);
     }
-
     if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
       throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
     }
-
     return substring;
   }).join('');
   return result;
 }
-
 function cleanEscapedString$1(input) {
-  return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1, "'");
+  var matched = input.match(escapedStringRegExp$1);
+  if (!matched) {
+    return input;
+  }
+  return matched[1].replace(doubleQuoteRegExp$1, "'");
 }
 
-function assign(target, dirtyObject) {
+function assign(target, object) {
   if (target == null) {
     throw new TypeError('assign requires that input parameter not be null or undefined');
   }
-
-  dirtyObject = dirtyObject || {};
-
-  for (var property in dirtyObject) {
-    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
-      target[property] = dirtyObject[property];
+  for (var property in object) {
+    if (Object.prototype.hasOwnProperty.call(object, property)) {
+      target[property] = object[property];
     }
   }
-
   return target;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _arrayLikeToArray(r, a) {
+  (null == a || a > r.length) && (a = r.length);
+  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
+  return n;
+}
 
-function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
-  requiredArgs(2, arguments);
-  var options = dirtyOptions || {};
-  var locale = options.locale;
-  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+function _unsupportedIterableToArray(r, a) {
+  if (r) {
+    if ("string" == typeof r) return _arrayLikeToArray(r, a);
+    var t = {}.toString.call(r).slice(8, -1);
+    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
+  }
+}
 
-  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
-    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
+function _createForOfIteratorHelper(r, e) {
+  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
+  if (!t) {
+    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
+      t && (r = t);
+      var _n = 0,
+        F = function F() {};
+      return {
+        s: F,
+        n: function n() {
+          return _n >= r.length ? {
+            done: !0
+          } : {
+            done: !1,
+            value: r[_n++]
+          };
+        },
+        e: function e(r) {
+          throw r;
+        },
+        f: F
+      };
+    }
+    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
   }
+  var o,
+    a = !0,
+    u = !1;
+  return {
+    s: function s() {
+      t = t.call(r);
+    },
+    n: function n() {
+      var r = t.next();
+      return a = r.done, r;
+    },
+    e: function e(r) {
+      u = !0, o = r;
+    },
+    f: function f() {
+      try {
+        a || null == t["return"] || t["return"]();
+      } finally {
+        if (u) throw o;
+      }
+    }
+  };
+}
 
-  var date = toDate(dirtyDate);
-  var day = toInteger(dirtyDay);
-  var currentDay = date.getUTCDay();
-  var remainder = day % 7;
-  var dayIndex = (remainder + 7) % 7;
-  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
-  date.setUTCDate(date.getUTCDate() + diff);
-  return date;
+function _assertThisInitialized(e) {
+  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
+  return e;
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _setPrototypeOf(t, e) {
+  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
+    return t.__proto__ = e, t;
+  }, _setPrototypeOf(t, e);
+}
 
-function setUTCISODay(dirtyDate, dirtyDay) {
-  requiredArgs(2, arguments);
-  var day = toInteger(dirtyDay);
+function _inherits(t, e) {
+  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
+  t.prototype = Object.create(e && e.prototype, {
+    constructor: {
+      value: t,
+      writable: !0,
+      configurable: !0
+    }
+  }), Object.defineProperty(t, "prototype", {
+    writable: !1
+  }), e && _setPrototypeOf(t, e);
+}
 
-  if (day % 7 === 0) {
-    day = day - 7;
-  }
+function _getPrototypeOf(t) {
+  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
+    return t.__proto__ || Object.getPrototypeOf(t);
+  }, _getPrototypeOf(t);
+}
 
-  var weekStartsOn = 1;
-  var date = toDate(dirtyDate);
-  var currentDay = date.getUTCDay();
-  var remainder = day % 7;
-  var dayIndex = (remainder + 7) % 7;
-  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
-  date.setUTCDate(date.getUTCDate() + diff);
-  return date;
+function _isNativeReflectConstruct() {
+  try {
+    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
+  } catch (t) {}
+  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
+    return !!t;
+  })();
+}
+
+function _possibleConstructorReturn(t, e) {
+  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
+  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
+  return _assertThisInitialized(t);
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _createSuper(t) {
+  var r = _isNativeReflectConstruct();
+  return function () {
+    var e,
+      o = _getPrototypeOf(t);
+    if (r) {
+      var s = _getPrototypeOf(this).constructor;
+      e = Reflect.construct(o, arguments, s);
+    } else e = o.apply(this, arguments);
+    return _possibleConstructorReturn(this, e);
+  };
+}
+
+function _classCallCheck(a, n) {
+  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
+}
+
+function toPrimitive(t, r) {
+  if ("object" != _typeof(t) || !t) return t;
+  var e = t[Symbol.toPrimitive];
+  if (void 0 !== e) {
+    var i = e.call(t, r || "default");
+    if ("object" != _typeof(i)) return i;
+    throw new TypeError("@@toPrimitive must return a primitive value.");
+  }
+  return ("string" === r ? String : Number)(t);
+}
 
-function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
-  requiredArgs(2, arguments);
-  var date = toDate(dirtyDate);
-  var isoWeek = toInteger(dirtyISOWeek);
-  var diff = getUTCISOWeek(date) - isoWeek;
-  date.setUTCDate(date.getUTCDate() - diff * 7);
-  return date;
+function toPropertyKey(t) {
+  var i = toPrimitive(t, "string");
+  return "symbol" == _typeof(i) ? i : i + "";
 }
 
-// See issue: https://github.com/date-fns/date-fns/issues/376
+function _defineProperties(e, r) {
+  for (var t = 0; t < r.length; t++) {
+    var o = r[t];
+    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
+  }
+}
+function _createClass(e, r, t) {
+  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
+    writable: !1
+  }), e;
+}
 
-function setUTCWeek(dirtyDate, dirtyWeek, options) {
-  requiredArgs(2, arguments);
-  var date = toDate(dirtyDate);
-  var week = toInteger(dirtyWeek);
-  var diff = getUTCWeek(date, options) - week;
-  date.setUTCDate(date.getUTCDate() - diff * 7);
-  return date;
+function _defineProperty(e, r, t) {
+  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
+    value: t,
+    enumerable: !0,
+    configurable: !0,
+    writable: !0
+  }) : e[r] = t, e;
 }
 
-var MILLISECONDS_IN_HOUR = 3600000;
-var MILLISECONDS_IN_MINUTE = 60000;
-var MILLISECONDS_IN_SECOND = 1000;
+var TIMEZONE_UNIT_PRIORITY = 10;
+var Setter = /*#__PURE__*/function () {
+  function Setter() {
+    _classCallCheck(this, Setter);
+    _defineProperty(this, "priority", void 0);
+    _defineProperty(this, "subPriority", 0);
+  }
+  _createClass(Setter, [{
+    key: "validate",
+    value: function validate(_utcDate, _options) {
+      return true;
+    }
+  }]);
+  return Setter;
+}();
+var ValueSetter = /*#__PURE__*/function (_Setter) {
+  _inherits(ValueSetter, _Setter);
+  var _super = _createSuper(ValueSetter);
+  function ValueSetter(value, validateValue, setValue, priority, subPriority) {
+    var _this;
+    _classCallCheck(this, ValueSetter);
+    _this = _super.call(this);
+    _this.value = value;
+    _this.validateValue = validateValue;
+    _this.setValue = setValue;
+    _this.priority = priority;
+    if (subPriority) {
+      _this.subPriority = subPriority;
+    }
+    return _this;
+  }
+  _createClass(ValueSetter, [{
+    key: "validate",
+    value: function validate(utcDate, options) {
+      return this.validateValue(utcDate, this.value, options);
+    }
+  }, {
+    key: "set",
+    value: function set(utcDate, flags, options) {
+      return this.setValue(utcDate, flags, this.value, options);
+    }
+  }]);
+  return ValueSetter;
+}(Setter);
+var DateToSystemTimezoneSetter = /*#__PURE__*/function (_Setter2) {
+  _inherits(DateToSystemTimezoneSetter, _Setter2);
+  var _super2 = _createSuper(DateToSystemTimezoneSetter);
+  function DateToSystemTimezoneSetter() {
+    var _this2;
+    _classCallCheck(this, DateToSystemTimezoneSetter);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this2 = _super2.call.apply(_super2, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
+    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
+    return _this2;
+  }
+  _createClass(DateToSystemTimezoneSetter, [{
+    key: "set",
+    value: function set(date, flags) {
+      if (flags.timestampIsSet) {
+        return date;
+      }
+      var convertedDate = new Date(0);
+      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
+      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
+      return convertedDate;
+    }
+  }]);
+  return DateToSystemTimezoneSetter;
+}(Setter);
+
+var Parser = /*#__PURE__*/function () {
+  function Parser() {
+    _classCallCheck(this, Parser);
+    _defineProperty(this, "incompatibleTokens", void 0);
+    _defineProperty(this, "priority", void 0);
+    _defineProperty(this, "subPriority", void 0);
+  }
+  _createClass(Parser, [{
+    key: "run",
+    value: function run(dateString, token, match, options) {
+      var result = this.parse(dateString, token, match, options);
+      if (!result) {
+        return null;
+      }
+      return {
+        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
+        rest: result.rest
+      };
+    }
+  }, {
+    key: "validate",
+    value: function validate(_utcDate, _value, _options) {
+      return true;
+    }
+  }]);
+  return Parser;
+}();
+
+var EraParser = /*#__PURE__*/function (_Parser) {
+  _inherits(EraParser, _Parser);
+  var _super = _createSuper(EraParser);
+  function EraParser() {
+    var _this;
+    _classCallCheck(this, EraParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 140);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
+    return _this;
+  }
+  _createClass(EraParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      switch (token) {
+        // AD, BC
+        case 'G':
+        case 'GG':
+        case 'GGG':
+          return match.era(dateString, {
+            width: 'abbreviated'
+          }) || match.era(dateString, {
+            width: 'narrow'
+          });
+        // A, B
+        case 'GGGGG':
+          return match.era(dateString, {
+            width: 'narrow'
+          });
+        // Anno Domini, Before Christ
+        case 'GGGG':
+        default:
+          return match.era(dateString, {
+            width: 'wide'
+          }) || match.era(dateString, {
+            width: 'abbreviated'
+          }) || match.era(dateString, {
+            width: 'narrow'
+          });
+      }
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
+      flags.era = value;
+      date.setUTCFullYear(value, 0, 1);
+      date.setUTCHours(0, 0, 0, 0);
+      return date;
+    }
+  }]);
+  return EraParser;
+}(Parser);
+
 var numericPatterns = {
   month: /^(1[0-2]|0?\d)/,
   // 0 to 12
@@ -6239,6 +6291,7 @@ var numericPatterns = {
   // 0 to 59
   second: /^[0-5]?\d/,
   // 0 to 59
+
   singleDigit: /^\d/,
   // 0 to 9
   twoDigits: /^\d{1,2}/,
@@ -6247,6 +6300,7 @@ var numericPatterns = {
   // 0 to 999
   fourDigits: /^\d{1,4}/,
   // 0 to 9999
+
   anyDigitsSigned: /^-?\d+/,
   singleDigitSigned: /^-?\d/,
   // 0 to 9, -0 to -9
@@ -6255,8 +6309,8 @@ var numericPatterns = {
   threeDigitsSigned: /^-?\d{1,3}/,
   // 0 to 999, -0 to -999
   fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
-
 };
+
 var timezonePatterns = {
   basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
   basic: /^([+-])(\d{2})(\d{2})|Z/,
@@ -6265,100 +6319,88 @@ var timezonePatterns = {
   extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
 };
 
-function parseNumericPattern(pattern, string, valueCallback) {
-  var matchResult = string.match(pattern);
-
+function mapValue(parseFnResult, mapFn) {
+  if (!parseFnResult) {
+    return parseFnResult;
+  }
+  return {
+    value: mapFn(parseFnResult.value),
+    rest: parseFnResult.rest
+  };
+}
+function parseNumericPattern(pattern, dateString) {
+  var matchResult = dateString.match(pattern);
   if (!matchResult) {
     return null;
   }
-
-  var value = parseInt(matchResult[0], 10);
   return {
-    value: valueCallback ? valueCallback(value) : value,
-    rest: string.slice(matchResult[0].length)
+    value: parseInt(matchResult[0], 10),
+    rest: dateString.slice(matchResult[0].length)
   };
 }
-
-function parseTimezonePattern(pattern, string) {
-  var matchResult = string.match(pattern);
-
+function parseTimezonePattern(pattern, dateString) {
+  var matchResult = dateString.match(pattern);
   if (!matchResult) {
     return null;
-  } // Input is 'Z'
-
+  }
 
+  // Input is 'Z'
   if (matchResult[0] === 'Z') {
     return {
       value: 0,
-      rest: string.slice(1)
+      rest: dateString.slice(1)
     };
   }
-
   var sign = matchResult[1] === '+' ? 1 : -1;
   var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
   var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
   var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
   return {
-    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
-    rest: string.slice(matchResult[0].length)
+    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
+    rest: dateString.slice(matchResult[0].length)
   };
 }
-
-function parseAnyDigitsSigned(string, valueCallback) {
-  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
+function parseAnyDigitsSigned(dateString) {
+  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
 }
-
-function parseNDigits(n, string, valueCallback) {
+function parseNDigits(n, dateString) {
   switch (n) {
     case 1:
-      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.singleDigit, dateString);
     case 2:
-      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.twoDigits, dateString);
     case 3:
-      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.threeDigits, dateString);
     case 4:
-      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.fourDigits, dateString);
     default:
-      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback);
+      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
   }
 }
-
-function parseNDigitsSigned(n, string, valueCallback) {
+function parseNDigitsSigned(n, dateString) {
   switch (n) {
     case 1:
-      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
     case 2:
-      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
     case 3:
-      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
     case 4:
-      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
-
+      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
     default:
-      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback);
+      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
   }
 }
-
-function dayPeriodEnumToHours(enumValue) {
-  switch (enumValue) {
+function dayPeriodEnumToHours(dayPeriod) {
+  switch (dayPeriod) {
     case 'morning':
       return 4;
-
     case 'evening':
       return 17;
-
     case 'pm':
     case 'noon':
     case 'afternoon':
       return 12;
-
     case 'am':
     case 'midnight':
     case 'night':
@@ -6366,16 +6408,14 @@ function dayPeriodEnumToHours(enumValue) {
       return 0;
   }
 }
-
 function normalizeTwoDigitYear(twoDigitYear, currentYear) {
-  var isCommonEra = currentYear > 0; // Absolute number of the current year:
+  var isCommonEra = currentYear > 0;
+  // Absolute number of the current year:
   // 1 -> 1 AC
   // 0 -> 1 BC
   // -1 -> 2 BC
-
   var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
   var result;
-
   if (absCurrentYear <= 50) {
     result = twoDigitYear || 100;
   } else {
@@ -6384,1077 +6424,1324 @@ function normalizeTwoDigitYear(twoDigitYear, currentYear) {
     var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
     result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
   }
-
   return isCommonEra ? result : 1 - result;
 }
-
-var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
-var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation
-
 function isLeapYearIndex(year) {
   return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
 }
-/*
- * |     | Unit                           |     | Unit                           |
- * |-----|--------------------------------|-----|--------------------------------|
- * |  a  | AM, PM                         |  A* | Milliseconds in day            |
- * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
- * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
- * |  d  | Day of month                   |  D  | Day of year                    |
- * |  e  | Local day of week              |  E  | Day of week                    |
- * |  f  |                                |  F* | Day of week in month           |
- * |  g* | Modified Julian day            |  G  | Era                            |
- * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
- * |  i! | ISO day of week                |  I! | ISO week of year               |
- * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
- * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
- * |  l* | (deprecated)                   |  L  | Stand-alone month              |
- * |  m  | Minute                         |  M  | Month                          |
- * |  n  |                                |  N  |                                |
- * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
- * |  p  |                                |  P  |                                |
- * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
- * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
- * |  s  | Second                         |  S  | Fraction of second             |
- * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
- * |  u  | Extended year                  |  U* | Cyclic year                    |
- * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
- * |  w  | Local week of year             |  W* | Week of month                  |
- * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
- * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
- * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
- *
- * Letters marked by * are not implemented but reserved by Unicode standard.
- *
- * Letters marked by ! are non-standard, but implemented by date-fns:
- * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
- * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
- *   i.e. 7 for Sunday, 1 for Monday, etc.
- * - `I` is ISO week of year, as opposed to `w` which is local week of year.
- * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
- *   `R` is supposed to be used in conjunction with `I` and `i`
- *   for universal ISO week-numbering date, whereas
- *   `Y` is supposed to be used in conjunction with `w` and `e`
- *   for week-numbering date specific to the locale.
- */
-
-
-var parsers = {
-  // Era
-  G: {
-    priority: 140,
-    parse: function (string, token, match, _options) {
-      switch (token) {
-        // AD, BC
-        case 'G':
-        case 'GG':
-        case 'GGG':
-          return match.era(string, {
-            width: 'abbreviated'
-          }) || match.era(string, {
-            width: 'narrow'
-          });
-        // A, B
-
-        case 'GGGGG':
-          return match.era(string, {
-            width: 'narrow'
-          });
-        // Anno Domini, Before Christ
 
-        case 'GGGG':
-        default:
-          return match.era(string, {
-            width: 'wide'
-          }) || match.era(string, {
-            width: 'abbreviated'
-          }) || match.era(string, {
-            width: 'narrow'
-          });
-      }
-    },
-    set: function (date, flags, value, _options) {
-      flags.era = value;
-      date.setUTCFullYear(value, 0, 1);
-      date.setUTCHours(0, 0, 0, 0);
-      return date;
-    },
-    incompatibleTokens: ['R', 'u', 't', 'T']
-  },
-  // Year
-  y: {
-    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
-    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
-    // |----------|-------|----|-------|-------|-------|
-    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
-    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
-    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
-    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
-    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
-    priority: 130,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (year) {
+// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
+// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
+// |----------|-------|----|-------|-------|-------|
+// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
+// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
+// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
+// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
+// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
+var YearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(YearParser, _Parser);
+  var _super = _createSuper(YearParser);
+  function YearParser() {
+    var _this;
+    _classCallCheck(this, YearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(YearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(year) {
         return {
           year: year,
           isTwoDigitYear: token === 'yy'
         };
       };
-
       switch (token) {
         case 'y':
-          return parseNDigits(4, string, valueCallback);
-
+          return mapValue(parseNDigits(4, dateString), valueCallback);
         case 'yo':
-          return match.ordinalNumber(string, {
-            unit: 'year',
-            valueCallback: valueCallback
-          });
-
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'year'
+          }), valueCallback);
         default:
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value.isTwoDigitYear || value.year > 0;
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       var currentYear = date.getUTCFullYear();
-
       if (value.isTwoDigitYear) {
         var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
         date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
         date.setUTCHours(0, 0, 0, 0);
         return date;
       }
-
       var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
       date.setUTCFullYear(year, 0, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local week-numbering year
-  Y: {
-    priority: 130,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (year) {
+    }
+  }]);
+  return YearParser;
+}(Parser);
+
+// Local week-numbering year
+var LocalWeekYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalWeekYearParser, _Parser);
+  var _super = _createSuper(LocalWeekYearParser);
+  function LocalWeekYearParser() {
+    var _this;
+    _classCallCheck(this, LocalWeekYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalWeekYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(year) {
         return {
           year: year,
           isTwoDigitYear: token === 'YY'
         };
       };
-
       switch (token) {
         case 'Y':
-          return parseNDigits(4, string, valueCallback);
-
+          return mapValue(parseNDigits(4, dateString), valueCallback);
         case 'Yo':
-          return match.ordinalNumber(string, {
-            unit: 'year',
-            valueCallback: valueCallback
-          });
-
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'year'
+          }), valueCallback);
         default:
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value.isTwoDigitYear || value.year > 0;
-    },
-    set: function (date, flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value, options) {
       var currentYear = getUTCWeekYear(date, options);
-
       if (value.isTwoDigitYear) {
         var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
         date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
         date.setUTCHours(0, 0, 0, 0);
         return startOfUTCWeek(date, options);
       }
-
       var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
       date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
       date.setUTCHours(0, 0, 0, 0);
       return startOfUTCWeek(date, options);
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
-  },
-  // ISO week-numbering year
-  R: {
-    priority: 130,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return LocalWeekYearParser;
+}(Parser);
+
+var ISOWeekYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOWeekYearParser, _Parser);
+  var _super = _createSuper(ISOWeekYearParser);
+  function ISOWeekYearParser() {
+    var _this;
+    _classCallCheck(this, ISOWeekYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISOWeekYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       if (token === 'R') {
-        return parseNDigitsSigned(4, string);
+        return parseNDigitsSigned(4, dateString);
       }
-
-      return parseNDigitsSigned(token.length, string);
-    },
-    set: function (_date, _flags, value, _options) {
+      return parseNDigitsSigned(token.length, dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       var firstWeekOfYear = new Date(0);
       firstWeekOfYear.setUTCFullYear(value, 0, 4);
       firstWeekOfYear.setUTCHours(0, 0, 0, 0);
       return startOfUTCISOWeek(firstWeekOfYear);
-    },
-    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
-  },
-  // Extended year
-  u: {
-    priority: 130,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return ISOWeekYearParser;
+}(Parser);
+
+var ExtendedYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ExtendedYearParser, _Parser);
+  var _super = _createSuper(ExtendedYearParser);
+  function ExtendedYearParser() {
+    var _this;
+    _classCallCheck(this, ExtendedYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 130);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ExtendedYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       if (token === 'u') {
-        return parseNDigitsSigned(4, string);
+        return parseNDigitsSigned(4, dateString);
       }
-
-      return parseNDigitsSigned(token.length, string);
-    },
-    set: function (date, _flags, value, _options) {
+      return parseNDigitsSigned(token.length, dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCFullYear(value, 0, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']
-  },
-  // Quarter
-  Q: {
-    priority: 120,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return ExtendedYearParser;
+}(Parser);
+
+var QuarterParser = /*#__PURE__*/function (_Parser) {
+  _inherits(QuarterParser, _Parser);
+  var _super = _createSuper(QuarterParser);
+  function QuarterParser() {
+    var _this;
+    _classCallCheck(this, QuarterParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 120);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(QuarterParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // 1, 2, 3, 4
         case 'Q':
         case 'QQ':
           // 01, 02, 03, 04
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 1st, 2nd, 3rd, 4th
-
         case 'Qo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'quarter'
           });
         // Q1, Q2, Q3, Q4
-
         case 'QQQ':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
         case 'QQQQQ':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // 1st quarter, 2nd quarter, ...
-
         case 'QQQQ':
         default:
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 4;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth((value - 1) * 3, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Stand-alone quarter
-  q: {
-    priority: 120,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return QuarterParser;
+}(Parser);
+
+var StandAloneQuarterParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneQuarterParser, _Parser);
+  var _super = _createSuper(StandAloneQuarterParser);
+  function StandAloneQuarterParser() {
+    var _this;
+    _classCallCheck(this, StandAloneQuarterParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 120);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneQuarterParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // 1, 2, 3, 4
         case 'q':
         case 'qq':
           // 01, 02, 03, 04
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 1st, 2nd, 3rd, 4th
-
         case 'qo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'quarter'
           });
         // Q1, Q2, Q3, Q4
-
         case 'qqq':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // 1, 2, 3, 4 (narrow quarter; could be not numerical)
-
         case 'qqqqq':
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // 1st quarter, 2nd quarter, ...
-
         case 'qqqq':
         default:
-          return match.quarter(string, {
+          return match.quarter(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.quarter(string, {
+          }) || match.quarter(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 4;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth((value - 1) * 3, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Month
-  M: {
-    priority: 110,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return StandAloneQuarterParser;
+}(Parser);
+
+var MonthParser = /*#__PURE__*/function (_Parser) {
+  _inherits(MonthParser, _Parser);
+  var _super = _createSuper(MonthParser);
+  function MonthParser() {
+    var _this;
+    _classCallCheck(this, MonthParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    _defineProperty(_assertThisInitialized(_this), "priority", 110);
+    return _this;
+  }
+  _createClass(MonthParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         return value - 1;
       };
-
       switch (token) {
         // 1, 2, ..., 12
         case 'M':
-          return parseNumericPattern(numericPatterns.month, string, valueCallback);
+          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
         // 01, 02, ..., 12
-
         case 'MM':
-          return parseNDigits(2, string, valueCallback);
+          return mapValue(parseNDigits(2, dateString), valueCallback);
         // 1st, 2nd, ..., 12th
-
         case 'Mo':
-          return match.ordinalNumber(string, {
-            unit: 'month',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'month'
+          }), valueCallback);
         // Jan, Feb, ..., Dec
-
         case 'MMM':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // J, F, ..., D
-
         case 'MMMMM':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // January, February, ..., December
-
         case 'MMMM':
         default:
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(value, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Stand-alone month
-  L: {
-    priority: 110,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return MonthParser;
+}(Parser);
+
+var StandAloneMonthParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneMonthParser, _Parser);
+  var _super = _createSuper(StandAloneMonthParser);
+  function StandAloneMonthParser() {
+    var _this;
+    _classCallCheck(this, StandAloneMonthParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 110);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneMonthParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         return value - 1;
       };
-
       switch (token) {
         // 1, 2, ..., 12
         case 'L':
-          return parseNumericPattern(numericPatterns.month, string, valueCallback);
+          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
         // 01, 02, ..., 12
-
         case 'LL':
-          return parseNDigits(2, string, valueCallback);
+          return mapValue(parseNDigits(2, dateString), valueCallback);
         // 1st, 2nd, ..., 12th
-
         case 'Lo':
-          return match.ordinalNumber(string, {
-            unit: 'month',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'month'
+          }), valueCallback);
         // Jan, Feb, ..., Dec
-
         case 'LLL':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // J, F, ..., D
-
         case 'LLLLL':
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // January, February, ..., December
-
         case 'LLLL':
         default:
-          return match.month(string, {
+          return match.month(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.month(string, {
+          }) || match.month(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(value, 1);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local week of year
-  w: {
-    priority: 100,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return StandAloneMonthParser;
+}(Parser);
+
+function setUTCWeek(dirtyDate, dirtyWeek, options) {
+  requiredArgs(2, arguments);
+  var date = toDate(dirtyDate);
+  var week = toInteger(dirtyWeek);
+  var diff = getUTCWeek(date, options) - week;
+  date.setUTCDate(date.getUTCDate() - diff * 7);
+  return date;
+}
+
+var LocalWeekParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalWeekParser, _Parser);
+  var _super = _createSuper(LocalWeekParser);
+  function LocalWeekParser() {
+    var _this;
+    _classCallCheck(this, LocalWeekParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 100);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalWeekParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'w':
-          return parseNumericPattern(numericPatterns.week, string);
-
+          return parseNumericPattern(numericPatterns.week, dateString);
         case 'wo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'week'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 53;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       return startOfUTCWeek(setUTCWeek(date, value, options), options);
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
-  },
-  // ISO week of year
-  I: {
-    priority: 100,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return LocalWeekParser;
+}(Parser);
+
+function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
+  requiredArgs(2, arguments);
+  var date = toDate(dirtyDate);
+  var isoWeek = toInteger(dirtyISOWeek);
+  var diff = getUTCISOWeek(date) - isoWeek;
+  date.setUTCDate(date.getUTCDate() - diff * 7);
+  return date;
+}
+
+var ISOWeekParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOWeekParser, _Parser);
+  var _super = _createSuper(ISOWeekParser);
+  function ISOWeekParser() {
+    var _this;
+    _classCallCheck(this, ISOWeekParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 100);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISOWeekParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'I':
-          return parseNumericPattern(numericPatterns.week, string);
-
+          return parseNumericPattern(numericPatterns.week, dateString);
         case 'Io':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'week'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 53;
-    },
-    set: function (date, _flags, value, options) {
-      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
-    },
-    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
-  },
-  // Day of the month
-  d: {
-    priority: 90,
-    subPriority: 1,
-    parse: function (string, token, match, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      return startOfUTCISOWeek(setUTCISOWeek(date, value));
+    }
+  }]);
+  return ISOWeekParser;
+}(Parser);
+
+var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
+
+// Day of the month
+var DateParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DateParser, _Parser);
+  var _super = _createSuper(DateParser);
+  function DateParser() {
+    var _this;
+    _classCallCheck(this, DateParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DateParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'd':
-          return parseNumericPattern(numericPatterns.date, string);
-
+          return parseNumericPattern(numericPatterns.date, dateString);
         case 'do':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'date'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(date, value) {
       var year = date.getUTCFullYear();
       var isLeapYear = isLeapYearIndex(year);
       var month = date.getUTCMonth();
-
       if (isLeapYear) {
         return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
       } else {
         return value >= 1 && value <= DAYS_IN_MONTH[month];
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCDate(value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Day of year
-  D: {
-    priority: 90,
-    subPriority: 1,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return DateParser;
+}(Parser);
+
+var DayOfYearParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayOfYearParser, _Parser);
+  var _super = _createSuper(DayOfYearParser);
+  function DayOfYearParser() {
+    var _this;
+    _classCallCheck(this, DayOfYearParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayOfYearParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'D':
         case 'DD':
-          return parseNumericPattern(numericPatterns.dayOfYear, string);
-
+          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
         case 'Do':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'date'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(date, value) {
       var year = date.getUTCFullYear();
       var isLeapYear = isLeapYearIndex(year);
-
       if (isLeapYear) {
         return value >= 1 && value <= 366;
       } else {
         return value >= 1 && value <= 365;
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMonth(0, value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']
-  },
-  // Day of week
-  E: {
-    priority: 90,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return DayOfYearParser;
+}(Parser);
+
+function setUTCDay(dirtyDate, dirtyDay, options) {
+  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
+  requiredArgs(2, arguments);
+  var defaultOptions = getDefaultOptions();
+  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
+
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
+  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
+    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
+  }
+  var date = toDate(dirtyDate);
+  var day = toInteger(dirtyDay);
+  var currentDay = date.getUTCDay();
+  var remainder = day % 7;
+  var dayIndex = (remainder + 7) % 7;
+  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
+  date.setUTCDate(date.getUTCDate() + diff);
+  return date;
+}
+
+var DayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayParser, _Parser);
+  var _super = _createSuper(DayParser);
+  function DayParser() {
+    var _this;
+    _classCallCheck(this, DayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         // Tue
         case 'E':
         case 'EE':
         case 'EEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // T
-
         case 'EEEEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tu
-
         case 'EEEEEE':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tuesday
-
         case 'EEEE':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']
-  },
-  // Local day of week
-  e: {
-    priority: 90,
-    parse: function (string, token, match, options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return DayParser;
+}(Parser);
+
+var LocalDayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(LocalDayParser, _Parser);
+  var _super = _createSuper(LocalDayParser);
+  function LocalDayParser() {
+    var _this;
+    _classCallCheck(this, LocalDayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(LocalDayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match, options) {
+      var valueCallback = function valueCallback(value) {
         var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
         return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
       };
-
       switch (token) {
         // 3
         case 'e':
         case 'ee':
           // 03
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
         // 3rd
-
         case 'eo':
-          return match.ordinalNumber(string, {
-            unit: 'day',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'day'
+          }), valueCallback);
         // Tue
-
         case 'eee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // T
-
         case 'eeeee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tu
-
         case 'eeeeee':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
         // Tuesday
-
         case 'eeee':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'formatting'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']
-  },
-  // Stand-alone local day of week
-  c: {
-    priority: 90,
-    parse: function (string, token, match, options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return LocalDayParser;
+}(Parser);
+
+var StandAloneLocalDayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(StandAloneLocalDayParser, _Parser);
+  var _super = _createSuper(StandAloneLocalDayParser);
+  function StandAloneLocalDayParser() {
+    var _this;
+    _classCallCheck(this, StandAloneLocalDayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
+    return _this;
+  }
+  _createClass(StandAloneLocalDayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match, options) {
+      var valueCallback = function valueCallback(value) {
         var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
         return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
       };
-
       switch (token) {
         // 3
         case 'c':
         case 'cc':
           // 03
-          return parseNDigits(token.length, string, valueCallback);
+          return mapValue(parseNDigits(token.length, dateString), valueCallback);
         // 3rd
-
         case 'co':
-          return match.ordinalNumber(string, {
-            unit: 'day',
-            valueCallback: valueCallback
-          });
+          return mapValue(match.ordinalNumber(dateString, {
+            unit: 'day'
+          }), valueCallback);
         // Tue
-
         case 'ccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // T
-
         case 'ccccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // Tu
-
         case 'cccccc':
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
         // Tuesday
-
         case 'cccc':
         default:
-          return match.day(string, {
+          return match.day(dateString, {
             width: 'wide',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'abbreviated',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'short',
             context: 'standalone'
-          }) || match.day(string, {
+          }) || match.day(dateString, {
             width: 'narrow',
             context: 'standalone'
           });
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 6;
-    },
-    set: function (date, _flags, value, options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value, options) {
       date = setUTCDay(date, value, options);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']
-  },
-  // ISO day of week
-  i: {
-    priority: 90,
-    parse: function (string, token, match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return StandAloneLocalDayParser;
+}(Parser);
+
+function setUTCISODay(dirtyDate, dirtyDay) {
+  requiredArgs(2, arguments);
+  var day = toInteger(dirtyDay);
+  if (day % 7 === 0) {
+    day = day - 7;
+  }
+  var weekStartsOn = 1;
+  var date = toDate(dirtyDate);
+  var currentDay = date.getUTCDay();
+  var remainder = day % 7;
+  var dayIndex = (remainder + 7) % 7;
+  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
+  date.setUTCDate(date.getUTCDate() + diff);
+  return date;
+}
+
+var ISODayParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISODayParser, _Parser);
+  var _super = _createSuper(ISODayParser);
+  function ISODayParser() {
+    var _this;
+    _classCallCheck(this, ISODayParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 90);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
+    return _this;
+  }
+  _createClass(ISODayParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
+      var valueCallback = function valueCallback(value) {
         if (value === 0) {
           return 7;
         }
-
         return value;
       };
-
       switch (token) {
         // 2
         case 'i':
         case 'ii':
           // 02
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
         // 2nd
-
         case 'io':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'day'
           });
         // Tue
-
         case 'iii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'abbreviated',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // T
-
         case 'iiiii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // Tu
-
         case 'iiiiii':
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
         // Tuesday
-
         case 'iiii':
         default:
-          return match.day(string, {
+          return mapValue(match.day(dateString, {
             width: 'wide',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'abbreviated',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'short',
-            context: 'formatting',
-            valueCallback: valueCallback
-          }) || match.day(string, {
+            context: 'formatting'
+          }) || match.day(dateString, {
             width: 'narrow',
-            context: 'formatting',
-            valueCallback: valueCallback
-          });
+            context: 'formatting'
+          }), valueCallback);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 7;
-    },
-    set: function (date, _flags, value, options) {
-      date = setUTCISODay(date, value, options);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      date = setUTCISODay(date, value);
       date.setUTCHours(0, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']
-  },
-  // AM or PM
-  a: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return ISODayParser;
+}(Parser);
+
+var AMPMParser = /*#__PURE__*/function (_Parser) {
+  _inherits(AMPMParser, _Parser);
+  var _super = _createSuper(AMPMParser);
+  function AMPMParser() {
+    var _this;
+    _classCallCheck(this, AMPMParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(AMPMParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'a':
         case 'aa':
         case 'aaa':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'aaaaa':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'aaaa':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']
-  },
-  // AM, PM, midnight
-  b: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return AMPMParser;
+}(Parser);
+
+var AMPMMidnightParser = /*#__PURE__*/function (_Parser) {
+  _inherits(AMPMMidnightParser, _Parser);
+  var _super = _createSuper(AMPMMidnightParser);
+  function AMPMMidnightParser() {
+    var _this;
+    _classCallCheck(this, AMPMMidnightParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(AMPMMidnightParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'b':
         case 'bb':
         case 'bbb':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'bbbbb':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'bbbb':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']
-  },
-  // in the morning, in the afternoon, in the evening, at night
-  B: {
-    priority: 80,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return AMPMMidnightParser;
+}(Parser);
+
+var DayPeriodParser = /*#__PURE__*/function (_Parser) {
+  _inherits(DayPeriodParser, _Parser);
+  var _super = _createSuper(DayPeriodParser);
+  function DayPeriodParser() {
+    var _this;
+    _classCallCheck(this, DayPeriodParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 80);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
+    return _this;
+  }
+  _createClass(DayPeriodParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'B':
         case 'BB':
         case 'BBB':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'BBBBB':
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
-
         case 'BBBB':
         default:
-          return match.dayPeriod(string, {
+          return match.dayPeriod(dateString, {
             width: 'wide',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'abbreviated',
             context: 'formatting'
-          }) || match.dayPeriod(string, {
+          }) || match.dayPeriod(dateString, {
             width: 'narrow',
             context: 'formatting'
           });
       }
-    },
-    set: function (date, _flags, value, _options) {
-      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
-      return date;
-    },
-    incompatibleTokens: ['a', 'b', 't', 'T']
-  },
-  // Hour [1-12]
-  h: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
+      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
+      return date;
+    }
+  }]);
+  return DayPeriodParser;
+}(Parser);
+
+var Hour1to12Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour1to12Parser, _Parser);
+  var _super = _createSuper(Hour1to12Parser);
+  function Hour1to12Parser() {
+    var _this;
+    _classCallCheck(this, Hour1to12Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour1to12Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'h':
-          return parseNumericPattern(numericPatterns.hour12h, string);
-
+          return parseNumericPattern(numericPatterns.hour12h, dateString);
         case 'ho':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 12;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var isPM = date.getUTCHours() >= 12;
-
       if (isPM && value < 12) {
         date.setUTCHours(value + 12, 0, 0, 0);
       } else if (!isPM && value === 12) {
@@ -7462,257 +7749,488 @@ var parsers = {
       } else {
         date.setUTCHours(value, 0, 0, 0);
       }
-
       return date;
-    },
-    incompatibleTokens: ['H', 'K', 'k', 't', 'T']
-  },
-  // Hour [0-23]
-  H: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour1to12Parser;
+}(Parser);
+
+var Hour0to23Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour0to23Parser, _Parser);
+  var _super = _createSuper(Hour0to23Parser);
+  function Hour0to23Parser() {
+    var _this;
+    _classCallCheck(this, Hour0to23Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour0to23Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'H':
-          return parseNumericPattern(numericPatterns.hour23h, string);
-
+          return parseNumericPattern(numericPatterns.hour23h, dateString);
         case 'Ho':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 23;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCHours(value, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']
-  },
-  // Hour [0-11]
-  K: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour0to23Parser;
+}(Parser);
+
+var Hour0To11Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour0To11Parser, _Parser);
+  var _super = _createSuper(Hour0To11Parser);
+  function Hour0To11Parser() {
+    var _this;
+    _classCallCheck(this, Hour0To11Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour0To11Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'K':
-          return parseNumericPattern(numericPatterns.hour11h, string);
-
+          return parseNumericPattern(numericPatterns.hour11h, dateString);
         case 'Ko':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 11;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var isPM = date.getUTCHours() >= 12;
-
       if (isPM && value < 12) {
         date.setUTCHours(value + 12, 0, 0, 0);
       } else {
         date.setUTCHours(value, 0, 0, 0);
       }
-
       return date;
-    },
-    incompatibleTokens: ['h', 'H', 'k', 't', 'T']
-  },
-  // Hour [1-24]
-  k: {
-    priority: 70,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour0To11Parser;
+}(Parser);
+
+var Hour1To24Parser = /*#__PURE__*/function (_Parser) {
+  _inherits(Hour1To24Parser, _Parser);
+  var _super = _createSuper(Hour1To24Parser);
+  function Hour1To24Parser() {
+    var _this;
+    _classCallCheck(this, Hour1To24Parser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 70);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
+    return _this;
+  }
+  _createClass(Hour1To24Parser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'k':
-          return parseNumericPattern(numericPatterns.hour24h, string);
-
+          return parseNumericPattern(numericPatterns.hour24h, dateString);
         case 'ko':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'hour'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 1 && value <= 24;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       var hours = value <= 24 ? value % 24 : value;
       date.setUTCHours(hours, 0, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']
-  },
-  // Minute
-  m: {
-    priority: 60,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return Hour1To24Parser;
+}(Parser);
+
+var MinuteParser = /*#__PURE__*/function (_Parser) {
+  _inherits(MinuteParser, _Parser);
+  var _super = _createSuper(MinuteParser);
+  function MinuteParser() {
+    var _this;
+    _classCallCheck(this, MinuteParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 60);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(MinuteParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 'm':
-          return parseNumericPattern(numericPatterns.minute, string);
-
+          return parseNumericPattern(numericPatterns.minute, dateString);
         case 'mo':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'minute'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 59;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMinutes(value, 0, 0);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Second
-  s: {
-    priority: 50,
-    parse: function (string, token, match, _options) {
+    }
+  }]);
+  return MinuteParser;
+}(Parser);
+
+var SecondParser = /*#__PURE__*/function (_Parser) {
+  _inherits(SecondParser, _Parser);
+  var _super = _createSuper(SecondParser);
+  function SecondParser() {
+    var _this;
+    _classCallCheck(this, SecondParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 50);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(SecondParser, [{
+    key: "parse",
+    value: function parse(dateString, token, match) {
       switch (token) {
         case 's':
-          return parseNumericPattern(numericPatterns.second, string);
-
+          return parseNumericPattern(numericPatterns.second, dateString);
         case 'so':
-          return match.ordinalNumber(string, {
+          return match.ordinalNumber(dateString, {
             unit: 'second'
           });
-
         default:
-          return parseNDigits(token.length, string);
+          return parseNDigits(token.length, dateString);
       }
-    },
-    validate: function (_date, value, _options) {
+    }
+  }, {
+    key: "validate",
+    value: function validate(_date, value) {
       return value >= 0 && value <= 59;
-    },
-    set: function (date, _flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCSeconds(value, 0);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Fraction of second
-  S: {
-    priority: 30,
-    parse: function (string, token, _match, _options) {
-      var valueCallback = function (value) {
+    }
+  }]);
+  return SecondParser;
+}(Parser);
+
+var FractionOfSecondParser = /*#__PURE__*/function (_Parser) {
+  _inherits(FractionOfSecondParser, _Parser);
+  var _super = _createSuper(FractionOfSecondParser);
+  function FractionOfSecondParser() {
+    var _this;
+    _classCallCheck(this, FractionOfSecondParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 30);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T']);
+    return _this;
+  }
+  _createClass(FractionOfSecondParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
+      var valueCallback = function valueCallback(value) {
         return Math.floor(value * Math.pow(10, -token.length + 3));
       };
-
-      return parseNDigits(token.length, string, valueCallback);
-    },
-    set: function (date, _flags, value, _options) {
+      return mapValue(parseNDigits(token.length, dateString), valueCallback);
+    }
+  }, {
+    key: "set",
+    value: function set(date, _flags, value) {
       date.setUTCMilliseconds(value);
       return date;
-    },
-    incompatibleTokens: ['t', 'T']
-  },
-  // Timezone (ISO-8601. +00:00 is `'Z'`)
-  X: {
-    priority: 10,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return FractionOfSecondParser;
+}(Parser);
+
+var ISOTimezoneWithZParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOTimezoneWithZParser, _Parser);
+  var _super = _createSuper(ISOTimezoneWithZParser);
+  function ISOTimezoneWithZParser() {
+    var _this;
+    _classCallCheck(this, ISOTimezoneWithZParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 10);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'x']);
+    return _this;
+  }
+  _createClass(ISOTimezoneWithZParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       switch (token) {
         case 'X':
-          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
         case 'XX':
-          return parseTimezonePattern(timezonePatterns.basic, string);
-
+          return parseTimezonePattern(timezonePatterns.basic, dateString);
         case 'XXXX':
-          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
         case 'XXXXX':
-          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
         case 'XXX':
         default:
-          return parseTimezonePattern(timezonePatterns.extended, string);
+          return parseTimezonePattern(timezonePatterns.extended, dateString);
       }
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       if (flags.timestampIsSet) {
         return date;
       }
-
       return new Date(date.getTime() - value);
-    },
-    incompatibleTokens: ['t', 'T', 'x']
-  },
-  // Timezone (ISO-8601)
-  x: {
-    priority: 10,
-    parse: function (string, token, _match, _options) {
+    }
+  }]);
+  return ISOTimezoneWithZParser;
+}(Parser);
+
+var ISOTimezoneParser = /*#__PURE__*/function (_Parser) {
+  _inherits(ISOTimezoneParser, _Parser);
+  var _super = _createSuper(ISOTimezoneParser);
+  function ISOTimezoneParser() {
+    var _this;
+    _classCallCheck(this, ISOTimezoneParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 10);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ['t', 'T', 'X']);
+    return _this;
+  }
+  _createClass(ISOTimezoneParser, [{
+    key: "parse",
+    value: function parse(dateString, token) {
       switch (token) {
         case 'x':
-          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
         case 'xx':
-          return parseTimezonePattern(timezonePatterns.basic, string);
-
+          return parseTimezonePattern(timezonePatterns.basic, dateString);
         case 'xxxx':
-          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
         case 'xxxxx':
-          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
-
+          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
         case 'xxx':
         default:
-          return parseTimezonePattern(timezonePatterns.extended, string);
+          return parseTimezonePattern(timezonePatterns.extended, dateString);
       }
-    },
-    set: function (date, flags, value, _options) {
+    }
+  }, {
+    key: "set",
+    value: function set(date, flags, value) {
       if (flags.timestampIsSet) {
         return date;
       }
-
       return new Date(date.getTime() - value);
-    },
-    incompatibleTokens: ['t', 'T', 'X']
-  },
-  // Seconds timestamp
-  t: {
-    priority: 40,
-    parse: function (string, _token, _match, _options) {
-      return parseAnyDigitsSigned(string);
-    },
-    set: function (_date, _flags, value, _options) {
+    }
+  }]);
+  return ISOTimezoneParser;
+}(Parser);
+
+var TimestampSecondsParser = /*#__PURE__*/function (_Parser) {
+  _inherits(TimestampSecondsParser, _Parser);
+  var _super = _createSuper(TimestampSecondsParser);
+  function TimestampSecondsParser() {
+    var _this;
+    _classCallCheck(this, TimestampSecondsParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 40);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
+    return _this;
+  }
+  _createClass(TimestampSecondsParser, [{
+    key: "parse",
+    value: function parse(dateString) {
+      return parseAnyDigitsSigned(dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       return [new Date(value * 1000), {
         timestampIsSet: true
       }];
-    },
-    incompatibleTokens: '*'
-  },
-  // Milliseconds timestamp
-  T: {
-    priority: 20,
-    parse: function (string, _token, _match, _options) {
-      return parseAnyDigitsSigned(string);
-    },
-    set: function (_date, _flags, value, _options) {
+    }
+  }]);
+  return TimestampSecondsParser;
+}(Parser);
+
+var TimestampMillisecondsParser = /*#__PURE__*/function (_Parser) {
+  _inherits(TimestampMillisecondsParser, _Parser);
+  var _super = _createSuper(TimestampMillisecondsParser);
+  function TimestampMillisecondsParser() {
+    var _this;
+    _classCallCheck(this, TimestampMillisecondsParser);
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+    _this = _super.call.apply(_super, [this].concat(args));
+    _defineProperty(_assertThisInitialized(_this), "priority", 20);
+    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", '*');
+    return _this;
+  }
+  _createClass(TimestampMillisecondsParser, [{
+    key: "parse",
+    value: function parse(dateString) {
+      return parseAnyDigitsSigned(dateString);
+    }
+  }, {
+    key: "set",
+    value: function set(_date, _flags, value) {
       return [new Date(value), {
         timestampIsSet: true
       }];
-    },
-    incompatibleTokens: '*'
-  }
+    }
+  }]);
+  return TimestampMillisecondsParser;
+}(Parser);
+
+/*
+ * |     | Unit                           |     | Unit                           |
+ * |-----|--------------------------------|-----|--------------------------------|
+ * |  a  | AM, PM                         |  A* | Milliseconds in day            |
+ * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
+ * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
+ * |  d  | Day of month                   |  D  | Day of year                    |
+ * |  e  | Local day of week              |  E  | Day of week                    |
+ * |  f  |                                |  F* | Day of week in month           |
+ * |  g* | Modified Julian day            |  G  | Era                            |
+ * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
+ * |  i! | ISO day of week                |  I! | ISO week of year               |
+ * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
+ * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
+ * |  l* | (deprecated)                   |  L  | Stand-alone month              |
+ * |  m  | Minute                         |  M  | Month                          |
+ * |  n  |                                |  N  |                                |
+ * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
+ * |  p  |                                |  P  |                                |
+ * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
+ * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
+ * |  s  | Second                         |  S  | Fraction of second             |
+ * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
+ * |  u  | Extended year                  |  U* | Cyclic year                    |
+ * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
+ * |  w  | Local week of year             |  W* | Week of month                  |
+ * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
+ * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
+ * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
+ *
+ * Letters marked by * are not implemented but reserved by Unicode standard.
+ *
+ * Letters marked by ! are non-standard, but implemented by date-fns:
+ * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
+ * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
+ *   i.e. 7 for Sunday, 1 for Monday, etc.
+ * - `I` is ISO week of year, as opposed to `w` which is local week of year.
+ * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
+ *   `R` is supposed to be used in conjunction with `I` and `i`
+ *   for universal ISO week-numbering date, whereas
+ *   `Y` is supposed to be used in conjunction with `w` and `e`
+ *   for week-numbering date specific to the locale.
+ */
+var parsers = {
+  G: new EraParser(),
+  y: new YearParser(),
+  Y: new LocalWeekYearParser(),
+  R: new ISOWeekYearParser(),
+  u: new ExtendedYearParser(),
+  Q: new QuarterParser(),
+  q: new StandAloneQuarterParser(),
+  M: new MonthParser(),
+  L: new StandAloneMonthParser(),
+  w: new LocalWeekParser(),
+  I: new ISOWeekParser(),
+  d: new DateParser(),
+  D: new DayOfYearParser(),
+  E: new DayParser(),
+  e: new LocalDayParser(),
+  c: new StandAloneLocalDayParser(),
+  i: new ISODayParser(),
+  a: new AMPMParser(),
+  b: new AMPMMidnightParser(),
+  B: new DayPeriodParser(),
+  h: new Hour1to12Parser(),
+  H: new Hour0to23Parser(),
+  K: new Hour0To11Parser(),
+  k: new Hour1To24Parser(),
+  m: new MinuteParser(),
+  s: new SecondParser(),
+  S: new FractionOfSecondParser(),
+  X: new ISOTimezoneWithZParser(),
+  x: new ISOTimezoneParser(),
+  t: new TimestampSecondsParser(),
+  T: new TimestampMillisecondsParser()
 };
-var parsers$1 = parsers;
 
-var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
 // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
 //   (one of the certain letters followed by `o`)
 // - (\w)\1* matches any sequences of the same letter
@@ -7723,15 +8241,16 @@ var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separate
 //   If there is no matching single quote
 //   then the sequence will continue until the end of the string.
 // - . matches any single character unmatched by previous parts of the RegExps
+var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
 
-var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
+// This RegExp catches symbols escaped by quotes, and also
 // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
-
 var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
 var escapedStringRegExp = /^'([^]*?)'?$/;
 var doubleQuoteRegExp = /''/g;
 var notWhitespaceRegExp = /\S/;
 var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
+
 /**
  * @name parse
  * @category Common Helpers
@@ -7741,7 +8260,7 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * Return the date parsed from string using the given format string.
  *
  * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
- * > See: https://git.io/fxCyr
+ * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * The characters in the format string wrapped between two single quotes characters (') are escaped.
  * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
@@ -7964,10 +8483,10 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  *    - `p`: long localized time
  *
  * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
- *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
- *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
+ *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  *
  * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
  *    on the given locale.
@@ -7998,23 +8517,6 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * Invalid Date is a Date, whose time value is NaN.
  * Time value of Date: http://es5.github.io/#x15.9.1.1
  *
- * ### v2.0.0 breaking changes:
- *
- * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
- *
- * - Old `parse` was renamed to `toDate`.
- *   Now `parse` is a new function which parses a string using a provided format.
- *
- *   ```javascript
- *   // Before v2.0.0
- *   parse('2016-01-01')
- *
- *   // v2.0.0 onward (toDate no longer accepts a string)
- *   toDate(1392098430000) // Unix to timestamp
- *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date
- *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
- *   ```
- *
  * @param {String} dateString - the string to parse
  * @param {String} formatString - the string of tokens
  * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
@@ -8023,18 +8525,18 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
  * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
  * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
- *   see: https://git.io/fxCyr
+ *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @returns {Date} the parsed date
  * @throws {TypeError} 3 arguments required
  * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
  * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
  * @throws {RangeError} `options.locale` must contain `match` property
- * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
- * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
+ * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
+ * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
  * @throws {RangeError} format string contains an unescaped latin alphabet character
  *
  * @example
@@ -8050,34 +8552,28 @@ var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  * })
  * //=> Sun Feb 28 2010 00:00:00
  */
-
-function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
+function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
+  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
   requiredArgs(3, arguments);
   var dateString = String(dirtyDateString);
   var formatString = String(dirtyFormatString);
-  var options = dirtyOptions || {};
-  var locale = options.locale || defaultLocale;
-
+  var defaultOptions = getDefaultOptions();
+  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
   if (!locale.match) {
     throw new RangeError('locale must contain match property');
   }
+  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
 
-  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
-  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
-  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
-
+  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
   if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
     throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
   }
+  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
 
-  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
-  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
-  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
-
+  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
   if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
     throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
   }
-
   if (formatString === '') {
     if (dateString === '') {
       return toDate(dirtyReferenceDate);
@@ -8085,113 +8581,96 @@ function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOpti
       return new Date(NaN);
     }
   }
-
   var subFnOptions = {
     firstWeekContainsDate: firstWeekContainsDate,
     weekStartsOn: weekStartsOn,
     locale: locale
-  }; // If timezone isn't specified, it will be set to the system timezone
+  };
 
-  var setters = [{
-    priority: TIMEZONE_UNIT_PRIORITY,
-    subPriority: -1,
-    set: dateToSystemTimezone,
-    index: 0
-  }];
-  var i;
+  // If timezone isn't specified, it will be set to the system timezone
+  var setters = [new DateToSystemTimezoneSetter()];
   var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
     var firstCharacter = substring[0];
-
-    if (firstCharacter === 'p' || firstCharacter === 'P') {
+    if (firstCharacter in longFormatters$1) {
       var longFormatter = longFormatters$1[firstCharacter];
-      return longFormatter(substring, locale.formatLong, subFnOptions);
+      return longFormatter(substring, locale.formatLong);
     }
-
     return substring;
   }).join('').match(formattingTokensRegExp);
   var usedTokens = [];
-
-  for (i = 0; i < tokens.length; i++) {
-    var token = tokens[i];
-
-    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
-      throwProtectedError(token, formatString, dirtyDateString);
-    }
-
-    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
-      throwProtectedError(token, formatString, dirtyDateString);
-    }
-
-    var firstCharacter = token[0];
-    var parser = parsers$1[firstCharacter];
-
-    if (parser) {
-      var incompatibleTokens = parser.incompatibleTokens;
-
-      if (Array.isArray(incompatibleTokens)) {
-        var incompatibleToken = void 0;
-
-        for (var _i = 0; _i < usedTokens.length; _i++) {
-          var usedToken = usedTokens[_i].token;
-
-          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
-            incompatibleToken = usedTokens[_i];
-            break;
+  var _iterator = _createForOfIteratorHelper(tokens),
+    _step;
+  try {
+    var _loop = function _loop() {
+      var token = _step.value;
+      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
+        throwProtectedError(token, formatString, dirtyDateString);
+      }
+      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
+        throwProtectedError(token, formatString, dirtyDateString);
+      }
+      var firstCharacter = token[0];
+      var parser = parsers[firstCharacter];
+      if (parser) {
+        var incompatibleTokens = parser.incompatibleTokens;
+        if (Array.isArray(incompatibleTokens)) {
+          var incompatibleToken = usedTokens.find(function (usedToken) {
+            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
+          });
+          if (incompatibleToken) {
+            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
           }
+        } else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
+          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
         }
-
-        if (incompatibleToken) {
-          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
+        usedTokens.push({
+          token: firstCharacter,
+          fullToken: token
+        });
+        var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
+        if (!parseResult) {
+          return {
+            v: new Date(NaN)
+          };
+        }
+        setters.push(parseResult.setter);
+        dateString = parseResult.rest;
+      } else {
+        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
+          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
         }
-      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {
-        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
-      }
-
-      usedTokens.push({
-        token: firstCharacter,
-        fullToken: token
-      });
-      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);
-
-      if (!parseResult) {
-        return new Date(NaN);
-      }
-
-      setters.push({
-        priority: parser.priority,
-        subPriority: parser.subPriority || 0,
-        set: parser.set,
-        validate: parser.validate,
-        value: parseResult.value,
-        index: setters.length
-      });
-      dateString = parseResult.rest;
-    } else {
-      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
-        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
-      } // Replace two single quote characters with one single quote character
-
-
-      if (token === "''") {
-        token = "'";
-      } else if (firstCharacter === "'") {
-        token = cleanEscapedString(token);
-      } // Cut token from string, or, if string doesn't match the token, return Invalid Date
 
+        // Replace two single quote characters with one single quote character
+        if (token === "''") {
+          token = "'";
+        } else if (firstCharacter === "'") {
+          token = cleanEscapedString(token);
+        }
 
-      if (dateString.indexOf(token) === 0) {
-        dateString = dateString.slice(token.length);
-      } else {
-        return new Date(NaN);
+        // Cut token from string, or, if string doesn't match the token, return Invalid Date
+        if (dateString.indexOf(token) === 0) {
+          dateString = dateString.slice(token.length);
+        } else {
+          return {
+            v: new Date(NaN)
+          };
+        }
       }
+    };
+    for (_iterator.s(); !(_step = _iterator.n()).done;) {
+      var _ret = _loop();
+      if (_typeof(_ret) === "object") return _ret.v;
     }
-  } // Check if the remaining input contains something other than whitespace
-
 
+    // Check if the remaining input contains something other than whitespace
+  } catch (err) {
+    _iterator.e(err);
+  } finally {
+    _iterator.f();
+  }
   if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
     return new Date(NaN);
   }
-
   var uniquePrioritySetters = setters.map(function (setter) {
     return setter.priority;
   }).sort(function (a, b) {
@@ -8208,48 +8687,38 @@ function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOpti
     return setterArray[0];
   });
   var date = toDate(dirtyReferenceDate);
-
-  if (isNaN(date)) {
+  if (isNaN(date.getTime())) {
     return new Date(NaN);
-  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
-  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
-  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37
-
+  }
 
+  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
   var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
   var flags = {};
-
-  for (i = 0; i < uniquePrioritySetters.length; i++) {
-    var setter = uniquePrioritySetters[i];
-
-    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
-      return new Date(NaN);
-    }
-
-    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)
-
-    if (result[0]) {
-      utcDate = result[0];
-      assign(flags, result[1]); // Result is date
-    } else {
-      utcDate = result;
+  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters),
+    _step2;
+  try {
+    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
+      var setter = _step2.value;
+      if (!setter.validate(utcDate, subFnOptions)) {
+        return new Date(NaN);
+      }
+      var result = setter.set(utcDate, flags, subFnOptions);
+      // Result is tuple (date, flags)
+      if (Array.isArray(result)) {
+        utcDate = result[0];
+        assign(flags, result[1]);
+        // Result is date
+      } else {
+        utcDate = result;
+      }
     }
+  } catch (err) {
+    _iterator2.e(err);
+  } finally {
+    _iterator2.f();
   }
-
   return utcDate;
 }
-
-function dateToSystemTimezone(date, flags) {
-  if (flags.timestampIsSet) {
-    return date;
-  }
-
-  var convertedDate = new Date(0);
-  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
-  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
-  return convertedDate;
-}
-
 function cleanEscapedString(input) {
   return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
 }
@@ -8301,8 +8770,8 @@ date.format = function (v, column) {
 };
 
 var date$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': date
+	__proto__: null,
+	'default': date
 });
 
 const number = Object.assign({}, defaultType);
@@ -8330,8 +8799,8 @@ number.compare = function (x, y) {
 };
 
 var number$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': number
+	__proto__: null,
+	'default': number
 });
 
 const decimal = Object.assign({}, number);
@@ -8342,8 +8811,8 @@ decimal.format = function (v) {
 };
 
 var decimal$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': decimal
+	__proto__: null,
+	'default': decimal
 });
 
 const percentage = Object.assign({}, number);
@@ -8354,8 +8823,8 @@ percentage.format = function (v) {
 };
 
 var percentage$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': percentage
+	__proto__: null,
+	'default': percentage
 });
 
 const boolean = Object.assign({}, defaultType);
@@ -8382,8 +8851,8 @@ boolean.compare = function (x, y) {
 };
 
 var boolean$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  'default': boolean
+	__proto__: null,
+	'default': boolean
 });
 
 var index$1 = {
@@ -8930,13 +9399,13 @@ const _sfc_main = {
 									sortValue =
 										sortValue ||
 										sortFn(xvalue, yvalue, column, xRow, yRow) *
-											(srt.type === SORT_TYPES.Descending ? -1 : 1);
+										(srt.type === SORT_TYPES.Descending ? -1 : 1);
 								} else {
 									//* else we use our own sort
 									sortValue =
 										sortValue ||
 										column.typeDef.compare(xvalue, yvalue, column) *
-											(srt.type === SORT_TYPES.Descending ? -1 : 1);
+										(srt.type === SORT_TYPES.Descending ? -1 : 1);
 								}
 							}
 						}
@@ -9520,7 +9989,7 @@ const _sfc_main = {
 									this.columnFilters[fieldKey(col.field)],
 									false,
 									col.filterOptions &&
-										typeof col.filterOptions.filterDropdownItems === "object"
+									typeof col.filterOptions.filterDropdownItems === "object"
 								);
 							});
 							// should we remove the header?
@@ -9907,20 +10376,24 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
               name: "internal-table-actions",
               fn: withCtx(() => [
                 renderSlot(_ctx.$slots, "table-actions")
-              ])
+              ]),
+              key: "0"
             }
           : undefined
       ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["onKeyup", "onEnter", "value", "search-enabled", "global-search-placeholder"]),
-      ($options.selectedRowCount && !_ctx.disableSelectInfo)
+      (!_ctx.disableSelectInfo)
         ? (openBlock(), createElementBlock("div", {
             key: 1,
             class: normalizeClass(["vgt-selection-info-row clearfix", _ctx.selectionInfoClass])
           }, [
             createTextVNode(toDisplayString($options.selectionInfo) + " ", 1 /* TEXT */),
-            createElementVNode("a", {
-              href: "",
-              onClick: _cache[1] || (_cache[1] = withModifiers($event => ($options.unselectAllInternal(true)), ["prevent"]))
-            }, toDisplayString(_ctx.clearSelectionText), 1 /* TEXT */),
+            (!!_ctx.clearSelectionText)
+              ? (openBlock(), createElementBlock("a", {
+                  key: 0,
+                  href: "",
+                  onClick: _cache[1] || (_cache[1] = withModifiers($event => ($options.unselectAllInternal(true)), ["prevent"]))
+                }, toDisplayString(_ctx.clearSelectionText), 1 /* TEXT */))
+              : createCommentVNode("v-if", true),
             createElementVNode("div", _hoisted_3, [
               renderSlot(_ctx.$slots, "selected-row-actions")
             ])
@@ -10062,7 +10535,8 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               formattedRow: slotProps.formattedRow,
                               row: slotProps.row
                             })
-                          ])
+                          ]),
+                          key: "0"
                         }
                       : undefined
                   ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["onVgtExpand", "header-row", "columns", "line-numbers", "selectable", "select-all-by-group", "collapsable", "collect-formatted", "formatted-row", "class", "get-classes", "full-colspan", "groupIndex", "onSelectGroupChange"]))
@@ -10123,7 +10597,7 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               : createCommentVNode("v-if", true)
                           ], 64 /* STABLE_FRAGMENT */))
                         }), 256 /* UNKEYED_FRAGMENT */))
-                      ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_7))
+                      ], 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_7))
                     : createCommentVNode("v-if", true),
                   (_ctx.expandedRowIndex === index)
                     ? (openBlock(), createElementBlock("tr", {
@@ -10173,7 +10647,8 @@ function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
                               formattedRow: slotProps.formattedRow,
                               row: slotProps.row
                             })
-                          ])
+                          ]),
+                          key: "0"
                         }
                       : undefined
                   ]), 1032 /* PROPS, DYNAMIC_SLOTS */, ["header-row", "columns", "line-numbers", "selectable", "select-all-by-group", "collect-formatted", "formatted-row", "get-classes", "full-colspan", "groupIndex", "onSelectGroupChange"]))
diff --git a/node_modules/vue-good-table-next/src/components/Table.vue b/node_modules/vue-good-table-next/src/components/Table.vue
index b877e8b..c152375 100644
--- a/node_modules/vue-good-table-next/src/components/Table.vue
+++ b/node_modules/vue-good-table-next/src/components/Table.vue
@@ -6,52 +6,26 @@
 			</slot>
 		</div>
 		<div class="vgt-inner-wrap" :class="{ 'is-loading': isLoading }">
-			<slot
-				v-if="paginate && paginateOnTop"
-				name="pagination-top"
-				:pageChanged="pageChanged"
-				:perPageChanged="perPageChanged"
-				:total="totalRows || totalRowCount"
-			>
-				<vgt-pagination
-					ref="paginationTop"
-					@page-changed="pageChanged"
-					@per-page-changed="perPageChanged"
-					:perPage="perPage"
-					:rtl="rtl"
-					:total="totalRows || totalRowCount"
-					:mode="paginationMode"
-					:nextText="nextText"
-					:prevText="prevText"
-					:rowsPerPageText="rowsPerPageText"
+			<slot v-if="paginate && paginateOnTop" name="pagination-top" :pageChanged="pageChanged"
+				:perPageChanged="perPageChanged" :total="totalRows || totalRowCount">
+				<vgt-pagination ref="paginationTop" @page-changed="pageChanged" @per-page-changed="perPageChanged"
+					:perPage="perPage" :rtl="rtl" :total="totalRows || totalRowCount" :mode="paginationMode"
+					:nextText="nextText" :prevText="prevText" :rowsPerPageText="rowsPerPageText"
 					:perPageDropdownEnabled="paginationOptions.perPageDropdownEnabled"
 					:customRowsPerPageDropdown="customRowsPerPageDropdown"
-					:paginateDropdownAllowAll="paginateDropdownAllowAll"
-					:ofText="ofText"
-					:pageText="pageText"
-					:allText="allText"
-					:info-fn="paginationInfoFn"
-				></vgt-pagination>
+					:paginateDropdownAllowAll="paginateDropdownAllowAll" :ofText="ofText" :pageText="pageText"
+					:allText="allText" :info-fn="paginationInfoFn"></vgt-pagination>
 			</slot>
-			<vgt-global-search
-				v-on:keyup="searchTableOnKeyUp"
-				v-on:enter="searchTableOnEnter"
-				:value="globalSearchTerm"
-				@input="globalSearchTerm = $event"
-				:search-enabled="searchEnabled && externalSearchQuery == null"
-				:global-search-placeholder="searchPlaceholder"
-			>
+			<vgt-global-search v-on:keyup="searchTableOnKeyUp" v-on:enter="searchTableOnEnter" :value="globalSearchTerm"
+				@input="globalSearchTerm = $event" :search-enabled="searchEnabled && externalSearchQuery == null"
+				:global-search-placeholder="searchPlaceholder">
 				<template #internal-table-actions v-if="$slots['table-actions']">
 					<slot name="table-actions"> </slot>
 				</template>
 			</vgt-global-search>
-			<div
-				v-if="selectedRowCount && !disableSelectInfo"
-				class="vgt-selection-info-row clearfix"
-				:class="selectionInfoClass"
-			>
+			<div v-if="!disableSelectInfo" class="vgt-selection-info-row clearfix" :class="selectionInfoClass">
 				{{ selectionInfo }}
-				<a href="" @click.prevent="unselectAllInternal(true)">
+				<a v-if="!!clearSelectionText" href="" @click.prevent="unselectAllInternal(true)">
 					{{ clearSelectionText }}
 				</a>
 				<div class="vgt-selection-info-row__actions vgt-pull-right">
@@ -61,44 +35,25 @@
 			<div class="vgt-fixed-header">
 				<table id="vgt-table" v-if="fixedHeader" :class="tableStyleClasses">
 					<colgroup>
-						<col
-							v-for="(column, index) in columns"
-							:key="index"
-							:id="`col-${index}`"
-						/>
+						<col v-for="(column, index) in columns" :key="index" :id="`col-${index}`" />
 					</colgroup>
 					<!-- Table header -->
-					<vgt-table-header
-						ref="table-header-secondary"
-						v-on:toggle-select-all="toggleSelectAll"
-						v-on:toggle-expand-rows-all="toggleExpandRowsAll"
-						v-on:sort-change="changeSort"
-						@filter-changed="filterRows"
-						:columns="columns"
-						:line-numbers="lineNumbers"
-						:selectable="selectable"
-						:all-selected="allSelected"
-						:all-selected-indeterminate="allSelectedIndeterminate"
-						:mode="mode"
-						:sortable="sortable"
-						:multiple-column-sort="multipleColumnSort"
-						:typed-columns="typedColumns"
-						:getClasses="getClasses"
-						:searchEnabled="searchEnabled"
-						:paginated="paginated"
-						:table-ref="$refs.table"
-					>
+					<vgt-table-header ref="table-header-secondary" v-on:toggle-select-all="toggleSelectAll"
+						v-on:toggle-expand-rows-all="toggleExpandRowsAll" v-on:sort-change="changeSort"
+						@filter-changed="filterRows" :columns="columns" :line-numbers="lineNumbers"
+						:selectable="selectable" :all-selected="allSelected"
+						:all-selected-indeterminate="allSelectedIndeterminate" :mode="mode" :sortable="sortable"
+						:multiple-column-sort="multipleColumnSort" :typed-columns="typedColumns"
+						:getClasses="getClasses" :searchEnabled="searchEnabled" :paginated="paginated"
+						:table-ref="$refs.table">
 						<template #table-column="slotProps">
 							<slot name="table-column" :column="slotProps.column">
 								<span>{{ slotProps.column.label }}</span>
 							</slot>
 						</template>
 						<template #column-filter="slotProps">
-							<slot
-								name="column-filter"
-								:column="slotProps.column"
-								:updateFilters="slotProps.updateFilters"
-							></slot>
+							<slot name="column-filter" :column="slotProps.column"
+								:updateFilters="slotProps.updateFilters"></slot>
 						</template>
 					</vgt-table-header>
 				</table>
@@ -106,120 +61,66 @@
 			<div :class="{ 'vgt-responsive': responsive }" :style="wrapperStyles">
 				<table id="vgt-table" ref="table" :class="tableStyles">
 					<colgroup>
-						<col
-							v-for="(column, index) in columns"
-							:key="index"
-							:id="`col-${index}`"
-						/>
+						<col v-for="(column, index) in columns" :key="index" :id="`col-${index}`" />
 					</colgroup>
 					<!-- Table header -->
-					<vgt-table-header
-						ref="table-header-primary"
-						v-on:toggle-select-all="toggleSelectAll"
-						v-on:toggle-expand-rows-all="toggleExpandRowsAll"
-						v-on:sort-change="changeSort"
-						@filter-changed="filterRows"
-						:columns="columns"
-						:line-numbers="lineNumbers"
-						:selectable="selectable"
-						:all-selected="allSelected"
-						:all-selected-indeterminate="allSelectedIndeterminate"
-						:mode="mode"
-						:sortable="sortable"
-						:multiple-column-sort="multipleColumnSort"
-						:typed-columns="typedColumns"
-						:getClasses="getClasses"
-						:searchEnabled="searchEnabled"
-					>
+					<vgt-table-header ref="table-header-primary" v-on:toggle-select-all="toggleSelectAll"
+						v-on:toggle-expand-rows-all="toggleExpandRowsAll" v-on:sort-change="changeSort"
+						@filter-changed="filterRows" :columns="columns" :line-numbers="lineNumbers"
+						:selectable="selectable" :all-selected="allSelected"
+						:all-selected-indeterminate="allSelectedIndeterminate" :mode="mode" :sortable="sortable"
+						:multiple-column-sort="multipleColumnSort" :typed-columns="typedColumns"
+						:getClasses="getClasses" :searchEnabled="searchEnabled">
 						<template #table-column="slotProps">
 							<slot name="table-column" :column="slotProps.column">
 								<span>{{ slotProps.column.label }}</span>
 							</slot>
 						</template>
 						<template #column-filter="slotProps">
-							<slot
-								name="column-filter"
-								:column="slotProps.column"
-								:updateFilters="slotProps.updateFilters"
-							></slot>
+							<slot name="column-filter" :column="slotProps.column"
+								:updateFilters="slotProps.updateFilters"></slot>
 						</template>
 					</vgt-table-header>
 
 					<!-- Table body starts here -->
 					<tbody v-for="(headerRow, hIndex) in paginated" :key="hIndex">
 						<!-- if group row header is at the top -->
-						<vgt-header-row
-							v-if="groupHeaderOnTop"
-							@vgtExpand="toggleExpand(headerRow[rowKeyField])"
-							:header-row="headerRow"
-							:columns="columns"
-							:line-numbers="lineNumbers"
-							:selectable="selectable"
-							:select-all-by-group="selectAllByGroup"
-							:collapsable="groupOptions.collapsable"
-							:collect-formatted="collectFormatted"
-							:formatted-row="formattedRow"
-							:class="getRowStyleClass(headerRow)"
-							:get-classes="getClasses"
-							:full-colspan="fullColspan"
-							:groupIndex="hIndex"
-							v-on:select-group-change="toggleSelectGroup($event, headerRow)"
-						>
-							<template
-								v-if="hasHeaderRowTemplate"
-								#table-header-row="slotProps"
-							>
-								<slot
-									name="table-header-row"
-									:column="slotProps.column"
-									:formattedRow="slotProps.formattedRow"
-									:row="slotProps.row"
-								>
+						<vgt-header-row v-if="groupHeaderOnTop" @vgtExpand="toggleExpand(headerRow[rowKeyField])"
+							:header-row="headerRow" :columns="columns" :line-numbers="lineNumbers"
+							:selectable="selectable" :select-all-by-group="selectAllByGroup"
+							:collapsable="groupOptions.collapsable" :collect-formatted="collectFormatted"
+							:formatted-row="formattedRow" :class="getRowStyleClass(headerRow)" :get-classes="getClasses"
+							:full-colspan="fullColspan" :groupIndex="hIndex"
+							v-on:select-group-change="toggleSelectGroup($event, headerRow)">
+							<template v-if="hasHeaderRowTemplate" #table-header-row="slotProps">
+								<slot name="table-header-row" :column="slotProps.column"
+									:formattedRow="slotProps.formattedRow" :row="slotProps.row">
 								</slot>
 							</template>
 						</vgt-header-row>
 						<!-- normal rows here. we loop over all rows -->
 						<template v-for="(row, index) in headerRow.children">
-							<tr
-								v-if="groupOptions.collapsable ? headerRow.vgtIsExpanded : true"
-								:key="row.originalIndex"
-								:class="getRowStyleClass(row)"
-								@mouseenter="onMouseenter(row, index)"
-								@mouseleave="onMouseleave(row, index)"
+							<tr v-if="groupOptions.collapsable ? headerRow.vgtIsExpanded : true"
+								:key="row.originalIndex" :class="getRowStyleClass(row)"
+								@mouseenter="onMouseenter(row, index)" @mouseleave="onMouseleave(row, index)"
 								@dblclick="onRowDoubleClicked(row, index, $event)"
 								@click="onRowClicked(row, index, $event)"
-								@auxclick="onRowAuxClicked(row, index, $event)"
-							>
+								@auxclick="onRowAuxClicked(row, index, $event)">
 								<th v-if="lineNumbers" class="line-numbers">
 									{{ getCurrentIndex(row.originalIndex) }}
 								</th>
-								<th
-									v-if="selectable"
-									@click.stop="onCheckboxClicked(row, index, $event)"
-									class="vgt-checkbox-col"
-								>
-									<input
-										type="checkbox"
-										:disabled="row.vgtDisabled"
-										:checked="row.vgtSelected"
-									/>
+								<th v-if="selectable" @click.stop="onCheckboxClicked(row, index, $event)"
+									class="vgt-checkbox-col">
+									<input type="checkbox" :disabled="row.vgtDisabled" :checked="row.vgtSelected" />
 								</th>
 								<template v-for="(column, i) in columns">
-									<td
-										:key="i"
-										v-if="!column.hidden && column.field"
+									<td :key="i" v-if="!column.hidden && column.field"
 										@click="onCellClicked(row, column, index, $event)"
 										:class="getClasses(i, 'td', row)"
-										v-bind:data-label="compactMode ? column.label : undefined"
-									>
-										<slot
-											name="table-row"
-											:row="row"
-											:column="column"
-											:formattedRow="formattedRow(row)"
-											:index="index"
-											:expandedRow="expandedRowIndex === index"
-										>
+										v-bind:data-label="compactMode ? column.label : undefined">
+										<slot name="table-row" :row="row" :column="column"
+											:formattedRow="formattedRow(row)" :index="index"
+											:expandedRow="expandedRowIndex === index">
 											<span v-if="!column.html">
 												{{ collectFormatted(row, column) }}
 											</span>
@@ -228,55 +129,29 @@
 									</td>
 								</template>
 							</tr>
-							<tr
-								v-if="expandedRowIndex === index"
-								:class="expandedRowDetailClasses"
-								:key="row.originalIndex"
-							>
+							<tr v-if="expandedRowIndex === index" :class="expandedRowDetailClasses"
+								:key="row.originalIndex">
 								<td :colspan="fullColspan">
-									<slot
-										name="row-details"
-										:row="row"
-										:formattedRow="formattedRow(row)"
-										:index="index"
-									>
+									<slot name="row-details" :row="row" :formattedRow="formattedRow(row)"
+										:index="index">
 									</slot>
 								</td>
 							</tr>
-							<tr
-								v-if="row['expanded']"
-								:key="row.originalIndex"
-							>
+							<tr v-if="row['expanded']" :key="row.originalIndex">
 								<td :colspan="fullColspan">
 									{{ row["expandedRow"] }}
 								</td>
 							</tr>
 						</template>
 						<!-- if group row header is at the bottom -->
-						<vgt-header-row
-							v-if="groupHeaderOnBottom"
-							:header-row="headerRow"
-							:columns="columns"
-							:line-numbers="lineNumbers"
-							:selectable="selectable"
-							:select-all-by-group="selectAllByGroup"
-							:collect-formatted="collectFormatted"
-							:formatted-row="formattedRow"
-							:get-classes="getClasses"
-							:full-colspan="fullColspan"
-							:groupIndex="index"
-							v-on:select-group-change="toggleSelectGroup($event, headerRow)"
-						>
-							<template
-								v-if="hasHeaderRowTemplate"
-								#table-header-row="slotProps"
-							>
-								<slot
-									name="table-header-row"
-									:column="slotProps.column"
-									:formattedRow="slotProps.formattedRow"
-									:row="slotProps.row"
-								>
+						<vgt-header-row v-if="groupHeaderOnBottom" :header-row="headerRow" :columns="columns"
+							:line-numbers="lineNumbers" :selectable="selectable" :select-all-by-group="selectAllByGroup"
+							:collect-formatted="collectFormatted" :formatted-row="formattedRow"
+							:get-classes="getClasses" :full-colspan="fullColspan" :groupIndex="index"
+							v-on:select-group-change="toggleSelectGroup($event, headerRow)">
+							<template v-if="hasHeaderRowTemplate" #table-header-row="slotProps">
+								<slot name="table-header-row" :column="slotProps.column"
+									:formattedRow="slotProps.formattedRow" :row="slotProps.row">
 								</slot>
 							</template>
 						</vgt-header-row>
@@ -298,45 +173,28 @@
 			<div v-if="hasFooterSlot" class="vgt-wrap__actions-footer">
 				<slot name="table-actions-bottom"> </slot>
 			</div>
-			<slot
-				v-if="paginate && paginateOnBottom"
-				name="pagination-bottom"
-				:pageChanged="pageChanged"
-				:perPageChanged="perPageChanged"
-				:total="totalRows || totalRowCount"
-			>
-				<vgt-pagination
-					ref="paginationBottom"
-					@page-changed="pageChanged"
-					@per-page-changed="perPageChanged"
-					:perPage="perPage"
-					:rtl="rtl"
-					:total="totalRows || totalRowCount"
-					:mode="paginationMode"
-					:nextText="nextText"
-					:prevText="prevText"
-					:rowsPerPageText="rowsPerPageText"
+			<slot v-if="paginate && paginateOnBottom" name="pagination-bottom" :pageChanged="pageChanged"
+				:perPageChanged="perPageChanged" :total="totalRows || totalRowCount">
+				<vgt-pagination ref="paginationBottom" @page-changed="pageChanged" @per-page-changed="perPageChanged"
+					:perPage="perPage" :rtl="rtl" :total="totalRows || totalRowCount" :mode="paginationMode"
+					:nextText="nextText" :prevText="prevText" :rowsPerPageText="rowsPerPageText"
 					:perPageDropdownEnabled="paginationOptions.perPageDropdownEnabled"
 					:customRowsPerPageDropdown="customRowsPerPageDropdown"
-					:paginateDropdownAllowAll="paginateDropdownAllowAll"
-					:ofText="ofText"
-					:pageText="pageText"
-					:allText="allText"
-					:info-fn="paginationInfoFn"
-				></vgt-pagination>
+					:paginateDropdownAllowAll="paginateDropdownAllowAll" :ofText="ofText" :pageText="pageText"
+					:allText="allText" :info-fn="paginationInfoFn"></vgt-pagination>
 			</slot>
 		</div>
 	</div>
 </template>
 
 <script>
-import { DEFAULT_SORT_TYPE, SORT_TYPES } from "./utils/constants";
 import isEqual from "lodash.isequal";
-import defaultType from "./types/default";
-import VgtPagination from "./pagination/VgtPagination.vue";
 import VgtGlobalSearch from "./VgtGlobalSearch.vue";
-import VgtTableHeader from "./VgtTableHeader.vue";
 import VgtHeaderRow from "./VgtHeaderRow.vue";
+import VgtTableHeader from "./VgtTableHeader.vue";
+import VgtPagination from "./pagination/VgtPagination.vue";
+import defaultType from "./types/default";
+import { SORT_TYPES } from "./utils/constants";
 
 // here we load each data type module.
 import * as CoreDataTypes from "./types/index";
@@ -877,13 +735,13 @@ export default {
 									sortValue =
 										sortValue ||
 										sortFn(xvalue, yvalue, column, xRow, yRow) *
-											(srt.type === SORT_TYPES.Descending ? -1 : 1);
+										(srt.type === SORT_TYPES.Descending ? -1 : 1);
 								} else {
 									//* else we use our own sort
 									sortValue =
 										sortValue ||
 										column.typeDef.compare(xvalue, yvalue, column) *
-											(srt.type === SORT_TYPES.Descending ? -1 : 1);
+										(srt.type === SORT_TYPES.Descending ? -1 : 1);
 								}
 							}
 						}
@@ -1467,7 +1325,7 @@ export default {
 									this.columnFilters[fieldKey(col.field)],
 									false,
 									col.filterOptions &&
-										typeof col.filterOptions.filterDropdownItems === "object"
+									typeof col.filterOptions.filterDropdownItems === "object"
 								);
 							});
 							// should we remove the header?
